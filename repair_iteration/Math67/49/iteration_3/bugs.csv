bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max),  optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max),  optima[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max),  optima[i]);	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	115	None	replace
2	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(max),  optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(max),  optima[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(max),  optima[i]);	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	115	None	replace
3	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(min,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
4	[BUG]  [BUGGY]  optimisation.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(min,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
5	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
6	[BUG]  [BUGGY]  optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
7	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    max,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
8	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  maxType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  maxType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  maxType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    max,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
9	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(lastNaN,  lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(lastNaN,  lastNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(lastNaN,  lastNaN));	  optima[i]    =    optimizer.optimize(f,    min,    max,    Math.min(lastNaN,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
10	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(lastNaN,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(lastNaN,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(lastNaN,  optimaValues[i]));	  optima[i]    =    optimizer.optimize(f,    min,    max,    Math.min(lastNaN,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
11	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(lastNaN,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(lastNaN,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(lastNaN,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    min,    max,    Math.min(lastNaN,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Double.isNaN(optima[i]))    {    optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	157	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Double.isNaN(optima[i]))    {    optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	157	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Double.isNaN(optima[i]))    {    optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	157	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
17	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	183	None	replace
18	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(max));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	183	None	replace
19	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(max,  bound1,  max),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(max,  bound1,  max),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(max,  bound1,  max),  Math.max(max));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	183	None	replace
20	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  max),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  max),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  max),  Math.max(max));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	183	None	replace
21	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    optimaValues,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	178	None	replace
22	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    optimaValues,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	178	None	replace
23	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    optimaValues,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	178	None	replace
24	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	181	None	replace
25	[BUG]  [BUGGY]  optimiser.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optimiser.setOptimize(f,    min,    goalType,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
26	[BUG]  [BUGGY]  optimiser.setOptimize(f,  min,  max,  Math.min(max,  bound1),  Math.max(optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  min,  max,  Math.min(max,  bound1),  Math.max(optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  min,  max,  Math.min(max,  bound1),  Math.max(optima[i]));	  optimiser.setOptimize(f,    min,    goalType,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lastNaN;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  lastNaN;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  lastNaN;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    min;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    min;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
29	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));	  optima[i]    =    optimiser.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	180	None	replace
30	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));	  optima[i]    =    optimiser.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	180	None	replace
31	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));	  optima[i]    =    optimiser.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	180	None	replace
32	[BUG]  [BUGGY]  int  i  =  0;  i  <  count;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  i  <  count;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  i  <  count;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    count;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	141	None	replace
33	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
34	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  currY,  Math.min(bound1,  bound2),  Math.max(max),  optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  currY,  Math.min(bound1,  bound2),  Math.max(max),  optima[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  currY,  Math.min(bound1,  bound2),  Math.max(max),  optima[i]);	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
35	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    optimaValues,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	165	None	replace
36	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    optimaValues,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	165	None	replace
37	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  max,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  max,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  max,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    optimaValues,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	165	None	replace
38	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
39	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
40	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  optima[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  optima[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(min,  optima[i]),  Math.max(max,  optima[i]));	  optimiser.setOptimize(f,    min,    Math.min(max,    optima[i]),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	82	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  maxIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  maxIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0;    i    <    lastNaN;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
42	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.optimize(f,    max,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	117	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(	  for(int    i    =    0;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(    	non-compiled	[CE]  class,  interface,  or  enum  expected	148	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(	  for(int    i    =    0;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(    	non-compiled	[CE]  class,  interface,  or  enum  expected	148	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lastNaN;  ++i)  {  if(Optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  lastNaN;  ++i)  {  if(Optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  lastNaN;  ++i)  {  if(Optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
48	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    min,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
49	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    min,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
50	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  goalType));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  goalType));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  goalType));	  optimisation    =    optimizer.optimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
51	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  goalType));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  goalType));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  goalType));	  optimisation    =    optimizer.optimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
52	[BUG]  [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  goalType));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  goalType));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  goalType));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
53	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  goalType));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  goalType));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  goalType));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
54	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
55	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  optima[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  optima[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(min,  optima[i]),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    min,    Math.min(max,    optima[i]),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
56	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  max,  optima[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  max,  optima[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(min,  max,  optima[i]),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    min,    Math.min(max,    optima[i]),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
57	[BUG]  [BUGGY]  optimiser.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
58	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(max,  optimaValues[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
59	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(optimaValues[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  max;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0,  max  =  optima.length;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0,  max  =  optima.length;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0,  max  =  optima.length;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
62	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  max,  Math.min(max,  bound1),  Math.max(max,  goalType));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  max,  Math.min(max,  bound1),  Math.max(max,  goalType));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  max,  Math.min(max,  bound1),  Math.max(max,  goalType));	  optima[i]    =    optimizer.getOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
63	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  goalType));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  goalType));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  goalType));	  optima[i]    =    optimizer.getOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
64	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  goalType));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  goalType));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  goalType));	  optima[i]    =    optimizer.getOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
65	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max,  goalType));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max,  goalType));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max,  goalType));	  optima[i]    =    optimizer.getOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
66	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  optimaValues,  bound1,  max),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  optimaValues,  bound1,  max),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  optimaValues,  bound1,  max),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    optimaValues,    bound1,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	179	None	replace
67	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  optimaValues,  bound1,  max),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  optimaValues,  bound1,  max),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  optimaValues,  bound1,  max),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    optimaValues,    bound1,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	179	None	replace
68	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    optimaValues,    bound1,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	179	None	replace
69	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(min,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
70	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(min,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	182	None	replace
71	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(min,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	182	None	replace
72	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(min,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	182	None	replace
73	[BUG]  [BUGGY]  optima[i]  =  optimiza.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimiza.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimiza.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    min,    Math.min(max,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	135	None	replace
74	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(lastNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(lastNaN));	  optima[i]    =    optimizer.optimize(f,    min,    Math.min(lastNaN,    max),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
75	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  lastNaN,  max),  Math.max(lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  lastNaN,  max),  Math.max(lastNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  lastNaN,  max),  Math.max(lastNaN));	  optima[i]    =    optimizer.optimize(f,    min,    Math.min(lastNaN,    max),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
76	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1),  Math.max(lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1),  Math.max(lastNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1),  Math.max(lastNaN));	  optima[i]    =    optimizer.optimize(f,    min,    Math.min(lastNaN,    max),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
77	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  currY,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  currY,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  currY,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	79	None	replace
78	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	79	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
82	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  optimaValues[i],  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  optimaValues[i],  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  optimaValues[i],  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	168	None	replace
83	[BUG]  [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	168	None	replace
84	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	168	None	replace
85	[BUG]  [BUGGY]  optimiser.setOptimize(f,  min,  goalType,  Math.min(max,  bound1),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  min,  goalType,  Math.min(max,  bound1),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  min,  goalType,  Math.min(max,  bound1),  Math.max(max));	  optimiser.setOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	replace
86	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(max));	  optimiser.setOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	replace
87	[BUG]  [BUGGY]  optimiser.setOptimize(f,  max,  Math.min(max,  goalType),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  max,  Math.min(max,  goalType),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  max,  Math.min(max,  goalType),  Math.max(max));	  optimiser.setOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	replace
88	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
89	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
90	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
91	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
92	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
93	[BUG]  [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
94	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  max,  Math.min(optima[i],  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  max,  Math.min(optima[i],  bound1),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  max,  Math.min(optima[i],  bound1),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
95	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  max));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  max));	  optimizer.setOptimize(f,    max,    Math.min(max,    optimaValues[i]),    Math.max(max,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
96	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  max));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  max));	  optimizer.setOptimize(f,    max,    Math.min(max,    optimaValues[i]),    Math.max(max,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
97	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(max,  optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(max,  optimaValues[i]));	  optimizer.setOptimize(f,    min,    Math.min(max,    optimaValues[i]),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
98	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(min,  optimaValues[i]),  Math.max(max,  optimaValues[i]));	  optimizer.setOptimize(f,    min,    Math.min(max,    optimaValues[i]),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
99	[BUG]  [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(min,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(min,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  max,  Math.min(min,  optimaValues[i]),  Math.max(max,  optimaValues[i]));	  optimizer.setOptimize(f,    min,    Math.min(max,    optimaValues[i]),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
100	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound1));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	109	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  max;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound1));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	109	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  0,  max  =  optima.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0,  max  =  optima.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0,  max  =  optima.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound1));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	109	None	replace
103	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(max,  bound1),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(max,  bound1),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  goalType,  Math.min(max,  bound1),  Math.max(max));	  optimizer.setOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	106	None	replace
104	[BUG]  [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(max,  goalType),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(max,  goalType),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  max,  Math.min(max,  goalType),  Math.max(max));	  optimizer.setOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	106	None	replace
105	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(max,  optimaValues),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(max,  optimaValues),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  goalType,  Math.min(max,  optimaValues),  Math.max(max));	  optimizer.setOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	106	None	replace
106	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(max));	  optimizer.setOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	106	None	replace
107	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optimiser.setOptimize(f,    max,    Math.min(bound1,    bound2),    Math.max(bound2,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
108	[BUG]  [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
109	[BUG]  [BUGGY]  int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
110	[BUG]  [BUGGY]  optima[i]  =  goalType.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  goalType.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  goalType.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    goalType.optimize(f,    min,    Math.min(max,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
111	[BUG]  [BUGGY]  optima[i]  =  goalType.optimize(f,  min,  bound1,  max,  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  goalType.optimize(f,  min,  bound1,  max,  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  goalType.optimize(f,  min,  bound1,  max,  Math.max(max,  optima[i]));	  optima[i]    =    goalType.optimize(f,    min,    Math.min(max,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
112	[BUG]  [BUGGY]  optima[i]  =  goalType.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  goalType.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  goalType.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    goalType.optimize(f,    min,    Math.min(max,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
113	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  minEvaluations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  minEvaluations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  minEvaluations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
115	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max),  optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max),  optima[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max),  optima[i]);	  optima[i]    =    optimizer.optimize(f,    max,    Math.min(bound1,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
116	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1),  Math.max(max),  optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1),  Math.max(max),  optima[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1),  Math.max(max),  optima[i]);	  optima[i]    =    optimizer.optimize(f,    max,    Math.min(bound1,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
117	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  max),  Math.max(max),  optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  max),  Math.max(max),  optima[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  max),  Math.max(max),  optima[i]);	  optima[i]    =    optimizer.optimize(f,    max,    Math.min(bound1,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
118	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    0;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
119	[BUG]  [BUGGY]  optimiser.setOptimize(f,  min,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  min,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  min,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max));	  optimiser.setOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
120	[BUG]  [BUGGY]  optimiser.setOptimize(f,  max,  Math.min(max,  bound1,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  max,  Math.min(max,  bound1,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  max,  Math.min(max,  bound1,  bound2),  Math.max(max));	  optimiser.setOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
121	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  optimiser[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  optimiser[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  min;  ++i)  {  optimiser[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optimiser[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	130	None	replace
122	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optimiser[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	130	None	replace
123	[BUG]  [BUGGY]  optimiser.setOptimize(f,  min,  max,  Math.min(optima[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  min,  max,  Math.min(optima[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  min,  max,  Math.min(optima[i]),  Math.max(max,  optima[i]));	  optimiser.setOptimize(f,    min,    goalType,    Math.min(max,    optima[i]),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	83	None	replace
124	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  bound1,  optima[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  bound1,  optima[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(min,  bound1,  optima[i]),  Math.max(max,  optima[i]));	  optimiser.setOptimize(f,    min,    goalType,    Math.min(max,    optima[i]),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	83	None	replace
125	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
126	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
127	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(max,  bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(max,  bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  Math.min(max,  bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
128	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound1),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound1),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound1),  Math.max(max));	  optimisation    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
129	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  max),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  max),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  max),  Math.max(max));	  optimisation    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
130	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound2),  Math.max(max));	  optimisation    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
131	[BUG]  [BUGGY]  optimiser.setOptimize(f,  min,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  min,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  min,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optimaValues[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(lastNaN,    optimaValues[i]),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	153	None	replace
132	[BUG]  [BUGGY]  optimisation.setOptimize(f,  min,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation.setOptimize(f,  min,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation.setOptimize(f,  min,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optimaValues[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(lastNaN,    optimaValues[i]),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	153	None	replace
133	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  min,  optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  min,  optima[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  min,  optima[i]);	  optima[i]    =    optimizer.optimize(f,    min,    max,    Math.min(max,    bound1,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
134	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max),  optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max),  optima[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max),  optima[i]);	  optima[i]    =    optimizer.optimize(f,    min,    max,    Math.min(max,    bound1,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
135	[BUG]  [BUGGY]  optimiser.setOptimize(f,  min,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  min,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  min,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optima[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(lastNaN,    optima[i]),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	159	None	replace
136	[BUG]  [BUGGY]  optimiser.setOptimize(f,  min,  Math.min(lastNaN,  optima[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  min,  Math.min(lastNaN,  optima[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  min,  Math.min(lastNaN,  optima[i]),  Math.max(max,  optima[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(lastNaN,    optima[i]),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	159	None	replace
137	[BUG]  [BUGGY]  optimiser.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  goalType));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  goalType));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  goalType));	  optimiser.setOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
138	[BUG]  [BUGGY]  optimiser.setOptimize(f,  max,  Math.min(max,  bound1),  Math.max(max,  goalType));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  max,  Math.min(max,  bound1),  Math.max(max,  goalType));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  max,  Math.min(max,  bound1),  Math.max(max,  goalType));	  optimiser.setOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
139	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max,  optima[i]));	  optimiser.setOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
140	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(bound1,  bound2));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(bound1,  bound2));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	184	None	replace
141	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(min,  bound2),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(min,  bound2),  Math.max(bound1,  bound2));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  max,  Math.min(min,  bound2),  Math.max(bound1,  bound2));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	184	None	replace
142	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(bound1,  bound2));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(bound1,  bound2));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	184	None	replace
143	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optimisation    =    optimizer.optimize(f,    max,    Math.min(bound1,    bound2),    Math.max(bound2,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	144	None	replace
144	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optimisation    =    optimizer.optimize(f,    max,    Math.min(bound1,    bound2),    Math.max(bound2,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	144	None	replace
145	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));	  optima[i]    =    optimizer.optimize(f,    min,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
146	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));	  optima[i]    =    optimizer.optimize(f,    min,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
147	[BUG]  [BUGGY]  optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));	  optima[i]    =    optimizer.optimize(f,    min,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
148	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max));	  optima[i]    =    optimizer.optimize(f,    max,    Math.min(bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
149	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  max),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  max),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  max),  Math.max(max));	  optima[i]    =    optimizer.optimize(f,    max,    Math.min(bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
150	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]);	  optima[i]    =    optimizer.optimize(f,    min,    max,    Math.min(bound1,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
151	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(min,  optimaValues[i]),  Math.max(max,  optimaValues[i]));	  optimiser.setOptimize(f,    min,    Math.min(max,    optimaValues[i]),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
152	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
153	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  max));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
154	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	110	None	replace
155	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	110	None	replace
156	[BUG]  [BUGGY]  optimisation.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(min,    bound1),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
157	[BUG]  [BUGGY]  int  i  =  0;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    0;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
158	[BUG]  [BUGGY]  optimisation  =  optimization.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimization.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimization.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optimisation    =    optimizer.optimize(f,    goalType,    Math.min(min,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
159	[BUG]  [BUGGY]  optimiser  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optimisation    =    optimizer.optimize(f,    goalType,    Math.min(min,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
160	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
161	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
162	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimization.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimization.getOptimization();  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimization.getOptimization();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
163	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1),  Math.max(lastNaN,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1),  Math.max(lastNaN,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1),  Math.max(lastNaN,  max));	  optima[i]    =    optimizer.optimize(f,    min,    max,    Math.min(lastNaN,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
164	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound2),  Math.max(lastNaN,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound2),  Math.max(lastNaN,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound2),  Math.max(lastNaN,  max));	  optima[i]    =    optimizer.optimize(f,    min,    max,    Math.min(lastNaN,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
165	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(lastNaN,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(lastNaN,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(lastNaN,  max));	  optima[i]    =    optimizer.optimize(f,    min,    max,    Math.min(lastNaN,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
166	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max));	  optima[i]    =    optimizer.optimize(f,    min,    max,    Math.min(lastNaN,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
167	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	164	None	replace
168	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  optimiza[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  optimiza[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  min;  ++i)  {  optimiza[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optimiza[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	85	None	replace
169	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  minIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  minIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  minIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,	  for(int    i    =    0;    i    <    maxIterations;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
170	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  minIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  minIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  minIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    0;    i    <    maxIterations;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
171	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(max,  bound1),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(max,  bound1),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  Math.min(max,  bound1),  Math.max(max));	  optima[i]    =    optimizer.optimize(f,    max,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
172	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(max,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(max,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  Math.min(max,  bound2),  Math.max(max));	  optima[i]    =    optimizer.optimize(f,    max,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
173	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  currY,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  currY,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  currY,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
174	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
175	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(max,  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(max,  bound1),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(max,  bound1),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    max,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
176	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    max,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
177	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  maxType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  maxType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  maxType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    max,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
178	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
179	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
180	[BUG]  [BUGGY]  for(int  i  =  0,  max  =  optima.length;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0,  max  =  optima.length;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0,  max  =  optima.length;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
181	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(max,  bound1),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(max,  bound1),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(max,  bound1),  Math.max(max));	  optima[i]    =    optimizer.getOptimize(f,    max,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
182	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(max,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(max,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(max,  bound2),  Math.max(max));	  optima[i]    =    optimizer.getOptimize(f,    max,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
183	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  optimiza[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  optimiza[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  min;  ++i)  {  optimiza[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optimiza[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
184	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(min,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
185	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  min),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  min),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  min),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(min,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
186	[BUG]  [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(min,  goalType),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(min,  goalType),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  max,  Math.min(min,  goalType),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(min,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
187	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
188	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
189	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
190	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
191	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
192	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
193	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
194	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  minIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  minIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  minIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,	  for(int    i    =    0;    i    <    totalIterations;    ++i)    {    if(Double.isNaN(optima[i]))    {    optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
195	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  totalIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  totalIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  totalIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,	  for(int    i    =    0;    i    <    totalIterations;    ++i)    {    if(Double.isNaN(optima[i]))    {    optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
196	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optima[i]    =    optimizer.optimize(f,    min,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	87	None	replace
197	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  min));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  min));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  min));	  optima[i]    =    optimizer.optimize(f,    min,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	87	None	replace
198	[BUG]  [BUGGY]  optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optima[i]    =    optimizer.optimize(f,    min,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	87	None	replace
199	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound1),  Math.max(lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound1),  Math.max(lastNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound1),  Math.max(lastNaN));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	187	None	replace
200	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound2),  Math.max(lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound2),  Math.max(lastNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound2),  Math.max(lastNaN));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	187	None	replace
201	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  max),  Math.max(lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  max),  Math.max(lastNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  max),  Math.max(lastNaN));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	187	None	replace
202	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  optimaValues),  Math.max(lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  optimaValues),  Math.max(lastNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  optimaValues),  Math.max(lastNaN));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	187	None	replace
203	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  max,  Math.min(max,  bound1),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  max,  Math.min(max,  bound1),  Math.max(max,  optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  max,  Math.min(max,  bound1),  Math.max(max,  optimaValues[i]));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(max,    bound1),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
204	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(max,    bound1),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
205	[BUG]  [BUGGY]  optimizer.setOptimize(f,  max,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  max,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  max,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(max,    bound1),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
206	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound1,  max),  Math.max(lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound1,  max),  Math.max(lastNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound1,  max),  Math.max(lastNaN));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1,    max),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	188	None	replace
207	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  bound1,  max),  Math.max(lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  bound1,  max),  Math.max(lastNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  bound1,  max),  Math.max(lastNaN));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1,    max),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	188	None	replace
208	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1,  max),  Math.max(lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1,  max),  Math.max(lastNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1,  max),  Math.max(lastNaN));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1,    max),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	188	None	replace
209	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  minEvaluations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  minEvaluations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  minEvaluations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
210	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
211	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  bound1,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
212	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  bound1,  optimizedaValues),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  bound1,  optimizedaValues),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  bound1,  optimizedaValues),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
213	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
214	[BUG]  [BUGGY]  optimiser.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
215	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(optima[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
216	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(optima[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
217	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max,  optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max,  optimaValues[i]));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
218	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  max,  Math.min(optimaValues[i],  bound1),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  max,  Math.min(optimaValues[i],  bound1),  Math.max(max,  optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  max,  Math.min(optimaValues[i],  bound1),  Math.max(max,  optimaValues[i]));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
219	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  max,  Math.min(optima[i],  bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  max,  Math.min(optima[i],  bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  max,  Math.min(optima[i],  bound1,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    max,    Math.min(bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	121	None	replace
220	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(min,  max),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(min,  max),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  max,  Math.min(min,  max),  Math.max(max));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    max),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	134	None	replace
221	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(max));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    max),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	134	None	replace
222	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max),  max);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max),  max);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max),  max);	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    max),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	134	None	replace
223	[BUG]  [BUGGY]  optimiser.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optimiser.setOptimize(f,    min,    goalType,    Math.min(max,    bound1),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
224	[BUG]  [BUGGY]  optimiser.setOptimize(f,  min,  max,  Math.min(max,  bound1),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  min,  max,  Math.min(max,  bound1),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  min,  max,  Math.min(max,  bound1),  Math.max(max,  optimaValues[i]));	  optimiser.setOptimize(f,    min,    goalType,    Math.min(max,    bound1),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
225	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(lastNaN,  bound1),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(lastNaN,  bound1),  Math.max(max,  optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  goalType,  Math.min(lastNaN,  bound1),  Math.max(max,  optimaValues[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(lastNaN,    bound1),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
226	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(lastNaN,  max),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(lastNaN,  max),  Math.max(max,  optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  goalType,  Math.min(lastNaN,  max),  Math.max(max,  optimaValues[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(lastNaN,    bound1),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
227	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  Math.min(lastNaN,  max),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  Math.min(lastNaN,  max),  Math.max(max,  optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  Math.min(lastNaN,  max),  Math.max(max,  optimaValues[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(lastNaN,    bound1),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
228	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
229	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,	  for(int    i    =    0;    i    <    min;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
230	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
231	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
232	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  totalIterations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  totalIterations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  totalIterations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(	  for(int    i    =    0;    i    <    totalIterations;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(    	non-compiled	[CE]  class,  interface,  or  enum  expected	147	None	replace
233	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  totalEvaluations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  totalEvaluations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  totalEvaluations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(	  for(int    i    =    0;    i    <    totalIterations;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(    	non-compiled	[CE]  class,  interface,  or  enum  expected	147	None	replace
234	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max));	  optimisation    =    optimizer.optimize(f,    max,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	145	None	replace
235	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  min,  Math.min(max,  bound1),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  min,  Math.min(max,  bound1),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  min,  Math.min(max,  bound1),  Math.max(max));	  optimisation    =    optimizer.optimize(f,    max,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	145	None	replace
236	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  min,  Math.min(max,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  min,  Math.min(max,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  min,  Math.min(max,  bound2),  Math.max(max));	  optimisation    =    optimizer.optimize(f,    max,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	145	None	replace
237	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  max));	  optimizer.setOptimize(f,    max,    Math.min(max,    bound1),    Math.max(max,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
238	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  max));	  optimizer.setOptimize(f,    max,    Math.min(max,    bound1),    Math.max(max,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
239	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  max));	  optimizer.setOptimize(f,    max,    Math.min(max,    bound1),    Math.max(max,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
240	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  max),  Math.max(max,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  max),  Math.max(max,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  max),  Math.max(max,  max));	  optimizer.setOptimize(f,    max,    Math.min(max,    bound1),    Math.max(max,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
241	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
242	[BUG]  [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
243	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(optima[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
244	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1,  optima[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1,  optima[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1,  optima[i]),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
245	[BUG]  [BUGGY]  optimiser.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));	  optimiser.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
246	[BUG]  [BUGGY]  optimiser.setOptimize(f,  max,  Math.min(max,  bound1),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  max,  Math.min(max,  bound1),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  max,  Math.min(max,  bound1),  Math.max(max));	  optimiser.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
247	[BUG]  [BUGGY]  optimiser.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  goalType));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  goalType));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  goalType));	  optimiser.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
248	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  Math.min(lastNaN,  optima[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  Math.min(lastNaN,  optima[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  Math.min(lastNaN,  optima[i]),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(lastNaN,    optima[i]),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	155	None	replace
249	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(lastNaN,    optima[i]),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	155	None	replace
250	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(lastNaN,  optima[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(lastNaN,  optima[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  goalType,  Math.min(lastNaN,  optima[i]),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(lastNaN,    optima[i]),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	155	None	replace
251	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima));	  optimizer.setOptimize(f,    max,    Math.min(bound1,    bound2),    Math.max(bound2,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
252	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(min,    bound1,    max),    Math.max(optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
253	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(min,    bound1,    max),    Math.max(optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
254	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  bound1,  max),  Math.max(optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  bound1,  max),  Math.max(optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  bound1,  max),  Math.max(optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(min,    bound1,    max),    Math.max(optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
255	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  max,  Math.min(min,  goalType),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  max,  Math.min(min,  goalType),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  max,  Math.min(min,  goalType),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(min,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
256	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  max,  Math.min(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  max,  Math.min(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  max,  Math.min(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(min,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
257	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lastNaN;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  lastNaN;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  lastNaN;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
258	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  bound1,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  bound1,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  bound1,  bound2),  Math.max(max));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
259	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1,  bound2),  Math.max(max),  optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1,  bound2),  Math.max(max),  optima[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1,  bound2),  Math.max(max),  optima[i]);	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
260	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	replace
261	[BUG]  [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	replace
262	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(optimaValues[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	replace
263	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lastNaN;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  lastNaN;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  lastNaN;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
264	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  max),  Math.max(optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  max),  Math.max(optima[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  max),  Math.max(optima[i]);	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound1,    max),    Math.max(optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	175	None	replace
265	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(optima[0]);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(optima[0]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(optima[0]);	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound1,    max),    Math.max(optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	175	None	replace
266	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(min,  bound1,  max),  Math.max(optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(min,  bound1,  max),  Math.max(optima[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  max,  Math.min(min,  bound1,  max),  Math.max(optima[i]);	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound1,    max),    Math.max(optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	175	None	replace
267	[BUG]  [BUGGY]  optima[i]  =  optimiza.optimize(f,  min,  Math.min(max,  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimiza.optimize(f,  min,  Math.min(max,  bound1),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimiza.optimize(f,  min,  Math.min(max,  bound1),  Math.max(max,  optima[i]));	  optima[i]    =    optimiser.optimize(f,    min,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	93	None	replace
268	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max));	  optimizer.setOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	170	None	replace
269	[BUG]  [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(max,  bound1,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(max,  bound1,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  max,  Math.min(max,  bound1,  bound2),  Math.max(max));	  optimizer.setOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	170	None	replace
270	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  optimaValues,  Math.min(max,  bound1,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  optimaValues,  Math.min(max,  bound1,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  optimaValues,  Math.min(max,  bound1,  bound2),  Math.max(max));	  optimizer.setOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	170	None	replace
271	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
272	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
273	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
274	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
275	[BUG]  [BUGGY]  for(int  i  =  0,  lastNaN  =  optima.length;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0,  lastNaN  =  optima.length;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0,  lastNaN  =  optima.length;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0,    max    =    optima.length;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
276	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0,  len  =  optima.length;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0,  len  =  optima.length;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0,    max    =    optima.length;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
277	[BUG]  [BUGGY]  for(int  i  =  0,  max  =  min.length;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0,  max  =  min.length;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0,  max  =  min.length;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0,    max    =    optima.length;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
278	[BUG]  [BUGGY]  for(int  i  =  0,  max  =  min;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0,  max  =  min;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0,  max  =  min;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0,    max    =    optima.length;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
279	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lastNaN;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  lastNaN;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  lastNaN;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    limit;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	105	None	replace
280	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  limit;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    limit;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	105	None	replace
281	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lastNaN;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  lastNaN;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  lastNaN;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    0;    i    <    count;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	172	None	replace
282	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound1),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound1),  Math.max(max,  optima[i]));	  optimisation    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	152	None	replace
283	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optimisation    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	152	None	replace
284	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  min,  Math.min(max,  optima[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  min,  Math.min(max,  optima[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  min,  Math.min(max,  optima[i]),  Math.max(max,  optima[i]));	  optimisation    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	152	None	replace
285	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  optima[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  optima[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  optima[i]),  Math.max(max,  optima[i]));	  optimisation    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	152	None	replace
286	[BUG]  [BUGGY]  optimizer.setOptimize(f,  max,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  max,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  max,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
287	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  max,  Math.min(max,  bound1),  Math.max(optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  max,  Math.min(max,  bound1),  Math.max(optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  max,  Math.min(max,  bound1),  Math.max(optima[i]));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
288	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  For(int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	For(int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  For(int    i    =    0;    i    <    max;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	84	None	replace
289	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(lastNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(lastNaN));	  optima[i]    =    optimizer.optimize(f,    max,    Math.min(bound1,    bound2),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	137	None	replace
290	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1,  bound2),  Math.max(max));	  optima[i]    =    optimizer.optimize(f,    max,    Math.min(bound1,    bound2),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	137	None	replace
291	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(lastNaN,  bound1),  Math.max(lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(lastNaN,  bound1),  Math.max(lastNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  Math.min(lastNaN,  bound1),  Math.max(lastNaN));	  optima[i]    =    optimizer.optimize(f,    max,    Math.min(bound1,    bound2),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	137	None	replace
292	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  j;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  j;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  j;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    0;    i    <    count;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	replace
293	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optima[i]    =    optimizer.getOptimize(f,    max,    Math.min(bound1,    bound2),    Math.max(bound2,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	replace
294	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max    	non-compiled	[CE]  class,  interface,  or  enum  expected	143	None	replace
295	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max    	non-compiled	[CE]  class,  interface,  or  enum  expected	143	None	replace
296	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max    	non-compiled	[CE]  class,  interface,  or  enum  expected	143	None	replace
297	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max    	non-compiled	[CE]  class,  interface,  or  enum  expected	143	None	replace
298	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lastNaN;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  lastNaN;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  lastNaN;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    min;    ++i)    {    optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
299	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    min;    ++i)    {    optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
300	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  limit;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    limit;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
301	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  max),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  max),  Math.max(bound1,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  max),  Math.max(bound1,  max));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound1),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	185	None	replace
302	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(min,  bound1),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(min,  bound1),  Math.max(bound1,  bound2));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  max,  Math.min(min,  bound1),  Math.max(bound1,  bound2));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound1),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	185	None	replace
303	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(bound1,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(bound1,  max));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound1),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	185	None	replace
304	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  max));	  optimisation    =    optimizer.optimize(f,    max,    Math.min(max,    bound1),    Math.max(max,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
305	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  max));	  optimisation    =    optimizer.optimize(f,    max,    Math.min(max,    bound1),    Math.max(max,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
306	[BUG]  [BUGGY]  optimisation  =  optimization.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimization.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimization.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  max));	  optimisation    =    optimizer.optimize(f,    max,    Math.min(max,    bound1),    Math.max(max,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
307	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optimaValues[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(lastNaN,    optimaValues[i]),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	167	None	replace
308	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optimaValues[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(lastNaN,    optimaValues[i]),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	167	None	replace
309	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  optimiser[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  optimiser[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  min;  ++i)  {  optimiser[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optimiser[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	108	None	replace
310	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optimiser[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	108	None	replace
311	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	139	None	replace
312	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
313	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(lastNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(lastNaN));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	136	None	replace
314	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(lastNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(lastNaN));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	136	None	replace
315	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
316	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
317	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
318	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  Math.min(lastNaN,  goalType));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  Math.min(lastNaN,  goalType));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  Math.min(lastNaN,  goalType));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(lastNaN,    max),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
319	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(lastNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(lastNaN));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(lastNaN,    max),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
320	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  goalType,  Math.min(lastNaN,  min));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  goalType,  Math.min(lastNaN,  min));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  max,  goalType,  Math.min(lastNaN,  min));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(lastNaN,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
321	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  Math.min(lastNaN,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  Math.min(lastNaN,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  Math.min(lastNaN,  max));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(lastNaN,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
322	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(lastNaN,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(lastNaN,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(lastNaN,  max));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(lastNaN,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
323	[BUG]  [BUGGY]  int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    count;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	166	None	replace
324	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(lastNaN,    optimaValues[i]),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	156	None	replace
325	[BUG]  [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  max,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(lastNaN,    optimaValues[i]),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	156	None	replace
326	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
327	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(minimum,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(minimum,  optima[i]);  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(minimum,  optima[i]);  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
328	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimiza[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimiza[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimiza[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
329	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	replace
330	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  max),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  max),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  max),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	replace
331	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(max,  bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(max,  bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  Math.min(max,  bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	replace
332	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  minIterations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  minIterations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  minIterations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(	  for(int    i    =    0;    i    <    maxIterations;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(    	non-compiled	[CE]  class,  interface,  or  enum  expected	149	None	replace
333	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  maxIterations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  maxIterations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  maxIterations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(	  for(int    i    =    0;    i    <    maxIterations;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(    	non-compiled	[CE]  class,  interface,  or  enum  expected	149	None	replace
334	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  minIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  minIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  minIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(	  for(int    i    =    0;    i    <    maxIterations;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(    	non-compiled	[CE]  class,  interface,  or  enum  expected	149	None	replace
335	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  max),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  max),  Math.max(bound2,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  max),  Math.max(bound2,  max));	  optima[i]    =    goalType.optimize(f,    min,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
336	[BUG]  [BUGGY]  optima[i]  =  goalType.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  goalType.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  goalType.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optima[i]    =    goalType.optimize(f,    min,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
337	[BUG]  [BUGGY]  optima[i]  =  goalType.optimize(f,  min,  Math.min(bound1,  max),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  goalType.optimize(f,  min,  Math.min(bound1,  max),  Math.max(bound2,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  goalType.optimize(f,  min,  Math.min(bound1,  max),  Math.max(bound2,  max));	  optima[i]    =    goalType.optimize(f,    min,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
338	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  i));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  i));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  i));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    i));    	non-compiled	[CE]  class,  interface,  or  enum  expected	176	None	replace
339	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  i));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  i));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  i));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    i));    	non-compiled	[CE]  class,  interface,  or  enum  expected	176	None	replace
340	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  i));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  i));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  i));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    i));    	non-compiled	[CE]  class,  interface,  or  enum  expected	176	None	replace
341	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  For(int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	For(int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  For(int    i    =    0;    i    <    max;    ++i)    {    optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
342	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(optimaValues[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	122	None	replace
343	[BUG]  [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(optimaValues[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	122	None	replace
344	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(optimaValues[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	122	None	replace
345	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  final));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  final));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  final));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    final));    	non-compiled	[CE]  class,  interface,  or  enum  expected	177	None	replace
346	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  final));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  final));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  final));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    final));    	non-compiled	[CE]  class,  interface,  or  enum  expected	177	None	replace
347	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  final));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  final));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  final));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    final));    	non-compiled	[CE]  class,  interface,  or  enum  expected	177	None	replace
348	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
349	[BUG]  [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(max,  bound1),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(max,  bound1),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  max,  Math.min(max,  bound1),  Math.max(max));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
350	[BUG]  [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  goalType));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  goalType));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  goalType));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
351	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(optima[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
352	[BUG]  [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(optima[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
353	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(min,  max),  Math.max(optima[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
354	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optima[i]),  Math.max(optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optima[i]),  Math.max(optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  optima[i]),  Math.max(optima[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
355	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(max,  bound1),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(max,  bound1),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(max,  bound1),  Math.max(max));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
356	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(max,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(max,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(max,  bound2),  Math.max(max));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
357	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(max,  max),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(max,  max),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(max,  max),  Math.max(max));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
358	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimiser.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimiser.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimiser.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optima[i]    =    optimiser.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	162	None	replace
359	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimisation.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimisation.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimisation.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optima[i]    =    optimiser.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	162	None	replace
360	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  optima[i]  =  optimiser.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  optima[i]  =  optimiser.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  max;  ++i)  {  optima[i]  =  optimiser.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optima[i]    =    optimiser.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	162	None	replace
361	[BUG]  [BUGGY]  for(int  i  =  0,  lastNaN  =  optima.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0,  lastNaN  =  optima.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0,  lastNaN  =  optima.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0,    max    =    optima.length;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
362	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0,  len  =  optima.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0,  len  =  optima.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0,    max    =    optima.length;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
363	[BUG]  [BUGGY]  for(int  i  =  0,  max  =  min.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0,  max  =  min.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0,  max  =  min.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0,    max    =    optima.length;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
364	[BUG]  [BUGGY]  for(int  i  =  0,  max  =  optima.length  -  1;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0,  max  =  optima.length  -  1;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0,  max  =  optima.length  -  1;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0,    max    =    optima.length;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
365	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(lastNaN,  goalType));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(lastNaN,  goalType));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  Math.min(lastNaN,  goalType));	  optima[i]    =    optimizer.optimize(f,    max,    Math.min(lastNaN,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
366	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(lastNaN,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(lastNaN,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  Math.min(lastNaN,  max));	  optima[i]    =    optimizer.optimize(f,    max,    Math.min(lastNaN,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
367	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  max,  Math.min(optima[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  max,  Math.min(optima[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  max,  Math.min(optima[i]),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(max,    optima[i]),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
368	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  max,  Math.min(max,  optima[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  max,  Math.min(max,  optima[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  max,  Math.min(max,  optima[i]),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(max,    optima[i]),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
369	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  max,  Math.min(optima[i],  goalType),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  max,  Math.min(optima[i],  goalType),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  max,  Math.min(optima[i],  goalType),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(max,    optima[i]),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
370	[BUG]  [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Double.isNaN(optima[i]))    {    optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
371	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(max,  bound1),  Math.max(max),  optimaValues[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(max,  bound1),  Math.max(max),  optimaValues[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  goalType,  Math.min(max,  bound1),  Math.max(max),  optimaValues[i]);	  optimizer.setOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max),    optimaValues[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	107	None	replace
372	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(max,  bound2),  Math.max(max),  optimaValues[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(max,  bound2),  Math.max(max),  optimaValues[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  goalType,  Math.min(max,  bound2),  Math.max(max),  optimaValues[i]);	  optimizer.setOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max),    optimaValues[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	107	None	replace
373	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(max,  max),  Math.max(max),  optimaValues[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(max,  max),  Math.max(max),  optimaValues[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  goalType,  Math.min(max,  max),  Math.max(max),  optimaValues[i]);	  optimizer.setOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max),    optimaValues[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	107	None	replace
374	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  optimaValues[i],  Math.min(max,  bound1),  Math.max(max),  goalType);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  optimaValues[i],  Math.min(max,  bound1),  Math.max(max),  goalType);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  optimaValues[i],  Math.min(max,  bound1),  Math.max(max),  goalType);	  optimizer.setOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max),    optimaValues[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	107	None	replace
375	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  goalType));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  goalType));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  goalType));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
376	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1),  Math.max(max,  goalType));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1),  Math.max(max,  goalType));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1),  Math.max(max,  goalType));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
377	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  goalType));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  goalType));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  goalType));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
378	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  bound1),  Math.max(max,  goalType));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  bound1),  Math.max(max,  goalType));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(max,  bound1),  Math.max(max,  goalType));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
379	[BUG]  [BUGGY]  int  i  =  0;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	138	None	replace
380	[BUG]  [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
381	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
382	[BUG]  [BUGGY]  int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
383	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  max),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  max),  Math.max(bound1,  bound2));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  max),  Math.max(bound1,  bound2));	  optima[i]    =    goalType.optimize(f,    min,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	88	None	replace
384	[BUG]  [BUGGY]  optima[i]  =  goalType.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  goalType.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  goalType.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));	  optima[i]    =    goalType.optimize(f,    min,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	88	None	replace
385	[BUG]  [BUGGY]  optima[i]  =  goalType.optimize(f,  min,  Math.min(bound1,  max),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  goalType.optimize(f,  min,  Math.min(bound1,  max),  Math.max(bound1,  bound2));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  goalType.optimize(f,  min,  Math.min(bound1,  max),  Math.max(bound1,  bound2));	  optima[i]    =    goalType.optimize(f,    min,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	88	None	replace
386	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(bound1,  max));	  optima[i]    =    goalType.optimize(f,    min,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	88	None	replace
387	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optima[i]    =    optimiser.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	131	None	replace
388	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimisation.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimisation.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimisation.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optima[i]    =    optimiser.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	131	None	replace
389	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  max;  ++i)  {  optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optima[i]    =    optimiser.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	131	None	replace
390	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(min,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(min,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(min,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optima[i]    =    optimiser.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	131	None	replace
391	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    limit;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
392	[BUG]  [BUGGY]  int  i  =  0;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound3));  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound3));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound3));  }	  int    i    =    0;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	186	None	replace
393	[BUG]  [BUGGY]  int  i  =  0;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }	  int    i    =    0;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	186	None	replace
394	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max),  optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max),  optima[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max),  optima[i]);	  optima[i]    =    optimizer.optimize(f,    max,    Math.min(bound1,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
395	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    min,    Math.min(max,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	135	None	replace
396	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimizeda[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimizeda[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimizeda[i]));	  optima[i]    =    optimizer.optimize(f,    min,    Math.min(max,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	135	None	replace
397	[BUG]  [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
398	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
399	[BUG]  [BUGGY]  optimiser  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optimisation    =    optimizer.optimize(f,    max,    Math.min(bound1,    bound2),    Math.max(bound2,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	144	None	replace
400	[BUG]  [BUGGY]  optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optimisation    =    optimizer.optimize(f,    max,    Math.min(bound1,    bound2),    Math.max(bound2,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	144	None	replace
401	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(optimaValues[i],  max));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(optimaValues[i],  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(optimaValues[i],  max));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
402	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(optimaValues[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	replace
403	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(bound1,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(bound1,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(bound1,  optimaValues[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	replace
404	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  max));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound1),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	185	None	replace
405	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound1),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	185	None	replace
406	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  bound1,  max),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  bound1,  max),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  bound1,  max),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
407	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  optimaValues,  Math.min(max,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  optimaValues,  Math.min(max,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  optimaValues,  Math.min(max,  bound2),  Math.max(max));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
408	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  optimaValues,  Math.min(max,  bound2),  Math.max(max),  optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  optimaValues,  Math.min(max,  bound2),  Math.max(max),  optima[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  optimaValues,  Math.min(max,  bound2),  Math.max(max),  optima[i]);	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
409	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  optimaValues,  Math.min(max,  bound1),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  optimaValues,  Math.min(max,  bound1),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  optimaValues,  Math.min(max,  bound1),  Math.max(max));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
410	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  optimaValues,  Math.min(max,  bound1),  Math.max(max),  optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  optimaValues,  Math.min(max,  bound1),  Math.max(max),  optima[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  optimaValues,  Math.min(max,  bound1),  Math.max(max),  optima[i]);	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
411	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    0;    i    <    totalIterations;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	173	None	replace
412	[BUG]  [BUGGY]  for(int  i  =  0,  max  =  optimaValues.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0,  max  =  optimaValues.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0,  max  =  optimaValues.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0,    max    =    optima.length;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
413	[BUG]  [BUGGY]  for(int  i  =  0,  j  =  optima.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0,  j  =  optima.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0,  j  =  optima.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0,    max    =    optima.length;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
414	[BUG]  [BUGGY]  int  i  =  0,  max  =  optima.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0,  max  =  optima.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0,  max  =  optima.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0,    max    =    optima.length;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
415	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(bound1,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(bound1,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(bound1,  optimaValues[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(lastNaN,    optimaValues[i]),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	156	None	replace
416	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  max,  Math.min(max,  bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.optimize(f,    max,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	117	None	replace
417	[BUG]  [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  max));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
418	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  minIterations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  minIterations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  minIterations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max	  for(int    i    =    0;    i    <    maxIterations;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(    	non-compiled	[CE]  class,  interface,  or  enum  expected	149	None	replace
419	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));	  optimisation    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
420	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max));	  optimisation    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
421	[BUG]  [BUGGY]  optima[0]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[0]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[0]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));	  optima[i]    =    optimizer.optimize(f,    min,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
422	[BUG]  [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisationa[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));	  optima[i]    =    optimizer.optimize(f,    min,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
423	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  currY,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  currY,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  currY,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optima[i]    =    optimizer.getOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
424	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
425	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
426	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound1),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound1),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(min,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
427	[BUG]  [BUGGY]  optimisation.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optimiser.setOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
428	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(endNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(endNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(endNaN));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(lastNaN,    max),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
429	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  bound1));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  bound1));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  bound1));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    i));    	non-compiled	[CE]  class,  interface,  or  enum  expected	176	None	replace
430	[BUG]  [BUGGY]  optima[0]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[0]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[0]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optima[i]    =    optimizer.optimize(f,    max,    Math.min(bound1,    bound2),    Math.max(bound2,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	132	None	replace
431	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max),  optimaValues[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max),  optimaValues[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max),  optimaValues[i]);	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    max),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	134	None	replace
432	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  max),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  max),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  max),  Math.max(max));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    max),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	134	None	replace
433	[BUG]  [BUGGY]  Integer  i  =  0;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  Integer  i  =  0;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	Integer  i  =  0;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  int    i    =    0;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	186	None	replace
434	[BUG]  [BUGGY]  int  i  =  1;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  1;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  1;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  int    i    =    0;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	186	None	replace
435	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  targetType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(min,    bound1,    max),    Math.max(optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
436	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(min,    bound1,    max),    Math.max(optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
437	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  Math.min(bound2,  bound2),  Math.max(max),  optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  Math.min(bound2,  bound2),  Math.max(max),  optima[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  Math.min(bound2,  bound2),  Math.max(max),  optima[i]);	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
438	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  Math.min(bound2,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  Math.min(bound2,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  Math.min(bound2,  bound2),  Math.max(max));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
439	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(optimaValues[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
440	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max	  for(int    i    =    0;    i    <    totalIterations;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(    	non-compiled	[CE]  class,  interface,  or  enum  expected	147	None	replace
441	[BUG]  [BUGGY]  optima[i]  =  goalType.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  goalType.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  goalType.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(bound1,  max));	  optima[i]    =    goalType.optimize(f,    min,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
442	[BUG]  [BUGGY]  optima[i]  =  optimiser.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimiser.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimiser.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(bound1,  max));	  optima[i]    =    goalType.optimize(f,    min,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
443	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optimizer.isNaN(optima[i]))  {  optimizer[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optimizer.isNaN(optima[i]))  {  optimizer[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Optimizer.isNaN(optima[i]))  {  optimizer[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,	  for(int    i    =    0;    i    <    max;    ++i)    {    optimiser[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	130	None	replace
444	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optimizer.isNaN(optima[i]))  {  optimiser[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optimizer.isNaN(optima[i]))  {  optimiser[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Optimizer.isNaN(optima[i]))  {  optimiser[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,	  for(int    i    =    0;    i    <    max;    ++i)    {    optimiser[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	130	None	replace
445	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  optimaValues[i]));	  optimizer.setOptimize(f,    max,    Math.min(max,    optimaValues[i]),    Math.max(max,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
446	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i])-  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i])-  Math.max(max,  optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i])-  Math.max(max,  optimaValues[i]));	  optimizer.setOptimize(f,    max,    Math.min(max,    optimaValues[i]),    Math.max(max,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
447	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  currY,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  currY,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  currY,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
448	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    optimaValues,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	165	None	replace
449	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    optimaValues,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	165	None	replace
450	[BUG]  [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    min;    ++i)    {    optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
451	[BUG]  [BUGGY]  int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    min;    ++i)    {    optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
452	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max),  optimaValues[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max),  optimaValues[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max),  optimaValues[i]);	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	183	None	replace
453	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound2),  Math.max(max),  optimaValues[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound2),  Math.max(max),  optimaValues[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound2),  Math.max(max),  optimaValues[i]);	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	183	None	replace
454	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(optima[i],  max));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(optima[i],  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(optima[i],  max));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
455	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  limit;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optima[i]    =    optimiser.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	131	None	replace
456	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
457	[BUG]  [BUGGY]  optimisation.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(min,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	160	None	replace
458	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(bound1,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(bound1,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(bound1,  optimaValues[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
459	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound	  for(int    i    =    0;    i    <    totalIterations;    ++i)    {    if(Double.isNaN(optima[i]))    {    optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
460	[BUG]  [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisationa[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optima[i]    =    optimizer.optimize(f,    min,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	87	None	replace
461	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  count;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
462	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  optimaValues[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
463	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  max,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  max,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  max,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    min,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
464	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  bound1,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    min,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
465	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  bound1,  max,  optimaValues,  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  bound1,  max,  optimaValues,  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  bound1,  max,  optimaValues,  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    min,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
466	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));	  optimisation    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	151	None	replace
467	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));	  optimisation    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	151	None	replace
468	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(Optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(Optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  limit;  ++i)  {  if(Optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
469	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(bound2,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(bound2,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(bound2,  optima[i]));	  optima[i]    =    goalType.optimize(f,    min,    Math.min(max,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
470	[BUG]  [BUGGY]  optima[i]  =  goalType.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(bound2,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  goalType.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(bound2,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  goalType.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(bound2,  optima[i]));	  optima[i]    =    goalType.optimize(f,    min,    Math.min(max,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
471	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));	  optima[i]    =    goalType.optimize(f,    min,    Math.min(max,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
472	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimiza[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimiza[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimiza[i]));	  optima[i]    =    optimizer.optimize(f,    min,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
473	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  optimaValues,  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  optimaValues,  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  optimaValues,  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
474	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  bound1,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
475	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  optimaValues,  Math.min(max,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  optimaValues,  Math.min(max,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  optimaValues,  Math.min(max,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
476	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues,  bound2),  Math.max(max));	  optimizer.setOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	170	None	replace
477	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max),  optimaValues[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max),  optimaValues[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max),  optimaValues[i]);	  optimizer.setOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	170	None	replace
478	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues,  bound1),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues,  bound1),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues,  bound1),  Math.max(max));	  optimizer.setOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	170	None	replace
479	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }	  for(int    i    =    0;    i    <    limit;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
480	[BUG]  [BUGGY]  optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));	  optima[i]    =    optimiser.optimize(f,    min,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	93	None	replace
481	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(optimaValues[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
482	[BUG]  [BUGGY]  optimisation.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(optimaValues[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
483	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(bound1,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(bound1,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(bound1,  optimaValues[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
484	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  max,  Math.min(max,  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  max,  Math.min(max,  bound1),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  max,  Math.min(max,  bound1),  Math.max(max,  optima[i]));	  optimisation    =    optimizer.optimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
485	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(lastNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(lastNaN));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1,    max),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	188	None	replace
486	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(lastNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(lastNaN));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1,    max),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	188	None	replace
487	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  currY,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  currY,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  currY,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
488	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
489	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound3));  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound3));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  limit;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound3));  }	  for(int    i    =    0;    i    <    limit;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	140	None	replace
490	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound3));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound3));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound3));  }	  For(int    i    =    0;    i    <    max;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	84	None	replace
491	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  limit;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound1));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	109	None	replace
492	[BUG]  [BUGGY]  optimisation.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));	  optimiser.setOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	replace
493	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  optimaValues[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(min,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	171	None	replace
494	[BUG]  [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisationa[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
495	[BUG]  [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Double.isNaN(optima[i]))    {    optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	157	None	replace
496	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  max,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  max,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(min,  max,  optimaValues[i]),  Math.max(max,  optimaValues[i]));	  optimizer.setOptimize(f,    min,    Math.min(max,    optimaValues[i]),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
497	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max),  optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max),  optima[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max),  optima[i]);	  optima[i]    =    optimizer.optimize(f,    min,    max,    Math.min(bound1,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
498	[BUG]  [BUGGY]  optimiser  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));	  optimisation    =    optimizer.optimize(f,    max,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	145	None	replace
499	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(lastNaN,  bound1,  max),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(lastNaN,  bound1,  max),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(lastNaN,  bound1,  max),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	replace
500	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  optimaValues,  bound1,  max),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  max,  optimaValues,  bound1,  max),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  max,  optimaValues,  bound1,  max),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    optimaValues,    bound1,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	179	None	replace
501	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  optima[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(min,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	169	None	replace
502	[BUG]  [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    min;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
503	[BUG]  [BUGGY]  int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  i  <  min;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    min;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
504	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
505	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound	  for(int    i    =    0;    i    <    totalIterations;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	174	None	replace
506	[BUG]  [BUGGY]  optimisationa[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisationa[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisationa[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(min,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
507	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(bound1,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(bound1,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(bound1,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	158	None	replace
508	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  Math.min(bound2,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  Math.min(bound2,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  min,  bound1,  max,  Math.min(bound2,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
509	[BUG]  [BUGGY]  optima[0]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[0]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[0]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optima[i]    =    optimizer.getOptimize(f,    max,    Math.min(bound1,    bound2),    Math.max(bound2,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	replace
510	[BUG]  [BUGGY]  optimisationa[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisationa[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisationa[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optima[i]    =    optimizer.getOptimize(f,    max,    Math.min(bound1,    bound2),    Math.max(bound2,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	replace
511	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i],  max));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i],  max));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i],  max));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	168	None	replace
512	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(min,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
513	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optimizer[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optimizer[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optimizer[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,	  for(int    i    =    0;    i    <    max;    ++i)    {    optimiser[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	108	None	replace
514	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(min,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	182	None	replace
515	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optimisation    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	152	None	replace
516	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max);	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound1,    max),    Math.max(optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	175	None	replace
517	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optimaValues));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optimaValues));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optimaValues));	  optimizer.setOptimize(f,    max,    Math.min(max,    bound1),    Math.max(max,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
518	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  min,  goalType,  Math.min(bound1,  bound2),  Math.max(optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	164	None	replace
519	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(max),  optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(max),  optima[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(max),  optima[i]);	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	115	None	replace
520	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optima[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optima[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  optima[i]),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(max,    optima[i]),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
521	[BUG]  [BUGGY]  Optimizer  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  Optimizer  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	Optimizer  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optimizer.setOptimize(f,    max,    Math.min(bound1,    bound2),    Math.max(bound2,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
522	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  maxIterations));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  maxIterations));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  maxIterations));	  optima[i]    =    optimizer.optimize(f,    min,    max,    Math.min(lastNaN,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
523	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  maxEvaluations;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  For(int  i  =  0;  i  <  maxEvaluations;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	For(int  i  =  0;  i  <  maxEvaluations;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  For(int    i    =    0;    i    <    max;    ++i)    {    optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
524	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max),  optimaValues[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max),  optimaValues[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max),  optimaValues[i]);	  optimiser.setOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
525	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  bound2),  Math.max(max),  optimaValues[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  bound2),  Math.max(max),  optimaValues[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(min,  bound2),  Math.max(max),  optimaValues[i]);	  optimiser.setOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
526	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(max,  optimaValues,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(max,  optimaValues,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(max,  optimaValues,  bound2),  Math.max(max));	  optimiser.setOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
527	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(max,  optimaValues,  bound1),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(max,  optimaValues,  bound1),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(max,  optimaValues,  bound1),  Math.max(max));	  optimiser.setOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
528	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(max,  optima));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(max,  optima));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(max,  optima));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    final));    	non-compiled	[CE]  class,  interface,  or  enum  expected	177	None	replace
529	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));	  optimizer.setOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max),    optimaValues[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	107	None	replace
530	[BUG]  [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(max,  bound1),  Math.max(max),  optimaValues[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  max,  Math.min(max,  bound1),  Math.max(max),  optimaValues[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  max,  Math.min(max,  bound1),  Math.max(max),  optimaValues[i]);	  optimizer.setOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max),    optimaValues[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	107	None	replace
531	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i],  max));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i],  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optimaValues[i],  max));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
532	[BUG]  [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(max,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  min,  goalType,  Math.min(max,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  min,  goalType,  Math.min(max,  bound2),  Math.max(max));	  optimizer.setOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	106	None	replace
533	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues),  Math.max(max));	  optimizer.setOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	106	None	replace
534	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimizeda[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimizeda[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimizeda[i]));	  optima[i]    =    optimizer.getOptimize(f,    max,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
535	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,	  for(int    i    =    0;    i    <    min;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
536	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  minIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  minIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  minIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound	  for(int    i    =    0;    i    <    maxIterations;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
537	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound	  for(int    i    =    0;    i    <    maxIterations;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
538	[BUG]  [BUGGY]  for(int  i  =  0,  max  =  optimaValues.length;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0,  max  =  optimaValues.length;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0,  max  =  optimaValues.length;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0,    max    =    optima.length;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
539	[BUG]  [BUGGY]  for(int  i  =  0,  j  =  optima.length;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0,  j  =  optima.length;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0,  j  =  optima.length;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0,    max    =    optima.length;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
540	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Double.isNaN(optima[i]))    {    optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
541	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  optimiser[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  optimiser[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  count;  ++i)  {  optimiser[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optimiser[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	130	None	replace
542	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  optimisation[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  optimisation[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  optimisation[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optimiser[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	130	None	replace
543	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max));	  optimizer.setOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	170	None	replace
544	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  optimaValues,  max),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  optimaValues,  max),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(min,  optimaValues,  max),  Math.max(max));	  optimizer.setOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	170	None	replace
545	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max));	  optima[i]    =    goalType.optimize(f,    min,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
546	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound2),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound2),  Math.max(bound1,  bound2));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound2),  Math.max(bound1,  bound2));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	184	None	replace
547	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  iterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    0;    i    <    totalIterations;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	173	None	replace
548	[BUG]  [BUGGY]  int  totalIterations  =  optima.length;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  totalIterations  =  optima.length;  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  totalIterations  =  optima.length;	  for(int    i    =    0;    i    <    totalIterations;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	173	None	replace
549	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  bound1,  optima[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  bound1,  optima[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(min,  bound1,  optima[i]),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(max,    optima[i]),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
550	[BUG]  [BUGGY]  optima[i]  =  optimiza.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimiza.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimiza.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    min,    Math.min(max,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	135	None	replace
551	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
552	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(min,    bound1,    max),    Math.max(optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
553	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(lastNaN,  bound1,  max),  Math.max(optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(lastNaN,  bound1,  max),  Math.max(optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(lastNaN,  bound1,  max),  Math.max(optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(min,    bound1,    max),    Math.max(optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
554	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(optima[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
555	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(min,  bound2),  Math.max(max));	  optimizer.setOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	106	None	replace
556	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max));	  optimizer.setOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	106	None	replace
557	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  optimiser[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  optimiser[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  count;  ++i)  {  optimiser[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optimiser[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	108	None	replace
558	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  optimiser[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  optimiser[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  max;  ++i)  {  optimiser[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optimiser[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	108	None	replace
559	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  max,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  max,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(min,  max,  optimaValues[i]),  Math.max(max,  optimaValues[i]));	  optimiser.setOptimize(f,    min,    Math.min(max,    optimaValues[i]),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
560	[BUG]  [BUGGY]  int  i  =  0;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optima[i]    =    optimiser.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	131	None	replace
561	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
562	[BUG]  [BUGGY]  for(int  i  =  0,  n  =  optima.length;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0,  n  =  optima.length;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0,  n  =  optima.length;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0,    max    =    optima.length;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
563	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  totalEvaluations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  totalEvaluations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  totalEvaluations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    0;    i    <    totalIterations;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	174	None	replace
564	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound2),  Math.max(lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound2),  Math.max(lastNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound2),  Math.max(lastNaN));	  optima[i]    =    optimizer.optimize(f,    min,    Math.min(lastNaN,    max),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
565	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  lastNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  lastNaN));	  optima[i]    =    optimizer.optimize(f,    min,    Math.min(lastNaN,    max),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
566	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(optima[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(optima[i]);	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound1,    max),    Math.max(optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	175	None	replace
567	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  bound1,  max),  Math.max(optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  bound1,  max),  Math.max(optima[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  bound1,  max),  Math.max(optima[i]);	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound1,    max),    Math.max(optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	175	None	replace
568	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,	  for(int    i    =    0;    i    <    limit;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
569	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optimaValues[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	replace
570	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(optimaValues[i],  bound1),  Math.max(optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(optimaValues[i],  bound1),  Math.max(optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(optimaValues[i],  bound1),  Math.max(optimaValues[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	replace
571	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(optimaValues[i],  max),  Math.max(optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(optimaValues[i],  max),  Math.max(optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(optimaValues[i],  max),  Math.max(optimaValues[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	replace
572	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(bound2,  max));	  optima[i]    =    optimizer.optimize(f,    max,    Math.min(bound1,    bound2),    Math.max(bound2,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	132	None	replace
573	[BUG]  [BUGGY]  optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimiser.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    max),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	134	None	replace
574	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound2,  max),  Math.max(lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound2,  max),  Math.max(lastNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound2,  max),  Math.max(lastNaN));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1,    max),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	188	None	replace
575	[BUG]  [BUGGY]  optimisation.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(min,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	160	None	replace
576	[BUG]  [BUGGY]  int  totalIterations  =  optima.length  -  1;  for(int  i  =  0;  i  <  lastNaN;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  totalIterations  =  optima.length  -  1;  for(int  i  =  0;  i  <  lastNaN;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  totalIterations  =  optima.length  -  1;  for(int  i  =  0;  i  <  lastNaN;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0;    i    <    lastNaN;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
577	[BUG]  [BUGGY]  optima[i]  =  optimization.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimization.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimization.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));	  optima[i]    =    goalType.optimize(f,    min,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
578	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound2),  Math.max(max));	  optimisation    =    optimizer.optimize(f,    max,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	145	None	replace
579	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  max,  optima[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  max,  optima[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(min,  max,  optima[i]),  Math.max(max,  optima[i]));	  optimiser.setOptimize(f,    min,    Math.min(max,    optima[i]),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	82	None	replace
580	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optimaValues[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
581	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(bound1,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(bound1,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(bound1,  optimaValues[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
582	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  optimaValues[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
583	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  count;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  count;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  count;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    1;    i    <    max;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
584	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  optimiza[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  optimiza[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  count;  ++i)  {  optimiza[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optimiza[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	85	None	replace
585	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound2),  Math.max(max));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
586	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max));	  optimisation    =    optimizer.optimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
587	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(min,  i),  Math.max(max,  i));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(min,  i),  Math.max(max,  i));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  goalType,  Math.min(min,  i),  Math.max(max,  i));	  optimisation    =    optimizer.optimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
588	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  count;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  For(int  i  =  0;  i  <  count;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	For(int  i  =  0;  i  <  count;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  For(int    i    =    0;    i    <    max;    ++i)    {    optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
589	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max));	  optimiser.setOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
590	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(min,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(min,  optima[i]);  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(min,  optima[i]);  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
591	[BUG]  [BUGGY]  optima[i]  =  optimiza.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimiza.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimiza.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));	  optima[i]    =    optimizer.optimize(f,    min,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
592	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(min,  bound2),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(min,  bound2),  Math.max(max));	  optimiser.setOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	replace
593	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  count;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  count;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  count;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
594	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  goalType,  Math.min(min,  max),  Math.max(max));	  optimisation    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
595	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(min,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(min,  optima[i]);  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(min,  optima[i]);  }	  for(int    i    =    0;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	139	None	replace
596	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  bound1),  Math.max(lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  bound1),  Math.max(lastNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  bound1),  Math.max(lastNaN));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	136	None	replace
597	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  bound1,  max),  Math.max(lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  bound1,  max),  Math.max(lastNaN));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  bound1,  max),  Math.max(lastNaN));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	136	None	replace
598	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optima));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optima));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optima));	  optimisation    =    optimizer.optimize(f,    max,    Math.min(max,    bound1),    Math.max(max,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
599	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  maxEvaluations));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  maxEvaluations));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  maxEvaluations));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(lastNaN,    max),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
600	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  count;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound1));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound1));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	109	None	replace
601	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
602	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  limit;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    limit;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	140	None	replace
603	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  optima[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  optima[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  optima[i]),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	181	None	replace
604	[BUG]  [BUGGY]  optima.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optimiser.setOptimize(f,    max,    Math.min(bound1,    bound2),    Math.max(bound2,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
605	[BUG]  [BUGGY]  optima[i]  =  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optimaValues[i]));	  optimiser.setOptimize(f,    min,    goalType,    Math.min(max,    bound1),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
606	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(optimaValues[i]));	  optimiser.setOptimize(f,    min,    goalType,    Math.min(max,    bound1),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
607	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(bound2,  max));	  optima[i]    =    optimizer.getOptimize(f,    max,    Math.min(bound1,    bound2),    Math.max(bound2,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	replace
608	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  maxIterations;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  For(int  i  =  0;  i  <  maxIterations;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	For(int  i  =  0;  i  <  maxIterations;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  For(int    i    =    0;    i    <    max;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	84	None	replace
609	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  optima,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  optima,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  optima,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    min,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
610	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  optima,  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  optima,  bound1),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  optima,  bound1),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    min,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
611	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,	  for(int    i    =    0;    i    <    min;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
612	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optima));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optima));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optima));	  optimizer.setOptimize(f,    max,    Math.min(max,    bound1),    Math.max(max,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
613	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  optimaValues),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  optimaValues),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  optimaValues),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    optimaValues,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	178	None	replace
614	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max    	non-compiled	[CE]  class,  interface,  or  enum  expected	143	None	replace
615	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
616	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	  for(int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
617	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(optima[i],  bound1),  Math.max(optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(optima[i],  bound1),  Math.max(optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(optima[i],  bound1),  Math.max(optima[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
618	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
619	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i],  max));  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i],  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i],  max));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
620	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i]));	  optima[i]    =    optimizer.optimize(f,    min,    max,    Math.min(lastNaN,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
621	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound2),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound2),  Math.max(bound1,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound2),  Math.max(bound1,  max));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1),    Math.max(lastNaN));    	non-compiled	[CE]  class,  interface,  or  enum  expected	187	None	replace
622	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optima[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(lastNaN,    optima[i]),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	159	None	replace
623	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  max),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  max),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  max),  Math.max(max,  optima[i]));	  optimisation    =    optimizer.optimize(f,    goalType,    Math.min(min,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
624	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max,  optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max,  optimaValues[i]));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(max,    bound1),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
625	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(optimaValues[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	replace
626	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i],  max),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i],  max),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i],  max),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	replace
627	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound2),  Math.max(max,  optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound2),  Math.max(max,  optima[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound2),  Math.max(max,  optima[i]);	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
628	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(optimaValues[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	122	None	replace
629	[BUG]  [BUGGY]  for(int  i  =  0,  max  =  optima.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max,  optima[i]));  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0,  max  =  optima.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max,  optima[i]));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0,  max  =  optima.length;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max,  optima[i]));  }	  for(int    i    =    0,    max    =    optima.length;    ++i)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
630	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  optima[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  optima[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  optima[i]),  Math.max(max,  optima[i]));	  optima[i]    =    optimiser.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	180	None	replace
631	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  optima[i]));	  optima[i]    =    optimiser.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	180	None	replace
632	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(optima[i]));	  optima[i]    =    optimiser.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	180	None	replace
633	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  optimiza[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  optimiza[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  count;  ++i)  {  optimiza[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    max;    ++i)    {    optimiza[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
634	[BUG]  [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
635	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(optimaValues[i]));  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(optimaValues[i]));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
636	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(optima[i]));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
637	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(optima,  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(optima,  bound1),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(optima,  bound1),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
638	[BUG]  [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
639	[BUG]  [BUGGY]  optima[i]  =  optimiza.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimiza.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimiza.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optima[i]    =    optimizer.optimize(f,    min,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	87	None	replace
640	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  bound1),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  bound1),  Math.max(bound1,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  bound1),  Math.max(bound1,  max));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound1),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	185	None	replace
641	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  optima[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  optima[i]);	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	115	None	replace
642	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(max,  optima[i]));	  optimisation    =    optimizer.optimize(f,    goalType,    Math.min(min,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	151	None	replace
643	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  count;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  count;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  count;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
644	[BUG]  [BUGGY]  int  i  =  0;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
645	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  min),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  min),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  min),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(min,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
646	[BUG]  [BUGGY]  optima[i]  =  optimiser.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimiser.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimiser.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(min,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
647	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i]),  Math.max(max,  optima[i]));	  optimiser.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
648	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i],  Math.max(max,  optima[i])));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i],  Math.max(max,  optima[i])));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(max,  optimaValues[i],  Math.max(max,  optima[i])));	  optimiser.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
649	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max,  optima[i]));	  optimizer.setOptimize(f,    min,    goalType,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
650	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    0;    i    <    maxIterations;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
651	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  totalIterations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(	  for(int    i    =    0;    i    <    maxIterations;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
652	[BUG]  [BUGGY]  optimisation  =  optimization.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimization.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimization.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optimisation    =    optimizer.optimize(f,    max,    Math.min(bound1,    bound2),    Math.max(bound2,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	144	None	replace
653	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(optima[i]));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
654	[BUG]  [BUGGY]  int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
655	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(optima[i]));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
656	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  optima,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  optima,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  optima,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
657	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  optima,  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  optima,  bound1),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  optima,  bound1),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
658	[BUG]  [BUGGY]  int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    0;    i    <    count;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	172	None	replace
659	[BUG]  [BUGGY]  int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType	  for(int    i    =    0;    i    <    count;    ++i)    {    if(optima[i]!=    goalType)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	172	None	replace
660	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(optima[i],  max));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(optima[i],  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(optima[i],  max));	  optima[i]    =    optimizer.getOptimize(f,    min,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	79	None	replace
661	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Double.isNaN(optima[i]))    {    optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	157	None	replace
662	[BUG]  [BUGGY]  int  totalIterations  =  optima.length  -  1;  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  totalIterations  =  optima.length  -  1;  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  totalIterations  =  optima.length  -  1;  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Double.isNaN(optima[i]))    {    optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	157	None	replace
663	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound2),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound2),  Math.max(bound1,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound2),  Math.max(bound1,  max));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
664	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  optima[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  optima[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  optima[i]),  Math.max(max,  optima[i]));	  optimisation    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	152	None	replace
665	[BUG]  [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(max,  optimaValues[i],  max));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimisation  =  optimizer.optimize(f,  goalType,  Math.min(max,  optimaValues[i],  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimisation  =  optimizer.optimize(f,  goalType,  Math.min(max,  optimaValues[i],  max));	  optimisation    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	152	None	replace
666	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(lastNaN,  max),  Math.max(optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(lastNaN,  max),  Math.max(optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(lastNaN,  max),  Math.max(optima[i]));	  optimizer.setOptimize(f,    goalType,    Math.min(min,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
667	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(bound1,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(bound1,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  optimaValues[i]),  Math.max(bound1,  optimaValues[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
668	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  optimaValues[i]),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  optimaValues[i]),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
669	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1),  Math.max(optimaValues[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
670	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  optimaValues,  bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  optimaValues,  bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  optimaValues,  bound1,  bound2),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    optimaValues,    bound1,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	179	None	replace
671	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  optimaValues,  max),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  optimaValues,  max),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  optimaValues,  max),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    optimaValues,    bound1,    max),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	179	None	replace
672	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	183	None	replace
673	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1,  max),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
674	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optimaValues[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  optimaValues,  bound1),  Math.max(max,  optimaValues[i]));	  optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max,    optimaValues[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
675	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max),  optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max),  optima[i]);  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(min,  bound1),  Math.max(max),  optima[i]);	  optima[i]    =    optimizer.optimize(f,    min,    goalType,    Math.min(max,    bound1,    bound2),    Math.max(max),    optima[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
676	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  totalEvaluations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  totalEvaluations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  totalEvaluations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  }	  for(int    i    =    0;    i    <    totalIterations;    ++i)    {    if(Double.isNaN(optima[i]))    {    optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
677	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  totalEvaluations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  totalEvaluations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  totalEvaluations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,	  for(int    i    =    0;    i    <    totalIterations;    ++i)    {    if(Double.isNaN(optima[i]))    {    optimizer.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
678	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(bound2,  max));	  optimizer.setOptimize(f,    max,    Math.min(bound1,    bound2),    Math.max(bound2,    goalType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
679	[BUG]  [BUGGY]  optima[i]  =  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  optima[i]));	  optimiser.setOptimize(f,    min,    goalType,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
680	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(optima[i]));	  optimiser.setOptimize(f,    min,    goalType,    Math.min(max,    bound1),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
681	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
682	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  optima[i]),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  optima[i]),  Math.max(max,  optima[i]));  [BUGGY]      }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  optima[i]),  Math.max(max,  optima[i]));	  optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(max,    optima[i]));    	non-compiled	[CE]  class,  interface,  or  enum  expected	164	None	replace
683	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
684	[BUG]  [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(Optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;      [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(Optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]        totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	int  i  =  0;  i  <  max;  ++i)  {  if(Optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
