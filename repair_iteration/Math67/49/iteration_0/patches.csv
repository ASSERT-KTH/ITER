bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    optimiser.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]    optimiser.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optimaValues[i]));  [BUGGY]  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	    optimiser.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optimaValues[i]));		non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	add
2	[BUG]  [BUGGY]    optima[i]  =  goalType.optimize(f,  max,  Math.min(max,  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]    optima[i]  =  goalType.optimize(f,  max,  Math.min(max,  bound1),  Math.max(max,  optima[i]));  [BUGGY]  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	    optima[i]  =  goalType.optimize(f,  max,  Math.min(max,  bound1),  Math.max(max,  optima[i]));		non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	add
3	[BUG]  [BUGGY]    optimiser.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]    optimiser.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optima[i]));  [BUGGY]  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	    optimiser.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optima[i]));		non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	add
4	[BUG]  [BUGGY]    optima[i]  =  goalType.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]    optima[i]  =  goalType.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [BUGGY]  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	    optima[i]  =  goalType.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));		non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	add
5	[BUG]  [BUGGY]    optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]    optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optima[i]));  [BUGGY]  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	    optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optima[i]));		non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	add
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	}  	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
7	[BUG]  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optimaValues[i]));  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]  optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optimaValues[i]));  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	optimizer.setOptimize(f,  goalType,  Math.min(max,  bound1),  Math.max(max,  optimaValues[i]));	}  	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	}  	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,	}  	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
10	[BUG]  [BUGGY]    optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]    optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	    optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));		non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	add
11	[BUG]  [BUGGY]    optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]    optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	    optimisation  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));		non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	add
12	[BUG]  [BUGGY]    optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]    optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	    optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));		non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	add
13	[BUG]  [BUGGY]    optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]    optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	    optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));		non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	add
14	[BUG]  [BUGGY]    optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]    optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	    optimizer.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));		non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	add
15	[BUG]  [BUGGY]  if(max  >  optima.length)  {  for(int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]  if(max  >  optima.length)  {  for(int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	if(max  >  optima.length)  {  for(int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	}  	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
16	[BUG]  [BUGGY]  if(max  >  optima.length)  {  for(int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]  if(max  >  optima.length)  {  for(int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	if(max  >  optima.length)  {  for(int  i  =  0;  i  <  max;  ++i)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	}  	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	}  	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  }	}  	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,	}  	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,	}  	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	}  	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
22	[BUG]  [BUGGY]    optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]    optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	    optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max,  optima[i]));		non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	add
23	[BUG]  [BUGGY]    optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]    optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	    optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max,  optima[i]));		non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	add
24	[BUG]  [BUGGY]    optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  max));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]    optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  max));  [BUGGY]  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	    optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  max));		non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	add
25	[BUG]  [BUGGY]    optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  max),  Math.max(lastNaN));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]    optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  max),  Math.max(lastNaN));  [BUGGY]  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	    optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(lastNaN,  max),  Math.max(lastNaN));		non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	add
26	[BUG]  [BUGGY]    optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max),  optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError  [CONTEXT]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [BUGGY]    optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max),  optima[i]);  [BUGGY]  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	254	254	1	replace	    optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(max,  bound1,  bound2),  Math.max(max),  optima[i]);		non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	add
