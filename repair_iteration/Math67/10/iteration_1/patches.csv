bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  j  =  currY  -  bound2;  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  j  =  currY  -  bound2;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  j  =  currY  -  bound2;	      int    j    =    bound1    -    bound2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
2	[BUG]  [BUGGY]  int  j  =  prevY  -  bound2;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  j  =  prevY  -  bound2;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  j  =  prevY  -  bound2;	      int    j    =    bound1    -    bound2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
3	[BUG]  [BUGGY]  int  j  =  currX  -  bound2;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  j  =  currX  -  bound2;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  j  =  currX  -  bound2;	      int    j    =    bound1    -    bound2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
4	[BUG]  [BUGGY]  int  j  =  bound1  -  prevY;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  j  =  bound1  -  prevY;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  j  =  bound1  -  prevY;	      int    j    =    bound1    -    bound2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
5	[BUG]  [BUGGY]  Integer  j  =  currX  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  Integer  j  =  currX  +  1;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	Integer  j  =  currX  +  1;	      Integer    j    =    currY    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
6	[BUG]  [BUGGY]  Integer  j  =  prevY  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  Integer  j  =  prevY  +  1;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	Integer  j  =  prevY  +  1;	      Integer    j    =    currY    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
7	[BUG]  [BUGGY]  Integer  j  =  currY  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  Integer  j  =  currY  -  1;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	Integer  j  =  currY  -  1;	      Integer    j    =    currY    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
8	[BUG]  [BUGGY]  int  j  =  currY  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  j  =  currY  +  1;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  j  =  currY  +  1;	      int    j    =    lastNaN    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
9	[BUG]  [BUGGY]  int  j  =  prevY  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  j  =  prevY  +  1;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  j  =  prevY  +  1;	      int    j    =    lastNaN    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
10	[BUG]  [BUGGY]  int  j  =  currX  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  j  =  currX  +  1;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  j  =  currX  +  1;	      int    j    =    lastNaN    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
11	[BUG]  [BUGGY]  int  j  =  currY;  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  j  =  currY;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  j  =  currY;	      int    j    =    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
12	[BUG]  [BUGGY]  int  j  =  currX;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  j  =  currX;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  j  =  currX;	      int    j    =    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
13	[BUG]  [BUGGY]  int  i  =  currX  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  i  =  currX  +  1;  [BUGGY]    double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  i  =  currX  +  1;	  int    i    =    currX    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
14	[BUG]  [BUGGY]  int  j  =  prevY;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  j  =  prevY;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  j  =  prevY;	      int    j    =    lastNaN;    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
15	[BUG]  [BUGGY]  int  i  =  currY  /  1;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  i  =  currY  /  1;  [BUGGY]    double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  i  =  currY  /  1;	  int    i    =    currY    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
16	[BUG]  [BUGGY]  int  j  =  prevY  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  j  =  prevY  -  1;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  j  =  prevY  -  1;	      int    j    =    lastNaN    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
17	[BUG]  [BUGGY]  int  j  =  currX  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  j  =  currX  -  1;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  j  =  currX  -  1;	      int    j    =    lastNaN    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
18	[BUG]  [BUGGY]  int  i  =  max  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  i  =  max  -  1;  [BUGGY]    double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  i  =  max  -  1;	  int    i    =    prevY    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
19	[BUG]  [BUGGY]  int  j  =  currY  /  1;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  j  =  currY  /  1;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  j  =  currY  /  1;	      int    j    =    currY    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
20	[BUG]  [BUGGY]  int  j  =  bound2;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  j  =  bound2;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  j  =  bound2;	      int    j    =    bound1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
21	[BUG]  [BUGGY]  Integer  j  =  getMinimumInt();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  Integer  j  =  getMinimumInt();  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	Integer  j  =  getMinimumInt();	      Integer    j    =    getMaximumInt();    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
22	[BUG]  [BUGGY]  Integer  j  =  getMaximumInt()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  Integer  j  =  getMaximumInt()  +  1;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	Integer  j  =  getMaximumInt()  +  1;	      Integer    j    =    getMaximumInt();    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
23	[BUG]  [BUGGY]  Integer  j  =  getMaximumInt()  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  Integer  j  =  getMaximumInt()  -  1;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	Integer  j  =  getMaximumInt()  -  1;	      Integer    j    =    getMaximumInt();    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
24	[BUG]  [BUGGY]  Integer  j  =  getMaximumInt()  -  min;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  Integer  j  =  getMaximumInt()  -  min;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	Integer  j  =  getMaximumInt()  -  min;	      Integer    j    =    getMaximumInt();    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
25	[BUG]  [BUGGY]  int  j  =  1  <  <  prevY;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  j  =  1  <  <  prevY;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  j  =  1  <  <  prevY;	      int    j    =    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
26	[BUG]  [BUGGY]  int  i  =  bound1  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  i  =  bound1  -  1;  [BUGGY]    double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  i  =  bound1  -  1;	  int    i    =    currX    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
27	[BUG]  [BUGGY]  int  j  =  bound1  -  currY;  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  j  =  bound1  -  currY;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  j  =  bound1  -  currY;	      int    j    =    bound1    -    bound2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
28	[BUG]  [BUGGY]  Integer  j  =  getMaximumNumber();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  Integer  j  =  getMaximumNumber();  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	Integer  j  =  getMaximumNumber();	      Integer    j    =    getMaximumInt();    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
29	[BUG]  [BUGGY]  int  i  =  prevY  -  currX;  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  i  =  prevY  -  currX;  [BUGGY]    double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  i  =  prevY  -  currX;	  int    i    =    prevY    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
30	[BUG]  [BUGGY]  int  j  =  currY  -  1  +  prevY;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  j  =  currY  -  1  +  prevY;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  j  =  currY  -  1  +  prevY;	      int    j    =    currY    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
31	[BUG]  [BUGGY]  double  j  =  0;  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  double  j  =  0;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	double  j  =  0;	      int    j    =    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
32	[BUG]  [BUGGY]  int  i  =  min  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  i  =  min  -  1;  [BUGGY]    double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  i  =  min  -  1;	  int    i    =    prevX    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
33	[BUG]  [BUGGY]  Integer  j  =  currY  /  1;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  Integer  j  =  currY  /  1;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	Integer  j  =  currY  /  1;	      Integer    j    =    currY    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
34	[BUG]  [BUGGY]  int  j  =  prevX  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  j  =  prevX  -  1;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  j  =  prevX  -  1;	      int    j    =    currY    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
35	[BUG]  [BUGGY]  int  j  =  j  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  j  =  j  +  1;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  j  =  j  +  1;	      int    j    =    lastNaN    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
36	[BUG]  [BUGGY]  int  i  =  prevY  /  1;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  i  =  prevY  /  1;  [BUGGY]    double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  i  =  prevY  /  1;	  int    i    =    currY    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
37	[BUG]  [BUGGY]  int  i  =  currX  /  1;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  i  =  currX  /  1;  [BUGGY]    double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  i  =  currX  /  1;	  int    i    =    currX    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
38	[BUG]  [BUGGY]  Integer  j  =  getMaximumInteger(0);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  Integer  j  =  getMaximumInteger(0);  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	Integer  j  =  getMaximumInteger(0);	      Integer    j    =    getMaximumInt();    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
39	[BUG]  [BUGGY]  Integer  j  =  getMaximumInteger();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  Integer  j  =  getMaximumInteger();  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	Integer  j  =  getMaximumInteger();	      Integer    j    =    getMaximumInt();    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
40	[BUG]  [BUGGY]  int  j  =  1  <  <  lastNaN;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  j  =  1  <  <  lastNaN;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  j  =  1  <  <  lastNaN;	      int    j    =    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
41	[BUG]  [BUGGY]  int  j  =  max  -  bound2;  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    }  double  currX  =  optima[0];  double  currY  =  optimaValues[0];  for  (int  j  =  1;  j  <  lastNaN;  ++j)  {  final  double  prevY  =  currY;  currX  =  optima[j];  currY  =  optimaValues[j];  if  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  prevY))  {      [BUGGY]  int  j  =  max  -  bound2;  [BUGGY]    int  i  =  j  -  1;  double  mIX  =  optima[i];  double  mIY  =  optimaValues[i];  while  ((i  >=  0)  &&  ((goalType  ==  GoalType.MAXIMIZE)  ^  (currY  <  mIY)))  {  optima[i  +  1]  =  mIX;  optimaValues[i  +  1]  =  mIY;  if  (i--  !=  0)  {  mIX  =  optima[i];  mIY  =  optimaValues[i];  }  else  {  mIX  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	1.0	280	280	1	replace	int  j  =  max  -  bound2;	      int    j    =    bound1    -    bound2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
