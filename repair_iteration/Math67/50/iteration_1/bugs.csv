bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    for(int  i  =  0,  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError  [CONTEXT]  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  [BUGGY]    for(int  i  =  0,  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	    for(int  i  =  0,  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }		non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	add
2	[BUG]  [BUGGY]    for(int  i  =  0,  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError  [CONTEXT]  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  [BUGGY]    for(int  i  =  0,  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	    for(int  i  =  0,  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }		non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	add
3	[BUG]  [BUGGY]    int  count  =  Math.min(optima.length,  max);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError  [CONTEXT]  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  [BUGGY]    int  count  =  Math.min(optima.length,  max);  [BUGGY]  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	    int  count  =  Math.min(optima.length,  max);		non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	add
4	[BUG]  [BUGGY]    for(int  i  =  0,  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError  [CONTEXT]  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  [BUGGY]    for(int  i  =  0,  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	    for(int  i  =  0,  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }		non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	add
5	[BUG]  [BUGGY]    for(int  i  =  0,  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError  [CONTEXT]  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  [BUGGY]    for(int  i  =  0,  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	    for(int  i  =  0,  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }		non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	add
6	[BUG]  [BUGGY]  totalIterations+=  optima.length;  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError  [CONTEXT]  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  [BUGGY]  totalIterations+=  optima.length;  [BUGGY]  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	totalIterations+=  optima.length;	totalIterations+=  optimizer.getIterationCount();  	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
7	[BUG]  [BUGGY]  totalIterations+=  optimizer.getIterationCount()  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError  [CONTEXT]  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  [BUGGY]  totalIterations+=  optimizer.getIterationCount()  -  1;  [BUGGY]  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	totalIterations+=  optimizer.getIterationCount()  -  1;	totalIterations+=  optimizer.getIterationCount();  	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
8	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError  [CONTEXT]  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  [BUGGY]    for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	    for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }		non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	add
9	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError  [CONTEXT]  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  [BUGGY]    for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	    for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }		non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	add
10	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError  [CONTEXT]  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  [BUGGY]    for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	    for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }		non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	add
11	[BUG]  [BUGGY]    int  count  =  optimizer.getIterationCount();  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError  [CONTEXT]  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  [BUGGY]    int  count  =  optimizer.getIterationCount();  [BUGGY]  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	    int  count  =  optimizer.getIterationCount();		non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	add
12	[BUG]  [BUGGY]  totalIterations+=  optima.getIterationCount();  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError  [CONTEXT]  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  [BUGGY]  totalIterations+=  optima.getIterationCount();  [BUGGY]  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	totalIterations+=  optima.getIterationCount();	totalIterations+=  optimizer.getIterationCount();  	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
13	[BUG]  [BUGGY]  totalIterations+=  optimizer.getIterationCount()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError  [CONTEXT]  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  [BUGGY]  totalIterations+=  optimizer.getIterationCount()  +  1;  [BUGGY]  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	totalIterations+=  optimizer.getIterationCount()  +  1;	totalIterations+=  optimizer.getIterationCount();  	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
14	[BUG]  [BUGGY]    int  count  =  optimizer.getCount();  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError  [CONTEXT]  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  [BUGGY]    int  count  =  optimizer.getCount();  [BUGGY]  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	    int  count  =  optimizer.getCount();		non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	add
15	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError  [CONTEXT]  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  [BUGGY]    for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [BUGGY]  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	    for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }		non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	add
16	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError  [CONTEXT]  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  [BUGGY]    for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	    for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }		non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	add
