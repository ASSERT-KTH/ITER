bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  count  =  Math.min(max,  optima.length);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  int  count  =  Math.min(max,  optima.length);  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.min(max,  optima.length);	      int    count    =    Math.min(optima.length,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
2	[BUG]  [BUGGY]  int  count  =  Math.max(optima.length,  max);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  int  count  =  Math.max(optima.length,  max);  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.max(optima.length,  max);	      int    count    =    Math.min(optima.length,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
3	[BUG]  [BUGGY]  int  count  =  Math.min(optima.length,  min);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  int  count  =  Math.min(optima.length,  min);  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.min(optima.length,  min);	      int    count    =    Math.min(optima.length,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
4	[BUG]  [BUGGY]  int  count  =  Math.min(optima.length,  max  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  int  count  =  Math.min(optima.length,  max  +  1);  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.min(optima.length,  max  +  1);	      int    count    =    Math.min(optima.length,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
5	[BUG]  [BUGGY]  totalIterations+=  optima.getIterationCount()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  totalIterations+=  optima.getIterationCount()  +  1;  [BUGGY]    totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	totalIterations+=  optima.getIterationCount()  +  1;	  totalIterations+=    optimizer.getIterationCount()    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
6	[BUG]  [BUGGY]  totalIterations+=  optimiza.getIterationCount();  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  totalIterations+=  optimiza.getIterationCount();  [BUGGY]    totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	totalIterations+=  optimiza.getIterationCount();	  totalIterations+=    optimizer.getIterationCount()    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
9	[BUG]  [BUGGY]  int  count  =  optima.length;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  int  count  =  optima.length;  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length;	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
10	[BUG]  [BUGGY]  totalIterations  +=  optima.length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  totalIterations  +=  optima.length  -  1;  [BUGGY]    totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	totalIterations  +=  optima.length  -  1;	  totalIterations+=    optima.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
11	[BUG]  [BUGGY]  totalIterations+=  optima.length  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  totalIterations+=  optima.length  +  1;  [BUGGY]    totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	totalIterations+=  optima.length  +  1;	  totalIterations+=    optima.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
12	[BUG]  [BUGGY]  totalIterations  +=  optima.getIterationCount()  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  totalIterations  +=  optima.getIterationCount()  -  1;  [BUGGY]    totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	totalIterations  +=  optima.getIterationCount()  -  1;	  totalIterations+=    optima.getIterationCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
18	[BUG]  [BUGGY]  int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
32	[BUG]  [BUGGY]  int  count  =  optimizer.getIterationCount()  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  int  count  =  optimizer.getIterationCount()  -  1;  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optimizer.getIterationCount()  -  1;	      int    count    =    optimizer.getIterationCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
33	[BUG]  [BUGGY]  int  count  =  optimizer.getIterationCount()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  int  count  =  optimizer.getIterationCount()  +  1;  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optimizer.getIterationCount()  +  1;	      int    count    =    optimizer.getIterationCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
34	[BUG]  [BUGGY]  int  count  =  optimization.getIterationCount()  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  int  count  =  optimization.getIterationCount()  -  1;  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optimization.getIterationCount()  -  1;	      int    count    =    optimizer.getIterationCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
38	[BUG]  [BUGGY]  int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
39	[BUG]  [BUGGY]  int  count  =  optimizer.getCount()  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  int  count  =  optimizer.getCount()  -  1;  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optimizer.getCount()  -  1;	      int    count    =    optimizer.getCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
40	[BUG]  [BUGGY]  int  count  =  optimizer.getCount()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  int  count  =  optimizer.getCount()  +  1;  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optimizer.getCount()  +  1;	      int    count    =    optimizer.getCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optimaValues.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  count  =  optimaValues.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optimaValues.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  bound1;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  bound1;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  bound1;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
52	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  bound1;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  bound1;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  bound1;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
56	[BUG]  [BUGGY]  totalIterations  +=  optimaValues.length;  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  totalIterations  +=  optimaValues.length;  [BUGGY]    totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	totalIterations  +=  optimaValues.length;	  totalIterations+=    optima.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
57	[BUG]  [BUGGY]  int  count  =  Math.min(bound1,  bound2);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  int  count  =  Math.min(bound1,  bound2);  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.min(bound1,  bound2);	      int    count    =    Math.min(optima.length,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
58	[BUG]  [BUGGY]  int  count  =  Math.min(bound1,  max);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  int  count  =  Math.min(bound1,  max);  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.min(bound1,  max);	      int    count    =    Math.min(optima.length,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  bound1;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  bound1;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  bound1;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
62	[BUG]  [BUGGY]  int  i  =  0;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  int  i  =  0;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  bound1;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  bound1;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  bound1;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
68	[BUG]  [BUGGY]  int  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  int  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
69	[BUG]  [BUGGY]  int  count  =  Math.min(optima.length,  max  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  int  count  =  Math.min(optima.length,  max  -  1);  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.min(optima.length,  max  -  1);	      int    count    =    Math.min(optima.length,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0].doubleValue();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0].doubleValue();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[0]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[0]  =  optima[i].doubleValue();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[0]  =  optima[i].doubleValue();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
73	[BUG]  [BUGGY]  int  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  int  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
75	[BUG]  [BUGGY]  int  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  int  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
76	[BUG]  [BUGGY]  int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0];  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0];  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0];  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
78	[BUG]  [BUGGY]  int  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  int  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	      for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]    totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }	      for(int    i    =    0;    i    <    max;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
