bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
3	[BUG]  [BUGGY]  int  count  =  optima.getIterationCount();  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.getIterationCount();  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.getIterationCount();	  int    count    =    optimizer.getIterationCount()    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
4	[BUG]  [BUGGY]  int  count  =  optimization.getIterationCount();  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optimization.getIterationCount();  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optimization.getIterationCount();	  int    count    =    optimizer.getIterationCount()    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
5	[BUG]  [BUGGY]  int  count  =  optima.length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length  -  1;  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length  -  1;	  int    count    =    optimizer.getIterationCount()    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
6	[BUG]  [BUGGY]  int  i  =  0;  i  <  bound2;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  bound2;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  bound2;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    bound1;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
7	[BUG]  [BUGGY]  int  i  =  0;  i  <  bound1;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  bound1;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  bound1;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    bound1;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }	  for(int    i    =    0;    i    <    limit;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
9	[BUG]  [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
11	[BUG]  [BUGGY]  int  i  =  0;  i  <  bound2;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  bound2;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  bound2;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }	  for(int    i    =    0;    i    <    bound1;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
12	[BUG]  [BUGGY]  int  i  =  0;  i  <  bound1;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  bound1;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  bound1;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }	  for(int    i    =    0;    i    <    bound1;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
14	[BUG]  [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
16	[BUG]  [BUGGY]  int  i  =  0;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length  -  1;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  optima.length  -  1;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length  -  1;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length    -    1;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  2;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  2;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length  -  2;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length    -    1;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length  -  1;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length    -    1;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  limit  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
22	[BUG]  [BUGGY]  int  limit  =  optima.length;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  limit  =  optima.length;  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  limit  =  optima.length;	  for(int    i    =    0,    count    =    optima.length;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
23	[BUG]  [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
25	[BUG]  [BUGGY]  int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length  -  1;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  optima.length  -  1;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length  -  1;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	  for(int    i    =    0,    len    =    optima.length;    i    <    len;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optimaValues.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  optimaValues.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optimaValues.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	  for(int    i    =    0,    len    =    optima.length;    i    <    len;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
28	[BUG]  [BUGGY]  int  len  =  optima.length;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  len  =  optima.length;  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  len  =  optima.length;	  for(int    i    =    0,    len    =    optima.length;    i    <    len;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
29	[BUG]  [BUGGY]  int  i  =  0;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	  for(int    i    =    0;    i    <    max;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	  for(int    i    =    0;    i    <    max;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
31	[BUG]  [BUGGY]  int  count  =  Math.max(max,  optima.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  Math.max(max,  optima.length);  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.max(max,  optima.length);	  int    count    =    Math.max(optima.length,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
32	[BUG]  [BUGGY]  int  count  =  Math.max(optima.length,  min);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  Math.max(optima.length,  min);  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.max(optima.length,  min);	  int    count    =    Math.max(optima.length,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
33	[BUG]  [BUGGY]  int  count  =  Math.min(max,  optima.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  Math.min(max,  optima.length  -  1);  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.min(max,  optima.length  -  1);	  int    count    =    Math.min(optima.length,    max    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
34	[BUG]  [BUGGY]  int  count  =  Math.min(optima.length,  min  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  Math.min(optima.length,  min  -  1);  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.min(optima.length,  min  -  1);	  int    count    =    Math.min(optima.length,    max    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
35	[BUG]  [BUGGY]  int  count  =  Math.max(optima.length,  max  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  Math.max(optima.length,  max  -  1);  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.max(optima.length,  max  -  1);	  int    count    =    Math.min(optima.length,    max    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0].doubleValue();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[0].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0].doubleValue();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[0].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[1].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[1].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[1].doubleValue();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[0].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[0].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[0].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[0].doubleValue();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[0].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
40	[BUG]  [BUGGY]  int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    count;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[0]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[0]  =  optima[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[0]  =  optima[i].doubleValue();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[0]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[0]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[0]  =  optima[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[0]  =  optima[i].doubleValue();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[0]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[0]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[0]  =  optima[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[0]  =  optima[i].doubleValue();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[0]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[1]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[1]  =  optima[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[1]  =  optima[i].doubleValue();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[0]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound1;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound1;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound1;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
48	[BUG]  [BUGGY]  int  i  =  0,  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0,  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0,  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound1;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0];  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0];  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[0];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0];  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0];  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[0];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[1];  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[1];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[1];  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[0];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
52	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[0];  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[0];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[0];  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[0];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
53	[BUG]  [BUGGY]  int  count  =  optimaValues.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optimaValues.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optimaValues.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	  for(int    i    =    0,    count    =    optimaValues.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
54	[BUG]  [BUGGY]  int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }	  int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
55	[BUG]  [BUGGY]  int  i  =  0;  i  <  minEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  minEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  minEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }	  int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
56	[BUG]  [BUGGY]  int  i  =  1;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  1;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  1;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }	  int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
57	[BUG]  [BUGGY]  int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }	  int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    limit;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length  -  1;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  optima.length  -  1;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length  -  1;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  for(int    i    =    0,    count    =    optima.length    -    1;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  2;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  2;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length  -  2;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  for(int    i    =    0,    count    =    optima.length    -    1;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
61	[BUG]  [BUGGY]  int  count  =  optima.length  -  2;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length  -  2;  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length  -  2;	  int    count    =    optima.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
62	[BUG]  [BUGGY]  int  count  =  optimaValues.length;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optimaValues.length;  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optimaValues.length;	  int    count    =    optima.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
63	[BUG]  [BUGGY]  int  count  =  optimiza.length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optimiza.length  -  1;  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optimiza.length  -  1;	  int    count    =    optima.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
64	[BUG]  [BUGGY]  int  count  =  Math.min(max,  bound1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  Math.min(max,  bound1);  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.min(max,  bound1);	  int    count    =    Math.min(bound1,    bound2);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
65	[BUG]  [BUGGY]  int  count  =  Math.min(optima.length,  bound1);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  Math.min(optima.length,  bound1);  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.min(optima.length,  bound1);	  int    count    =    Math.min(bound1,    bound2);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
66	[BUG]  [BUGGY]  int  count  =  Math.min(max,  bound1,  bound2);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  Math.min(max,  bound1,  bound2);  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.min(max,  bound1,  bound2);	  int    count    =    Math.min(bound1,    bound2);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
67	[BUG]  [BUGGY]  int  count  =  Math.max(bound1,  bound2);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  Math.max(bound1,  bound2);  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.max(bound1,  bound2);	  int    count    =    Math.min(bound1,    bound2);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
68	[BUG]  [BUGGY]  int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  int    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
69	[BUG]  [BUGGY]  int  count  =  optima.length  -  2;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length  -  2;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length  -  2;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  int    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
70	[BUG]  [BUGGY]  int  count  =  optima.length;  i  <  count  +  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length;  i  <  count  +  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length;  i  <  count  +  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  int    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  limit;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    limit;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
72	[BUG]  [BUGGY]  int  i  =  0;  i  <  bound2;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  bound2;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  bound2;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }	  for(int    i    =    0;    i    <    bound1;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }	  for(int    i    =    0;    i    <    bound1;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
74	[BUG]  [BUGGY]  int  i  =  0;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }	  for(int    i    =    0;    i    <    bound1;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length  -  1;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  optima.length  -  1;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length  -  1;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	  for(int    i    =    0,    len    =    optima.length;    i    <    len;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  2;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  2;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length  -  2;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length    -    1;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length  -  1;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  optima.length  -  1;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length  -  1;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length    -    1;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
78	[BUG]  [BUGGY]  int  count  =  Math.min(max,  optimizer.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  Math.min(max,  optimizer.length);  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.min(max,  optimizer.length);	  int    count    =    Math.min(optima.length,    min);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  maxEvaluations;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  maxEvaluations;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  maxEvaluations;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
81	[BUG]  [BUGGY]  int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  maxEvaluations;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimiser.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimiser.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimiser.getOptimization();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimization.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimization.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimization.getOptimization();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optimaValues.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  optimaValues.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optimaValues.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  for(int    i    =    0,    len    =    optima.length;    i    <    len;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[0]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[0]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[0]  =  null;  }	  for(int    i    =    0,    len    =    optima.length;    i    <    len;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
87	[BUG]  [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
88	[BUG]  [BUGGY]  int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  min;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
89	[BUG]  [BUGGY]  int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  int    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
90	[BUG]  [BUGGY]  int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[	  int    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
91	[BUG]  [BUGGY]  int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i	  int    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
92	[BUG]  [BUGGY]  int  count  =  optima.length  -  2;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length  -  2;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length  -  2;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  int    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }	  for(int    i    =    0;    i    <    limit;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }	  for(int    i    =    0;    i    <    limit;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
95	[BUG]  [BUGGY]  totalIterations+=  optima.getIterationCount()  /  1;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  totalIterations+=  optima.getIterationCount()  /  1;  [BUGGY]      totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	totalIterations+=  optima.getIterationCount()  /  1;	  totalIterations+=    optima.getIterationCount()    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  limit  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  limit  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
98	[BUG]  [BUGGY]  int  i  =  0;  i  <  bound2;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  bound2;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  bound2;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    bound1;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  bound2;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  bound2;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  bound2;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    bound1;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
100	[BUG]  [BUGGY]  int  i  =  0;  i  <  bound1;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  bound1;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  bound1;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    bound1;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
101	[BUG]  [BUGGY]  int  count  =  optimiza.getIterationCount();  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optimiza.getIterationCount();  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optimiza.getIterationCount();	  int    count    =    optimization.getIterationCount()    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  1,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }	  for(int    i    =    0,    len    =    optima.length;    i    <    len;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(min,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
103	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]	  for(int    i    =    0,    len    =    optima.length;    i    <    len;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(min,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
104	[BUG]  [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
105	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
106	[BUG]  [BUGGY]  int  count  =  Math.min(max,  optimaValues.length);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  Math.min(max,  optimaValues.length);  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.min(max,  optimaValues.length);	  int    count    =    Math.min(max,    optima.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
107	[BUG]  [BUGGY]  int  count  =  Math.min(optimaValues.length,  max);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  Math.min(optimaValues.length,  max);  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.min(optimaValues.length,  max);	  int    count    =    Math.min(max,    optima.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
108	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	  for(int    i    =    0;    i    <    limit;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
109	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	  for(int    i    =    0;    i    <    limit;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	  for(int    i    =    0;    i    <    limit;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
111	[BUG]  [BUGGY]  int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }	  int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
112	[BUG]  [BUGGY]  int  i  =  0;  i  <  minEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  minEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  minEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }	  int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
113	[BUG]  [BUGGY]  int  i  =  1;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  1;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  1;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }	  int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
114	[BUG]  [BUGGY]  int  count  =  optima.getCount();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.getCount();  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.getCount();	  int    count    =    optimizer.getCount()    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
115	[BUG]  [BUGGY]  int  count  =  optimiza.getCount();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optimiza.getCount();  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optimiza.getCount();	  int    count    =    optimizer.getCount()    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
116	[BUG]  [BUGGY]  int  count  =  optimization.getCount();  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optimization.getCount();  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optimization.getCount();	  int    count    =    optimizer.getCount()    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
117	[BUG]  [BUGGY]  int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	  int    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
118	[BUG]  [BUGGY]  int  count  =  optima.length  -  2;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length  -  2;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length  -  2;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	  int    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
119	[BUG]  [BUGGY]  int  count  =  optima.length;  i  <  count  +  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length;  i  <  count  +  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length;  i  <  count  +  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	  int    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
120	[BUG]  [BUGGY]  totalIterations  +=  optimaValues.length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  totalIterations  +=  optimaValues.length  -  1;  [BUGGY]      totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	totalIterations  +=  optimaValues.length  -  1;	  totalIterations    +=    optimaValues.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
121	[BUG]  [BUGGY]  totalIterations  +=  optimaValues[i].length;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  totalIterations  +=  optimaValues[i].length;  [BUGGY]      totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	totalIterations  +=  optimaValues[i].length;	  totalIterations    +=    optimaValues.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
122	[BUG]  [BUGGY]  totalIterations  +=  optimaValues[i];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  totalIterations  +=  optimaValues[i];  [BUGGY]      totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	totalIterations  +=  optimaValues[i];	  totalIterations    +=    optimaValues.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
123	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound2;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
124	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  bound1.length;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  bound1.length;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length;  i  <  bound1.length;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound2;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound2;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
126	[BUG]  [BUGGY]  int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	  int    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
127	[BUG]  [BUGGY]  int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[	  int    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
128	[BUG]  [BUGGY]  int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i	  int    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
129	[BUG]  [BUGGY]  int  count  =  min.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  min.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  min.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	  int    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
130	[BUG]  [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  limit  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  for(int    i    =    0,    count    =    optima.length;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
131	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  for(int    i    =    0,    count    =    optima.length;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
132	[BUG]  [BUGGY]  int  i  =  1;  i  <  maxEvaluations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  1;  i  <  maxEvaluations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  1;  i  <  maxEvaluations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	  int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
133	[BUG]  [BUGGY]  int  i  =  0;  i  <  maxIterations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  maxIterations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  maxIterations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	  int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
134	[BUG]  [BUGGY]  int  i  =  0;  i  <  minEvaluations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  minEvaluations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  minEvaluations;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	  int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(max))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(max))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(max))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    len    =    optima.length;    i    <    len;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
136	[BUG]  [BUGGY]  for(int  i  =  1,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1,  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    len    =    optima.length;    i    <    len;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
137	[BUG]  [BUGGY]  int  count  =  Math.min(max,  optima.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  Math.min(max,  optima.length  +  1);  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.min(max,  optima.length  +  1);	  int    count    =    Math.min(optima.length,    max    +    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
138	[BUG]  [BUGGY]  int  count  =  Math.min(optima.length,  min  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  Math.min(optima.length,  min  +  1);  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.min(optima.length,  min  +  1);	  int    count    =    Math.min(optima.length,    max    +    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
139	[BUG]  [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	  int    i    =    0;    i    <    min;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
141	[BUG]  [BUGGY]  totalIterations  +=  optima.getIterationCount()  *  1;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  totalIterations  +=  optima.getIterationCount()  *  1;  [BUGGY]      totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	totalIterations  +=  optima.getIterationCount()  *  1;	  totalIterations    +=    optima.getIterationCount()    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
142	[BUG]  [BUGGY]  int  i  =  0,  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0,  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0,  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound1;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
143	[BUG]  [BUGGY]  int  i  =  0,  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0,  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0,  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[	  for(int    i    =    0,    count    =    optima.length;    i    <    bound1;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
144	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  2;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  2;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length  -  2;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	  for(int    i    =    0,    count    =    optima.length    -    1;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
145	[BUG]  [BUGGY]  totalIterations+=  optima.length  /  1;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  totalIterations+=  optima.length  /  1;  [BUGGY]      totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	totalIterations+=  optima.length  /  1;	  totalIterations+=    optima.length    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
146	[BUG]  [BUGGY]  totalIterations+=  optima.length  +  2;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  totalIterations+=  optima.length  +  2;  [BUGGY]      totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	totalIterations+=  optima.length  +  2;	  totalIterations+=    optima.length    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
147	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound1;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
148	[BUG]  [BUGGY]  int  i  =  0,  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0,  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0,  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound1;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
149	[BUG]  [BUGGY]  for(int  i  =  0,  max  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  max  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  max  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound1;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
150	[BUG]  [BUGGY]  int  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound1;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
151	[BUG]  [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    min;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
152	[BUG]  [BUGGY]  int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }	  for(int    i    =    0;    i    <    count;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
153	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
154	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimiser.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimiser.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimiser.getOptimization();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
155	[BUG]  [BUGGY]  totalIterations  +=  optima.length  -  2;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  totalIterations  +=  optima.length  -  2;  [BUGGY]      totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	totalIterations  +=  optima.length  -  2;	  totalIterations    +=    optima.length    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
156	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimiza[i]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimiza[i]  =  optima[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optimiza[i]  =  optima[i].doubleValue();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
157	[BUG]  [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  limit  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	  for(int    i    =    0,    count    =    optima.length;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
158	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	  for(int    i    =    0,    count    =    optima.length;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
159	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[0]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[0]  =  optima[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[0]  =  optima[i];  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
160	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  maxIterations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }	  for(int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
161	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  maxEvaluations;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }	  for(int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
162	[BUG]  [BUGGY]  int  count  =  Math.min(max,  bound1,  max);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  Math.min(max,  bound1,  max);  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.min(max,  bound1,  max);	  int    count    =    Math.min(bound1,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
163	[BUG]  [BUGGY]  int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    count;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	79	None	replace
164	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimiser.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimiser.getOptimizer();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimiser.getOptimizer();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
165	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(min,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
166	[BUG]  [BUGGY]  int  count  =  Math.max(optima.length,  max  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  Math.max(optima.length,  max  +  1);  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.max(optima.length,  max  +  1);	  int    count    =    Math.max(optima.length,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
167	[BUG]  [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
168	[BUG]  [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
169	[BUG]  [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
170	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer[i];  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
171	[BUG]  [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	  for(int    i    =    0,    count    =    optima.length;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
172	[BUG]  [BUGGY]  int  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	  for(int    i    =    0,    count    =    optima.length;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
173	[BUG]  [BUGGY]  int  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	  for(int    i    =    0,    len    =    optima.length;    i    <    len;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
174	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	  for(int    i    =    0,    len    =    optima.length;    i    <    len;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
175	[BUG]  [BUGGY]  int  count  =  Math.min(optimaValues.length,  max  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  Math.min(optimaValues.length,  max  -  1);  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.min(optimaValues.length,  max  -  1);	  int    count    =    Math.min(optima.length,    max    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
176	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	  for(int    i    =    0,    count    =    optima.length    -    1;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
177	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	  for(int    i    =    0,    count    =    optima.length    -    1;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
178	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length  -  1;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	  for(int    i    =    0,    count    =    optima.length    -    1;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
179	[BUG]  [BUGGY]  int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }	  int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
180	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0];  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0];  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[0];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
181	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optimaValues.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  optimaValues.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optimaValues.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    len    =    optima.length;    i    <    len;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
182	[BUG]  [BUGGY]  int  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    len    =    optima.length;    i    <    len;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
183	[BUG]  [BUGGY]  int  count  =  optima.length  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length  +  1;  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length  +  1;	  int    count    =    optima.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
184	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimisera[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimisera[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optimisera[i].doubleValue();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
185	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optimaValues.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optimaValues.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optimaValues.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	  for(int    i    =    0,    count    =    optimaValues.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
186	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optimaValues.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optimaValues.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optimaValues.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	  for(int    i    =    0,    count    =    optimaValues.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
187	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optimaValues.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optimaValues.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optimaValues.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	  for(int    i    =    0,    count    =    optimaValues.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
188	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	  for(int    i    =    0;    i    <    max;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
189	[BUG]  [BUGGY]  int  i  =  0;  i  <  bound1;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  bound1;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  bound1;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }	  for(int    i    =    0;    i    <    bound1;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
190	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  bound2;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  bound2;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  bound2;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }	  for(int    i    =    0;    i    <    bound1;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
191	[BUG]  [BUGGY]  int  count  =  optima.length  -  bound1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length  -  bound1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length  -  bound1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  int    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
192	[BUG]  [BUGGY]  int  count  =  optima.length;  i  >  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length;  i  >  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length;  i  >  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  int    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
193	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  bound2;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  bound2;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  bound2;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    limit;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
194	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  bound2;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  bound2;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  bound2;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }	  for(int    i    =    0;    i    <    bound1;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
195	[BUG]  [BUGGY]  for(int  i  =  0,  bound2  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  bound2  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  bound2  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound1;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
196	[BUG]  [BUGGY]  for(int  i  =  0,  bound1  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  bound1  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  bound1  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound1;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
197	[BUG]  [BUGGY]  for(int  i  =  0,  bound2  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  bound2  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  bound2  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound1;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
198	[BUG]  [BUGGY]  int  i  =  0,  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0,  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0,  count  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[	  for(int    i    =    0,    count    =    optima.length;    i    <    bound1;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
199	[BUG]  [BUGGY]  int  count  =  optimizationr.getIterationCount();  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optimizationr.getIterationCount();  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optimizationr.getIterationCount();	  int    count    =    optimizer.getIterationCount()    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
200	[BUG]  [BUGGY]  int  count  =  optima.length;  i  <  count  +  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length;  i  <  count  +  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length;  i  <  count  +  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  int    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
201	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
202	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimisera[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimisera[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimisera[i].doubleValue();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
203	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length    -    1;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
204	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length    -    1;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
205	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length    -    1;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
206	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length  -  1;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length    -    1;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
207	[BUG]  [BUGGY]  totalIterations  +=  optimaValues.getIterationCount()  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  totalIterations  +=  optimaValues.getIterationCount()  -  1;  [BUGGY]      totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	totalIterations  +=  optimaValues.getIterationCount()  -  1;	  totalIterations    +=    optima.getIterationCount()    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
208	[BUG]  [BUGGY]  totalIterations  +=  optimaValues[i].getIterationCount()  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  totalIterations  +=  optimaValues[i].getIterationCount()  -  1;  [BUGGY]      totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	totalIterations  +=  optimaValues[i].getIterationCount()  -  1;	  totalIterations    +=    optima.getIterationCount()    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
209	[BUG]  [BUGGY]  int  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
210	[BUG]  [BUGGY]  for(int  i  =  0,  bound2  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  bound2  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  bound2  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound1;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
211	[BUG]  [BUGGY]  int  i  =  0,  bound2  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0,  bound2  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0,  bound2  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound1;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
212	[BUG]  [BUGGY]  int  count  =  optima.length  -  bound1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length  -  bound1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length  -  bound1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	  int    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
213	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  bound1.length;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  bound1.length;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  bound1.length;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    count;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
214	[BUG]  [BUGGY]  int  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i	  for(int    i    =    0,    len    =    optima.length;    i    <    len;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(min,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
215	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optimaValues.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  optimaValues.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optimaValues.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }	  for(int    i    =    0,    len    =    optima.length;    i    <    len;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(min,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
216	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }	  for(int    i    =    0,    len    =    optima.length;    i    <    len;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(min,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
217	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[1]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[1]  =  optima[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  max;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[1]  =  optima[i].doubleValue();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[0]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
218	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[0]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[0]  =  optima[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[0]  =  optima[i].doubleValue();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[0]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
219	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  bound1;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  bound1;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  bound1;  ++i)  {  if(optima[i]  ==  goalType)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(optima[i]    ==    goalType)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
220	[BUG]  [BUGGY]  int  i  =  0;  i  <  count;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  count;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  count;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	  int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
221	[BUG]  [BUGGY]  int  i  =  0;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	  int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
222	[BUG]  [BUGGY]  int  count  =  optimizationr.getCount();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optimizationr.getCount();  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optimizationr.getCount();	  int    count    =    optimizer.getCount()    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
223	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length    -    1;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
224	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length    -    1;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
225	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  bound1.length;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  bound1.length;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  bound1.length;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i].doubleValue();  }	  for(int    i    =    0;    i    <    limit;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
226	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  bound1.length;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  bound1.length;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  bound1.length;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }	  for(int    i    =    0;    i    <    count;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
227	[BUG]  [BUGGY]  int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0;  i  <  limit;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }	  int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
228	[BUG]  [BUGGY]  for(int  i  =  0,  bound1  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  bound1  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  bound1  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound2;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
229	[BUG]  [BUGGY]  for(int  i  =  0,  bound2  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  bound2  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  bound2  =  optima.length;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound2;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
230	[BUG]  [BUGGY]  int  i  =  0,  count  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0,  count  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0,  count  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound2;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
231	[BUG]  [BUGGY]  int  i  =  0,  count  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0,  count  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0,  count  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[	  for(int    i    =    0,    count    =    optima.length;    i    <    bound2;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
232	[BUG]  [BUGGY]  int  count  =  Math.min(bound2,  max);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  Math.min(bound2,  max);  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.min(bound2,  max);	  int    count    =    Math.min(bound1,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
233	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  bound1;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  bound1;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  bound1;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimizer();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimizer();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
234	[BUG]  [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  for(int    i    =    0,    count    =    optima.length;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
235	[BUG]  [BUGGY]  int  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  for(int    i    =    0,    count    =    optima.length;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
236	[BUG]  [BUGGY]  int  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  for(int    i    =    0,    len    =    optima.length;    i    <    len;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
237	[BUG]  [BUGGY]  totalIterations  +=  optima.length  -  1L;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  totalIterations  +=  optima.length  -  1L;  [BUGGY]      totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	totalIterations  +=  optima.length  -  1L;	  totalIterations    +=    optima.length    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
238	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  bound1;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  bound1;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  bound1;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	  for(int    i    =    0;    i    <    limit;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
239	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  bound2;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  bound2;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  bound2;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	  for(int    i    =    0;    i    <    limit;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
240	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  bound1;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  bound1;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  bound1;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
241	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  Integer  i  =  0;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	Integer  i  =  0;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	  int    i    =    0;    i    <    min;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
242	[BUG]  [BUGGY]  int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	  int    i    =    0;    i    <    min;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
243	[BUG]  [BUGGY]  for(int  i  =  0,  bound2  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  bound2  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  bound2  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound1;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
244	[BUG]  [BUGGY]  for(int  i  =  0,  bound1  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  bound1  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  bound1  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound1;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
245	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  limit;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0].doubleValue();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[0].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
246	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  bound1.length;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  optima.length;  i  <  bound1.length;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  len  =  optima.length;  i  <  bound1.length;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }	  for(int    i    =    0,    len    =    optima.length;    i    <    len;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
247	[BUG]  [BUGGY]  int  count  =  optima.length;  i  <  count  +  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length;  i  <  count  +  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length;  i  <  count  +  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	  int    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
248	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  bound1.length;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  bound1.length;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  bound1.length;  ++i)  {  if(optima[i]!=  null)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    count;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	79	None	replace
249	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(min,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
250	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(min,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
251	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length  -  1;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  for(int    i    =    0,    count    =    optima.length    -    1;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
252	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  for(int    i    =    0,    count    =    optima.length    -    1;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
253	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  for(int    i    =    0,    count    =    optima.length    -    1;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
254	[BUG]  [BUGGY]  int  i  =  0,  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0,  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0,  count  =  optima.length  -  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	  for(int    i    =    0,    count    =    optima.length    -    1;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
255	[BUG]  [BUGGY]  int  i  =  0,  bound2  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0,  bound2  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0,  bound2  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound1;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
256	[BUG]  [BUGGY]  for(int  i  =  0,  bound1  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  bound1  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  bound1  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound1;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
257	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  count;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[0]  =  optima[i].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  count;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[0]  =  optima[i].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  count;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[0]  =  optima[i].doubleValue();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[0]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
258	[BUG]  [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i])||  Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i])||  Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i])||  Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  for(int    i    =    0,    count    =    optima.length;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
259	[BUG]  [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i])||  Double.isNaN(optima[i]))  {  optima[i]  =  nu  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i])||  Double.isNaN(optima[i]))  {  optima[i]  =  nu  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i])||  Double.isNaN(optima[i]))  {  optima[i]  =  nu	  for(int    i    =    0,    count    =    optima.length;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
260	[BUG]  [BUGGY]  totalIterations  +=  optimaValues[i].length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  totalIterations  +=  optimaValues[i].length  -  1;  [BUGGY]      totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	totalIterations  +=  optimaValues[i].length  -  1;	  totalIterations    +=    optima.length    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
261	[BUG]  [BUGGY]  int  i  =  1;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  1;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  1;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	  int    i    =    0;    i    <    min;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
262	[BUG]  [BUGGY]  int  count  =  Math.min(optima.length,  max)+  1;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  Math.min(optima.length,  max)+  1;  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  Math.min(optima.length,  max)+  1;	  int    count    =    Math.min(optima.length,    max    +    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
263	[BUG]  [BUGGY]  int  maxIterations  =  optima.length;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  maxIterations  =  optima.length;  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  maxIterations  =  optima.length;	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[i].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
264	[BUG]  [BUGGY]  int  count  =  optima.length  -  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length  -  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length  -  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  int    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
265	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  count;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  count;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  count;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0].doubleValue();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[0].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
266	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[1].doubleValue();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[1].doubleValue();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  min;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[1].doubleValue();  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[0].doubleValue();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
267	[BUG]  [BUGGY]  int  i  =  0,  bound2  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0,  bound2  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0,  bound2  =  optima.length;  i  <  bound1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound1;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
268	[BUG]  [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimiser.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimiser.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimiser.getIterationCount();  }	  for(int    i    =    0,    count    =    optima.length;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
269	[BUG]  [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i])||  Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i])||  Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i])||  Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	  for(int    i    =    0,    count    =    optima.length;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
270	[BUG]  [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound1.length;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound1.length;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  count  =  optima.length  -  1;  i  <  bound1.length;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length    -    1;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
271	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[0];  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[0];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[0];  }	  for(int    i    =    0;    i    <    max;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
272	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[0]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[0]  =  optima[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  max;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[0]  =  optima[i];  }	  for(int    i    =    0;    i    <    max;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
273	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  count;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optima[i];  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optima[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
274	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  count;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0];  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  1;  i  <  count;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0];  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  1;  i  <  count;  ++i)  {  if(Optima.isNaN(optima[i]))  {  optima[i]  =  optima[0];  }	  for(int    i    =    1;    i    <    max;    ++i)    {    if(Optima.isNaN(optima[i]))    {    optima[i]    =    optima[0];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
275	[BUG]  [BUGGY]  int  count  =  optima.length  -  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length  -  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length  -  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  int    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
276	[BUG]  [BUGGY]  int  count  =  optima.length  -  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length  -  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length  -  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  optimizer.getIterationCount();  }	  int    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    optimizer.getIterationCount();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
277	[BUG]  [BUGGY]  int  i  =  0,  bound1  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0,  bound1  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0,  bound1  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound2;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
278	[BUG]  [BUGGY]  for(int  i  =  0,  bound2  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  bound2  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  bound2  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[i]);  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound2;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
279	[BUG]  [BUGGY]  totalIterations+=  optimaValues.length  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  totalIterations+=  optimaValues.length  +  1;  [BUGGY]      totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	totalIterations+=  optimaValues.length  +  1;	  totalIterations+=    optima.length    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
280	[BUG]  [BUGGY]  int  count  =  optima.length  -  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  count  =  optima.length  -  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  count  =  optima.length  -  1;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	  int    count    =    optima.length;    i    <    count;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
281	[BUG]  [BUGGY]  int  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(min,  optima[i]);  }	  for(int    i    =    0,    len    =    optima.length;    i    <    len;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(min,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
282	[BUG]  [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i])||  Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i])||  Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0,  limit  =  optima.length;  i  <  limit;  ++i)  {  if(Double.isNaN(optima[i])||  Double.isNaN(optima[i]))  {  optima[i]  =  Math.min(max,  optima[	  for(int    i    =    0,    count    =    optima.length;    i    <    limit;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.min(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
283	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]  ==  null)  {  optima[i]  =  optimizer.getOptimization();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]  ==  null)  {  optima[i]  =  optimizer.getOptimization();  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	for(int  i  =  0;  i  <  count;  ++i)  {  if(optima[i]  ==  null)  {  optima[i]  =  optimizer.getOptimization();  }	  for(int    i    =    0;    i    <    maxEvaluations;    ++i)    {    if(optima[i]!=    null)    {    optima[i]    =    optimizer.getOptimization();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
284	[BUG]  [BUGGY]  int  i  =  0,  bound1  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  i  =  0,  bound1  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  i  =  0,  bound1  =  optima.length;  i  <  bound2;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  null;  }	  for(int    i    =    0,    count    =    optima.length;    i    <    bound1;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    null;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
285	[BUG]  [BUGGY]  int  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }      [BUGGY]  int  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }  [BUGGY]      totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  }  int  lastNaN  =  optima.length;  for  (int  i  =  0;  i  <  lastNaN;  ++i)  {  if  (Double.isNaN(optima[i]))  {  optima[i]  =  optima[--lastNaN];  optima[lastNaN  +  1]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	256	256	1	replace	int  len  =  optima.length;  i  <  len;  ++i)  {  if(Double.isNaN(optima[i]))  {  optima[i]  =  Math.max(max,  optima[i]);  }	  for(int    i    =    0,    len    =    optima.length;    i    <    len;    ++i)    {    if(Double.isNaN(optima[i]))    {    optima[i]    =    Math.max(max,    optima[i]);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
