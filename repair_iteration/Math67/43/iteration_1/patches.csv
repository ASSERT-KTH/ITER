bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	      optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
2	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1),  max);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1),  max);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1),  max);	      optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
3	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  max));	      optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
4	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2  -  i));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2  -  i));  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2  -  i));	      optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
5	[BUG]  [BUGGY]  optimizer.setMaximalIterationCount(i);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximalIterationCount(i);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximalIterationCount(i);	      optimizer.setMaximalIterationCount(maxIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
6	[BUG]  [BUGGY]  optimizer.setMaxIterationCount(i);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaxIterationCount(i);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaxIterationCount(i);	      optimizer.setMaximalIterationCount(maxIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
7	[BUG]  [BUGGY]  optimizer.setOptimizationCount(maxIterations);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setOptimizationCount(maxIterations);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setOptimizationCount(maxIterations);	      optimizer.setMaximalIterationCount(maxIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
8	[BUG]  [BUGGY]  optimizer.setMaximumIterationCount(i);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximumIterationCount(i);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximumIterationCount(i);	      optimizer.setMaximalIterationCount(maxIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
9	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  i));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  i));  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  i));	      optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
10	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	      optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
11	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max);	      optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
12	[BUG]  [BUGGY]  optimizer.setMaximalIterationCount(i  -  startIterations);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximalIterationCount(i  -  startIterations);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximalIterationCount(i  -  startIterations);	      optimizer.setMaximalIterationCount(maxIterations    -    startIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
13	[BUG]  [BUGGY]  optimizer.setMaximalIterationCount(startIterations  -  maxIterations);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximalIterationCount(startIterations  -  maxIterations);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximalIterationCount(startIterations  -  maxIterations);	      optimizer.setMaximalIterationCount(maxIterations    -    startIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
14	[BUG]  [BUGGY]  optimizer.setMaximalIterationCount(maxIterations  -  startNaN);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximalIterationCount(maxIterations  -  startNaN);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximalIterationCount(maxIterations  -  startNaN);	      optimizer.setMaximalIterationCount(maxIterations    -    startIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
15	[BUG]  [BUGGY]  optimizer.setMaximalIterationCount(maxIterations  -  starts);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximalIterationCount(maxIterations  -  starts);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximalIterationCount(maxIterations  -  starts);	      optimizer.setMaximalIterationCount(maxIterations    -    startIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
16	[BUG]  [BUGGY]  optimizer.setMaximalIterationCount(i  -  start);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximalIterationCount(i  -  start);  [BUGGY]    optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximalIterationCount(i  -  start);	  optimizer.setMaximalIterationCount(maxIterations    -    start);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
17	[BUG]  [BUGGY]  optimizer.setMaximalIterationCount(start  -  maxIterations);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximalIterationCount(start  -  maxIterations);  [BUGGY]    optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximalIterationCount(start  -  maxIterations);	  optimizer.setMaximalIterationCount(maxIterations    -    start);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
18	[BUG]  [BUGGY]  optimizer.setMaximalIterationCount(maxIterations  -  i);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximalIterationCount(maxIterations  -  i);  [BUGGY]    optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximalIterationCount(maxIterations  -  i);	  optimizer.setMaximalIterationCount(maxIterations    -    start);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
19	[BUG]  [BUGGY]  optimizer.setMaximalIterationCount(starts  -  maxIterations);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximalIterationCount(starts  -  maxIterations);  [BUGGY]    optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximalIterationCount(starts  -  maxIterations);	  optimizer.setMaximalIterationCount(maxIterations    -    start);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
20	[BUG]  [BUGGY]  optimizer.setMaximalIterationCount(starts  -  i);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximalIterationCount(starts  -  i);  [BUGGY]    optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximalIterationCount(starts  -  i);	  optimizer.setMaximalIterationCount(starts    -    totalIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
21	[BUG]  [BUGGY]  optimizer.setMaximalIterationCount(i  -  starts);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximalIterationCount(i  -  starts);  [BUGGY]    optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximalIterationCount(i  -  starts);	  optimizer.setMaximalIterationCount(starts    -    totalIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
22	[BUG]  [BUGGY]  optimizer.setMaximalIterationCount(starts  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximalIterationCount(starts  -  1);  [BUGGY]    optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximalIterationCount(starts  -  1);	  optimizer.setMaximalIterationCount(starts    -    totalIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
23	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimization();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optima[i]  =  optimizer.getOptimization();  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optima[i]  =  optimizer.getOptimization();	      optima[i]    =    optimizer.getFunctionValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
24	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  bound1));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  bound1));  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  bound1));	      optima[i]    =    optimizer.getFunctionValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
25	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize();  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optima[i]  =  optimizer.getOptimize();  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optima[i]  =  optimizer.getOptimize();	      optima[i]    =    optimizer.getFunctionValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
26	[BUG]  [BUGGY]  optimizer.setMaximalIterationCount(i  *  totalIterations);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximalIterationCount(i  *  totalIterations);  [BUGGY]    optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximalIterationCount(i  *  totalIterations);	  optimizer.setMaximalIterationCount(i    -    totalIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
27	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	      optimaValues[i]    =    optimizer.getOptimization(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
28	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  i));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  i));  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  i));	      optimaValues[i]    =    optimizer.getOptimization(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
29	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optima[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optima[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	      optimaValues[i]    =    optimizer.getOptimization(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
30	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));	      optimaValues[i]    =    optimizer.getOptimization(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
31	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimizer(f);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optima[i]  =  optimizer.getOptimizer(f);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optima[i]  =  optimizer.getOptimizer(f);	      optima[i]    =    optimizer.getOptimizer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
32	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimizer(f,  goalType);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optima[i]  =  optimizer.getOptimizer(f,  goalType);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optima[i]  =  optimizer.getOptimizer(f,  goalType);	      optima[i]    =    optimizer.getOptimizer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
33	[BUG]  [BUGGY]  optima[i]  =  optimizer.getRealOptimizer();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optima[i]  =  optimizer.getRealOptimizer();  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optima[i]  =  optimizer.getRealOptimizer();	      optima[i]    =    optimizer.getOptimizer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
34	[BUG]  [BUGGY]  optimizer.setOptimumIterationCount(i);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setOptimumIterationCount(i);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setOptimumIterationCount(i);	      optimizer.setMaximumIterationCount(maxIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
35	[BUG]  [BUGGY]  optimizer.setMaximumIterationCount(maxIterations  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximumIterationCount(maxIterations  -  1);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximumIterationCount(maxIterations  -  1);	      optimizer.setMaximumIterationCount(maxIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
36	[BUG]  [BUGGY]  optimizer.setMaximalIterationCount(i  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximalIterationCount(i  +  1);  [BUGGY]    optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximalIterationCount(i  +  1);	  optimizer.setMaximalIterationCount(i    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
37	[BUG]  [BUGGY]  optimizer.setMaximumIterationCount(i  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximumIterationCount(i  -  1);  [BUGGY]    optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximumIterationCount(i  -  1);	  optimizer.setMaximalIterationCount(i    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
38	[BUG]  [BUGGY]  optimizer.setMaximalIterationCount(maxIterations  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximalIterationCount(maxIterations  -  1);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximalIterationCount(maxIterations  -  1);	      optimizer.setMaximalIterationCount(maxIterations    -    maxIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
39	[BUG]  [BUGGY]  optimizer.setMaximumIterationCount(i  -  starts);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximumIterationCount(i  -  starts);  [BUGGY]    optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximumIterationCount(i  -  starts);	  optimizer.setMaximumIterationCount(i    -    totalIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
40	[BUG]  [BUGGY]  optimizer.setMaximumIterationCount(i  -  start);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximumIterationCount(i  -  start);  [BUGGY]    optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximumIterationCount(i  -  start);	  optimizer.setMaximumIterationCount(i    -    totalIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
41	[BUG]  [BUGGY]  optimizer.setMaximumIterationCount(i  /  totalIterations);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximumIterationCount(i  /  totalIterations);  [BUGGY]    optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximumIterationCount(i  /  totalIterations);	  optimizer.setMaximumIterationCount(i    -    totalIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
42	[BUG]  [BUGGY]  optimizer.setNumberOfEvaluations(i);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setNumberOfEvaluations(i);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setNumberOfEvaluations(i);	      optimizer.setMaximumIterationCount(maxIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
43	[BUG]  [BUGGY]  optimizer.setNegativeValues(i);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setNegativeValues(i);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setNegativeValues(i);	      optimizer.setMaximumIterationCount(maxIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
44	[BUG]  [BUGGY]  optimizer.setOptimizationCount(i);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setOptimizationCount(i);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setOptimizationCount(i);	      optimizer.setMaximumIterationCount(maxIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
45	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  bound1));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optima[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  bound1));  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optima[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  bound1));	      optima[i]    =    optimizer.getFunctionValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
46	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2  -  i),  max);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2  -  i),  max);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2  -  i),  max);	      optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
47	[BUG]  [BUGGY]  optimizer.setLastNaN(i);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setLastNaN(i);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setLastNaN(i);	      optimizer.setMaximalIterationCount(maxIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
48	[BUG]  [BUGGY]  optimizer.setMaximalIterationCount(i  -  maxIterations);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximalIterationCount(i  -  maxIterations);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximalIterationCount(i  -  maxIterations);	      optimizer.setMaximalIterationCount(maxIterations    -    maxIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
49	[BUG]  [BUGGY]  optimizer.setMaximumIterationCount(i  -  maxIterations);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximumIterationCount(i  -  maxIterations);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximumIterationCount(i  -  maxIterations);	      optimizer.setMaximalIterationCount(maxIterations    -    maxIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
50	[BUG]  [BUGGY]  optimizer.setMaxIterationCount(i  -  maxIterations);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaxIterationCount(i  -  maxIterations);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaxIterationCount(i  -  maxIterations);	      optimizer.setMaximalIterationCount(maxIterations    -    maxIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
51	[BUG]  [BUGGY]  optimizer.setMinimalIterationCount(i  -  start);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMinimalIterationCount(i  -  start);  [BUGGY]    optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMinimalIterationCount(i  -  start);	  optimizer.setMaximalIterationCount(starts    -    start);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
52	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));	      optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
53	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  0));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  0));  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  0));	      optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
54	[BUG]  [BUGGY]  optimizer.setMaximalIterationCount(i  /  totalIterations);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximalIterationCount(i  /  totalIterations);  [BUGGY]    optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximalIterationCount(i  /  totalIterations);	  optimizer.setMaximalIterationCount(i    -    totalIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
55	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  0));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  0));  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  0));	      optimaValues[i]    =    optimizer.getOptimization(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
56	[BUG]  [BUGGY]  optimizer.setOptimizationCount(i  -  startIterations);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setOptimizationCount(i  -  startIterations);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setOptimizationCount(i  -  startIterations);	      optimizer.setMaximalIterationCount(maxIterations    -    startIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
57	[BUG]  [BUGGY]  optimizer.setMaximalIterationCount(i  -  lastNaN);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximalIterationCount(i  -  lastNaN);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximalIterationCount(i  -  lastNaN);	      optimizer.setMaximalIterationCount(maxIterations    -    totalIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
58	[BUG]  [BUGGY]  optimizer.setInternalIterationCount(i);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setInternalIterationCount(i);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setInternalIterationCount(i);	      optimizer.setMaximalIterationCount(maxIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
59	[BUG]  [BUGGY]  optimizer.setMaximumIterationCount(maxEvaluations  -  totalIterations);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximumIterationCount(maxEvaluations  -  totalIterations);  [BUGGY]    optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximumIterationCount(maxEvaluations  -  totalIterations);	  optimizer.setMaximumIterationCount(i    -    totalIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
60	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.max(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.max(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.max(bound1,  bound2),  Math.max(bound2,  max));	      optimaValues[i]    =    optimizer.getOptimization(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
61	[BUG]  [BUGGY]  optimizer.setMaximalIterationCount(maxEvaluations  -  totalIterations);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximalIterationCount(maxEvaluations  -  totalIterations);  [BUGGY]    optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximalIterationCount(maxEvaluations  -  totalIterations);	  optimizer.setMaximalIterationCount(starts    -    totalIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
62	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.max(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.max(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.max(bound1,  bound2),  Math.max(bound2,  max));	      optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
63	[BUG]  [BUGGY]  optimizer.setMinimumIterationCount(maxIterations);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMinimumIterationCount(maxIterations);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMinimumIterationCount(maxIterations);	      optimizer.setMaximumIterationCount(maxIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
64	[BUG]  [BUGGY]  optimizer.setMaximumIterationCount(maxIterations  -  start);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximumIterationCount(maxIterations  -  start);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximumIterationCount(maxIterations  -  start);	      optimizer.setMaximumIterationCount(maxIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
65	[BUG]  [BUGGY]  optimizer.setMaximumIterationCount(maxIterations  -  starts);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximumIterationCount(maxIterations  -  starts);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximumIterationCount(maxIterations  -  starts);	      optimizer.setMaximumIterationCount(maxIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
66	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.max(bound1,  bound2),  Math.min(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.max(bound1,  bound2),  Math.min(bound2,  max));  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.max(bound1,  bound2),  Math.min(bound2,  max));	      optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
67	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  bound1));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  bound1));  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  bound1));	      optima[i]    =    optimizer.getFunctionValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
68	[BUG]  [BUGGY]  optimizer.setMaximumIterationCount(i  -  startIterations);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaximumIterationCount(i  -  startIterations);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaximumIterationCount(i  -  startIterations);	      optimizer.setMaximalIterationCount(maxIterations    -    startIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
69	[BUG]  [BUGGY]  optimizer.setMaxIterationCount(i  -  startIterations);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optima  =  new  double[starts];  optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {    [BUGGY]  optimizer.setMaxIterationCount(i  -  startIterations);  [BUGGY]    optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	optimizer.setMaxIterationCount(i  -  startIterations);	      optimizer.setMaximalIterationCount(maxIterations    -    startIterations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
