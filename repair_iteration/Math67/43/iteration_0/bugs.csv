bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
85	[BUG] [BUGGY] optimizer.setMaximalIterationCount(maxIterations - totalIterations); [FE] AssertionError [CONTEXT] optima = new double[starts]; optimaValues = new double[starts]; totalIterations= 0; totalEvaluations = 0;  for (int i = 0; i < starts; ++i) { try { [BUGGY] optimizer.setMaximalIterationCount(maxIterations - totalIterations); [BUGGY] optimizer.setMaxEvaluations(maxEvaluations - totalEvaluations); final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min); final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min); optima[i] = optimizer.optimize(f, goalType, Math.min(bound1, bound2), Math.max(bound1, bound2)); optimaValues[i] = optimizer.getFunctionValue(); } catch (FunctionEvaluationException fee) { optima[i] = Double.NaN; optimaValues[i] = Double.NaN; [CLASS] MultiStartUnivariateRealOptimizer [METHOD] optimize [RETURN_TYPE] double  UnivariateRealFunction f GoalType goalType final double min final double max [VARIABLES] boolean double[] optima optimaValues double bound1 bound2 currX currY mIX mIY max min prevY ConvergenceException ce UnivariateRealFunction f GoalType goalType UnivariateRealOptimizer optimizer FunctionEvaluationException fee long serialVersionUID int count i j lastNaN maxEvaluations maxIterations starts totalEvaluations totalIterations RandomGenerator generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	replace	
86	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] optima = new double[starts]; optimaValues = new double[starts]; totalIterations= 0; totalEvaluations = 0;  for (int i = 0; i < starts; ++i) { try { [BUGGY] [BUGGY] optimizer.setMaximalIterationCount(maxIterations - totalIterations); optimizer.setMaxEvaluations(maxEvaluations - totalEvaluations); final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min); final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min); optima[i] = optimizer.optimize(f, goalType, Math.min(bound1, bound2), Math.max(bound1, bound2)); optimaValues[i] = optimizer.getFunctionValue(); } catch (FunctionEvaluationException fee) { optima[i] = Double.NaN; optimaValues[i] = Double.NaN; [CLASS] MultiStartUnivariateRealOptimizer [METHOD] optimize [RETURN_TYPE] double  UnivariateRealFunction f GoalType goalType final double min final double max [VARIABLES] boolean double[] optima optimaValues double bound1 bound2 currX currY mIX mIY max min prevY ConvergenceException ce UnivariateRealFunction f GoalType goalType UnivariateRealOptimizer optimizer FunctionEvaluationException fee long serialVersionUID int count i j lastNaN maxEvaluations maxIterations starts totalEvaluations totalIterations RandomGenerator generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	240	240	1	add	
