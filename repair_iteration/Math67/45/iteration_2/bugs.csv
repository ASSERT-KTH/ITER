bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  j  =  optimiza.getInitialValue();  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  Integer  j  =  optimiza.getInitialValue();  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	Integer  j  =  optimiza.getInitialValue();	      Integer    j    =    optimizer.getInitialValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
2	[BUG]  [BUGGY]  Integer  j  =  generator.getInitialValue();  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  Integer  j  =  generator.getInitialValue();  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	Integer  j  =  generator.getInitialValue();	      Integer    j    =    optimizer.getInitialValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
3	[BUG]  [BUGGY]  Integer  j  =  optimizer.getInitialValue()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  Integer  j  =  optimizer.getInitialValue()  +  1;  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	Integer  j  =  optimizer.getInitialValue()  +  1;	      Integer    j    =    optimizer.getInitialValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
4	[BUG]  [BUGGY]  final  double  bound1  =(min  >=  0)?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  bound1  =(min  >=  0)?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  [BUGGY]    final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  bound1  =(min  >=  0)?  max  :  min  +  generator.nextDouble()  *  (max  -  min);	  final    double    bound1    =(i    >=    0)?    min    :    max    +    generator.nextDouble()    *    (max    -    min);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
5	[BUG]  [BUGGY]  final  double  bound1  =(min  <  0)?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  bound1  =(min  <  0)?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  [BUGGY]    final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  bound1  =(min  <  0)?  max  :  min  +  generator.nextDouble()  *  (max  -  min);	  final    double    bound1    =(i    <    0)?    min    :    max    +    generator.nextDouble()    *    (max    -    min);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
6	[BUG]  [BUGGY]  final  double  bound1  =(min  <  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  bound1  =(min  <  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);  [BUGGY]    final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  bound1  =(min  <  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);	  final    double    bound1    =(i    <    0)?    min    :    max    +    generator.nextDouble()    *    (max    -    min);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
7	[BUG]  [BUGGY]  final  double  min  =(min  <  0)?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  min  =(min  <  0)?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  min  =(min  <  0)?  min  :  min  +  generator.nextDouble()  *  (max  -  min);	      final    double    min    =(min    <    0)?    min    :    max    +    generator.nextDouble()    *    (max    -    min);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
8	[BUG]  [BUGGY]  final  double  min  =(min  ==  0)?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  min  =(min  ==  0)?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  min  =(min  ==  0)?  min  :  min  +  generator.nextDouble()  *  (max  -  min);	      final    double    min    =(min    <    0)?    min    :    max    +    generator.nextDouble()    *    (max    -    min);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
9	[BUG]  [BUGGY]  final  double  min  =(min  ==  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  min  =(min  ==  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  min  =(min  ==  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);	      final    double    min    =(min    <    0)?    min    :    max    +    generator.nextDouble()    *    (max    -    min);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
10	[BUG]  [BUGGY]  RandomGenerator  generator  =  optimizer.generateRandomGenerator();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  RandomGenerator  generator  =  optimizer.generateRandomGenerator();  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	RandomGenerator  generator  =  optimizer.generateRandomGenerator();	      RandomGenerator    generator    =    optimizer.getRandomGenerator();    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
11	[BUG]  [BUGGY]  RandomGenerator  generator  =  optimizer.getOptimizer();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  RandomGenerator  generator  =  optimizer.getOptimizer();  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	RandomGenerator  generator  =  optimizer.getOptimizer();	      RandomGenerator    generator    =    optimizer.getRandomGenerator();    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
12	[BUG]  [BUGGY]  RandomGenerator  generator  =  optimizer.getGenerator();  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  RandomGenerator  generator  =  optimizer.getGenerator();  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	RandomGenerator  generator  =  optimizer.getGenerator();	      RandomGenerator    generator    =    optimizer.getRandomGenerator();    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
13	[BUG]  [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	      optimaValues    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
14	[BUG]  [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  i));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  i));  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  i));	      optimaValues    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
15	[BUG]  [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max),  optimaValues);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max),  optimaValues);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max),  optimaValues);	      optimaValues    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
16	[BUG]  [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max);	      optimaValues    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
17	[BUG]  [BUGGY]  final  double  bound1  =(max  ==  0)?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  bound1  =(max  ==  0)?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  [BUGGY]    final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  bound1  =(max  ==  0)?  min  :  min  +  generator.nextDouble()  *  (max  -  min);	  final    double    bound1    =(min    ==    0)?    max    :    min    +    generator.nextDouble()    *    (max    -    min);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
18	[BUG]  [BUGGY]  final  double  bound1  =(i  ==  0)?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  bound1  =(i  ==  0)?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  [BUGGY]    final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  bound1  =(i  ==  0)?  max  :  min  +  generator.nextDouble()  *  (max  -  min);	  final    double    bound1    =(min    ==    0)?    max    :    min    +    generator.nextDouble()    *    (max    -    min);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
19	[BUG]  [BUGGY]  final  double  min  =  Math.min(min,  max);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  min  =  Math.min(min,  max);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  min  =  Math.min(min,  max);	      final    double    min    =    Math.min(starts,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
20	[BUG]  [BUGGY]  final  double  min  =  Math.min(max,  starts);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  min  =  Math.min(max,  starts);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  min  =  Math.min(max,  starts);	      final    double    min    =    Math.min(starts,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
21	[BUG]  [BUGGY]  final  double  min  =  Math.min(starts,  max  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  min  =  Math.min(starts,  max  -  1);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  min  =  Math.min(starts,  max  -  1);	      final    double    min    =    Math.min(starts,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
22	[BUG]  [BUGGY]  final  double  min  =  Math.min(starts,  max  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  min  =  Math.min(starts,  max  +  1);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  min  =  Math.min(starts,  max  +  1);	      final    double    min    =    Math.min(starts,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
23	[BUG]  [BUGGY]  final  double  min  =(min  >  0)?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  min  =(min  >  0)?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  min  =(min  >  0)?  min  :  min  +  generator.nextDouble()  *  (max  -  min);	      final    double    min    =(min    >    0)?    max    :    min    +    generator.nextDouble()    *    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
24	[BUG]  [BUGGY]  final  double  min  =(min  <  0)?  max  :  min  +  generator.nextDouble()  *  max);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  min  =(min  <  0)?  max  :  min  +  generator.nextDouble()  *  max);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  min  =(min  <  0)?  max  :  min  +  generator.nextDouble()  *  max);	      final    double    min    =(min    >    0)?    max    :    min    +    generator.nextDouble()    *    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
25	[BUG]  [BUGGY]  final  double  min  =(min  ==  0)?  max  :  min  +  generator.nextDouble()  *  max);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  min  =(min  ==  0)?  max  :  min  +  generator.nextDouble()  *  max);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  min  =(min  ==  0)?  max  :  min  +  generator.nextDouble()  *  max);	      final    double    min    =(min    >    0)?    max    :    min    +    generator.nextDouble()    *    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
26	[BUG]  [BUGGY]  final  double  min  =(max  >  0)?  min  :  min  +  generator.nextDouble()  *  max);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  min  =(max  >  0)?  min  :  min  +  generator.nextDouble()  *  max);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  min  =(max  >  0)?  min  :  min  +  generator.nextDouble()  *  max);	      final    double    min    =(min    >    0)?    max    :    min    +    generator.nextDouble()    *    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
27	[BUG]  [BUGGY]  final  double  bound1  =(min  ==  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  bound1  =(min  ==  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);  [BUGGY]    final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  bound1  =(min  ==  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);	  final    double    bound1    =(i    ==    0)?    min    :    max    +    generator.nextDouble()    *    (min    -    min);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
28	[BUG]  [BUGGY]  Integer  j  =  optimizer.getInitialSize()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  Integer  j  =  optimizer.getInitialSize()  +  1;  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	Integer  j  =  optimizer.getInitialSize()  +  1;	      Integer    j    =    optimizer.getInitialSize();    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
29	[BUG]  [BUGGY]  Integer  j  =  optimizer.getInitialSize()  *  max;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  Integer  j  =  optimizer.getInitialSize()  *  max;  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	Integer  j  =  optimizer.getInitialSize()  *  max;	      Integer    j    =    optimizer.getInitialSize();    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
30	[BUG]  [BUGGY]  Integer  j  =  optimizer.getMaximumSize();  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  Integer  j  =  optimizer.getMaximumSize();  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	Integer  j  =  optimizer.getMaximumSize();	      Integer    j    =    optimizer.getInitialSize();    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
31	[BUG]  [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));	      optimaValues    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
32	[BUG]  [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(starts,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(starts,  bound2),  Math.max(bound2,  max));  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(starts,  bound2),  Math.max(bound2,  max));	      optimaValues    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
33	[BUG]  [BUGGY]  Integer  j  =  generator.getIntValue();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  Integer  j  =  generator.getIntValue();  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	Integer  j  =  generator.getIntValue();	      Integer    j    =    optimizer.getIntValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
34	[BUG]  [BUGGY]  Integer  j  =  optimizer.getIntValue()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  Integer  j  =  optimizer.getIntValue()  +  1;  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	Integer  j  =  optimizer.getIntValue()  +  1;	      Integer    j    =    optimizer.getIntValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
35	[BUG]  [BUGGY]  Integer  j  =  optimiza.getIntValue();  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  Integer  j  =  optimiza.getIntValue();  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	Integer  j  =  optimiza.getIntValue();	      Integer    j    =    optimizer.getIntValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
36	[BUG]  [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2  -  min),  max);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2  -  min),  max);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2  -  min),  max);	      optimaValues    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2    -    min));    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
37	[BUG]  [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2  -  min),  optima);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2  -  min),  optima);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2  -  min),  optima);	      optimaValues    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2    -    min));    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
38	[BUG]  [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2  -  min),  optima[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2  -  min),  optima[i]);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2  -  min),  optima[i]);	      optimaValues    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2    -    min));    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
39	[BUG]  [BUGGY]  Integer  j  =  optimizer.getInitializingInteger(0);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  Integer  j  =  optimizer.getInitializingInteger(0);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	Integer  j  =  optimizer.getInitializingInteger(0);	      Integer    j    =    optimizer.getInitializingInteger();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
40	[BUG]  [BUGGY]  Integer  j  =  generator.getInitializingInteger();  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  Integer  j  =  generator.getInitializingInteger();  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	Integer  j  =  generator.getInitializingInteger();	      Integer    j    =    optimizer.getInitializingInteger();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
41	[BUG]  [BUGGY]  Integer  j  =  optimizer.getInitializingInteger(i);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  Integer  j  =  optimizer.getInitializingInteger(i);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	Integer  j  =  optimizer.getInitializingInteger(i);	      Integer    j    =    optimizer.getInitializingInteger();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
42	[BUG]  [BUGGY]  final  double  min  =(min  <  0)?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  min  =(min  <  0)?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  min  =(min  <  0)?  max  :  min  +  generator.nextDouble()  *  (max  -  min);	      final    double    min    =(min    >    0)?    max    :    min    +    generator.nextDouble()    *    (max    -    min);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
43	[BUG]  [BUGGY]  final  double  min  =(max  >  0)?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  min  =(max  >  0)?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  min  =(max  >  0)?  min  :  min  +  generator.nextDouble()  *  (max  -  min);	      final    double    min    =(min    >    0)?    max    :    min    +    generator.nextDouble()    *    (max    -    min);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
44	[BUG]  [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  0));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  0));  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  0));	      optimaValues    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound3));    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
45	[BUG]  [BUGGY]  final  double  min  =  Math.min(starts,  max  -  starts);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  min  =  Math.min(starts,  max  -  starts);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  min  =  Math.min(starts,  max  -  starts);	      final    double    min    =    Math.min(starts,    max);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
46	[BUG]  [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(starts,  bound2),  Math.max(bound2,  bound3));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(starts,  bound2),  Math.max(bound2,  bound3));  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(starts,  bound2),  Math.max(bound2,  bound3));	      optimaValues    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound3));    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
47	[BUG]  [BUGGY]  final  double  bound1  =(max  ==  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  bound1  =(max  ==  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);  [BUGGY]    final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  bound1  =(max  ==  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);	  final    double    bound1    =(i    ==    0)?    min    :    max    +    generator.nextDouble()    *    (max    -    min);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
48	[BUG]  [BUGGY]  Integer  j  =  optimizer.getInitialValue(i);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  Integer  j  =  optimizer.getInitialValue(i);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	Integer  j  =  optimizer.getInitialValue(i);	      Integer    j    =    optimizer.getInitialValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
49	[BUG]  [BUGGY]  Integer  j  =  optimizer.getNumberValue();  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  Integer  j  =  optimizer.getNumberValue();  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	Integer  j  =  optimizer.getNumberValue();	      Integer    j    =    optimizer.getInitialValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
50	[BUG]  [BUGGY]  final  double  bound1  =(max  >=  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  bound1  =(max  >=  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);  [BUGGY]    final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  bound1  =(max  >=  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);	  final    double    bound1    =(i    >=    0)?    min    :    max    +    generator.nextDouble()    *    (max    -    min);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
51	[BUG]  [BUGGY]  final  double  min  =(min  ==  0)?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  min  =(min  ==  0)?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  min  =(min  ==  0)?  max  :  min  +  generator.nextDouble()  *  (max  -  min);	      final    double    min    =(min    >    0)?    max    :    min    +    generator.nextDouble()    *    (max    -    min);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
52	[BUG]  [BUGGY]  final  double  min  =(max  <  0)?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  min  =(max  <  0)?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  min  =(max  <  0)?  min  :  min  +  generator.nextDouble()  *  (max  -  min);	      final    double    min    =(min    <    0)?    min    :    max    +    generator.nextDouble()    *    (max    -    min);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
53	[BUG]  [BUGGY]  Integer  j  =  optimizer.getInitializingDegree();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  Integer  j  =  optimizer.getInitializingDegree();  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	Integer  j  =  optimizer.getInitializingDegree();	      Integer    j    =    optimizer.getInitializingInteger();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
54	[BUG]  [BUGGY]  RandomGenerator  generator  =  optimizer.getVarGenerator();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  RandomGenerator  generator  =  optimizer.getVarGenerator();  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	RandomGenerator  generator  =  optimizer.getVarGenerator();	      RandomGenerator    generator    =    optimizer.getRandomGenerator();    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
55	[BUG]  [BUGGY]  RandomGenerator  generator  =  optimizer.getRandomGenerator(f);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  RandomGenerator  generator  =  optimizer.getRandomGenerator(f);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	RandomGenerator  generator  =  optimizer.getRandomGenerator(f);	      RandomGenerator    generator    =    optimizer.getRandomGenerator();    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
56	[BUG]  [BUGGY]  final  double  bound1  =(max  <  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  bound1  =(max  <  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);  [BUGGY]    final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  bound1  =(max  <  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);	  final    double    bound1    =(i    <    0)?    min    :    max    +    generator.nextDouble()    *    (max    -    min);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
57	[BUG]  [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2  -  min),  optimaValues);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2  -  min),  optimaValues);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2  -  min),  optimaValues);	      optimaValues    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2    -    min));    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
58	[BUG]  [BUGGY]  Integer  j  =  optimizer.getIntValue(i);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  Integer  j  =  optimizer.getIntValue(i);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	Integer  j  =  optimizer.getIntValue(i);	      Integer    j    =    optimizer.getIntValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
59	[BUG]  [BUGGY]  Integer  j  =  optimizer.getLongValue();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  Integer  j  =  optimizer.getLongValue();  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	Integer  j  =  optimizer.getLongValue();	      Integer    j    =    optimizer.getIntValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
60	[BUG]  [BUGGY]  final  double  bound1  =(min  >=  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  bound1  =(min  >=  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);  [BUGGY]    final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  bound1  =(min  >=  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);	  final    double    bound1    =(i    >=    0)?    min    :    max    +    generator.nextDouble()    *    (max    -    min);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
61	[BUG]  [BUGGY]  Integer  j  =  generator.getInitialSize();  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  Integer  j  =  generator.getInitialSize();  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	Integer  j  =  generator.getInitialSize();	      Integer    j    =    optimizer.getInitialSize();    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
62	[BUG]  [BUGGY]  Integer  j  =  optimizer.getInitialSize()  +  starts;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  Integer  j  =  optimizer.getInitialSize()  +  starts;  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	Integer  j  =  optimizer.getInitialSize()  +  starts;	      Integer    j    =    optimizer.getInitialSize();    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
63	[BUG]  [BUGGY]  RandomGenerator  generator  =  optimizer.getGandomGenerator();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  RandomGenerator  generator  =  optimizer.getGandomGenerator();  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	RandomGenerator  generator  =  optimizer.getGandomGenerator();	      RandomGenerator    generator    =    optimizer.getRandomGenerator();    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
64	[BUG]  [BUGGY]  Integer  j  =  optimizationr.getInitialValue();  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  Integer  j  =  optimizationr.getInitialValue();  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	Integer  j  =  optimizationr.getInitialValue();	      Integer    j    =    optimizer.getInitialValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
65	[BUG]  [BUGGY]  Integer  j  =  optimizer.getImplicitReturn();  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  Integer  j  =  optimizer.getImplicitReturn();  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	Integer  j  =  optimizer.getImplicitReturn();	      Integer    j    =    optimizer.getInitialValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
66	[BUG]  [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max  -  min));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max  -  min));  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max  -  min));	      optimaValues    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2    -    min));    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
67	[BUG]  [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.max(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.max(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	optimaValues  =  optimizer.getOptimize(f,  goalType,  Math.max(bound1,  bound2),  Math.max(bound2,  max));	      optimaValues    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
68	[BUG]  [BUGGY]  final  double  min  =(max  <  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  final  double  min  =(max  <  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	final  double  min  =(max  <  0)?  min  :  max  +  generator.nextDouble()  *  (max  -  min);	      final    double    min    =(min    <    0)?    min    :    max    +    generator.nextDouble()    *    (max    -    min);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
69	[BUG]  [BUGGY]  Integer  j  =  optimizer.getInitializingReal();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    optimaValues  =  new  double[starts];  totalIterations=  0;  totalEvaluations  =  0;  for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);    [BUGGY]  Integer  j  =  optimizer.getInitializingReal();  [BUGGY]    final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));  optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	242	242	1	replace	Integer  j  =  optimizer.getInitializingReal();	      Integer    j    =    optimizer.getInitializingInteger();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
