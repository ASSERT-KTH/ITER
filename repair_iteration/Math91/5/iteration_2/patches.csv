bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  den  =  getNumber()  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  Integer  den  =  getNumber()  +  1;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	Integer  den  =  getNumber()  +  1;	  Integer    den    =    getNumber();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2	[BUG]  [BUGGY]  Integer  den  =  getNumber()  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  Integer  den  =  getNumber()  -  1;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	Integer  den  =  getNumber()  -  1;	  Integer    den    =    getNumber();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
3	[BUG]  [BUGGY]  Integer  den  =  getDenominator();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  Integer  den  =  getDenominator();  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	Integer  den  =  getDenominator();	  Integer    den    =    getNumber();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  Integer  den  =  getNumber(0);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  Integer  den  =  getNumber(0);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	Integer  den  =  getNumber(0);	  Integer    den    =    getNumber();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
5	[BUG]  [BUGGY]  int  den  =  getNumber().intValue()  /  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  getNumber().intValue()  /  1;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  getNumber().intValue()  /  1;	  int    den    =    getNumber().intValue()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
6	[BUG]  [BUGGY]  super(num,  den  -  1,  numerator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den  -  1,  numerator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den  -  1,  numerator);	  super(num,    den    -    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
7	[BUG]  [BUGGY]  super(num,  den  -  2);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den  -  2);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den  -  2);	  super(num,    den    -    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
8	[BUG]  [BUGGY]  super(num,  den,  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den,  1);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den,  1);	  super(num,    den,    0);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
9	[BUG]  [BUGGY]  super(num,  den,  0,  numerator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den,  0,  numerator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den,  0,  numerator);	  super(num,    den,    0);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
10	[BUG]  [BUGGY]  super(num,  den,  0,  den);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den,  0,  den);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den,  0,  den);	  super(num,    den,    0);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
11	[BUG]  [BUGGY]  Integer  den  =  getNumerator();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  Integer  den  =  getNumerator();  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	Integer  den  =  getNumerator();	  int    den    =    getNumerator();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
12	[BUG]  [BUGGY]  int  den  =  num.intValue()  *  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  num.intValue()  *  1;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  num.intValue()  *  1;	  int    den    =    num.intValue()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
13	[BUG]  [BUGGY]  int  den  =  Math.max(num,  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  Math.max(num,  denominator);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  Math.max(num,  denominator);	  int    den    =    Math.max(num,    den);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
14	[BUG]  [BUGGY]  int  den  =  Math.max(num,  des);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  Math.max(num,  des);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  Math.max(num,  des);	  int    den    =    Math.max(num,    den);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
15	[BUG]  [BUGGY]  num  =  Math.min(num,  den  +  1,  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  num  =  Math.min(num,  den  +  1,  denominator);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	num  =  Math.min(num,  den  +  1,  denominator);	  num    =    Math.min(num,    den    +    1,    den);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
16	[BUG]  [BUGGY]  num  =  Math.max(num,  den  +  1,  den);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  num  =  Math.max(num,  den  +  1,  den);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	num  =  Math.max(num,  den  +  1,  den);	  num    =    Math.min(num,    den    +    1,    den);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
17	[BUG]  [BUGGY]  num  =  Math.min(num,  den  +  1,  des);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  num  =  Math.min(num,  den  +  1,  des);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	num  =  Math.min(num,  den  +  1,  des);	  num    =    Math.min(num,    den    +    1,    den);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
18	[BUG]  [BUGGY]  this.num  =  num  +  2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this.num  =  num  +  2;  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this.num  =  num  +  2;	  this.num    =    num    +    1;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
19	[BUG]  [BUGGY]  this.num  =  num  +  1,  den;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this.num  =  num  +  1,  den;  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this.num  =  num  +  1,  den;	  this.num    =    num    +    1;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
20	[BUG]  [BUGGY]  int  den  =  getNumber()  /  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  getNumber()  /  1;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  getNumber()  /  1;	  int    den    =    getNumber()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
21	[BUG]  [BUGGY]  super(num,  den,  maxDenominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den,  maxDenominator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den,  maxDenominator);	  super(num,    den,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
22	[BUG]  [BUGGY]  super(num,  den,  numerator,  maxDenominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den,  numerator,  maxDenominator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den,  numerator,  maxDenominator);	  super(num,    den,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
23	[BUG]  [BUGGY]  super(num,  den,  numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den,  numerator,  denominator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den,  numerator,  denominator);	  super(num,    den,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
24	[BUG]  [BUGGY]  this.num  =  num  +  den  *  den;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this.num  =  num  +  den  *  den;  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this.num  =  num  +  den  *  den;	  this.num    =    num    +    den;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
25	[BUG]  [BUGGY]  this.num  =  num  +  den  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this.num  =  num  +  den  +  1;  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this.num  =  num  +  den  +  1;	  this.num    =    num    +    den;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
26	[BUG]  [BUGGY]  this.num  =  num  +  den  *  denominator;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this.num  =  num  +  den  *  denominator;  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this.num  =  num  +  den  *  denominator;	  this.num    =    num    +    den;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
27	[BUG]  [BUGGY]  this(num,  den,  MINUS_ONE);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  den,  MINUS_ONE);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  den,  MINUS_ONE);	  this(num,    den,    ZERO);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
28	[BUG]  [BUGGY]  this(num,  den,  ZERO,  numerator);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  den,  ZERO,  numerator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  den,  ZERO,  numerator);	  this(num,    den,    ZERO);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
29	[BUG]  [BUGGY]  this(num,  den,  TWO);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  den,  TWO);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  den,  TWO);	  this(num,    den,    ZERO);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
30	[BUG]  [BUGGY]  this(num,  den,  ZERO,  denominator);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  den,  ZERO,  denominator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  den,  ZERO,  denominator);	  this(num,    den,    ZERO);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
31	[BUG]  [BUGGY]  this(num,  new  int[den  +  1],  numerator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  +  1],  numerator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  +  1],  numerator);	  this(num,    new    int[den    +    1]);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
32	[BUG]  [BUGGY]  this(num,  new  int[den  +  2]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  +  2]);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  +  2]);	  this(num,    new    int[den    +    1]);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
33	[BUG]  [BUGGY]  int  den  =  Math.min(num,  des  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  Math.min(num,  des  -  1);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  Math.min(num,  des  -  1);	  int    den    =    Math.min(num,    des);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
34	[BUG]  [BUGGY]  int  den  =  Math.min(num,  des  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  Math.min(num,  des  +  1);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  Math.min(num,  des  +  1);	  int    den    =    Math.min(num,    des);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
35	[BUG]  [BUGGY]  this(num,  new  int[den  -  1],  numerator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  -  1],  numerator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  -  1],  numerator);	  this(num,    new    int[den    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
36	[BUG]  [BUGGY]  this(num,  new  int[den  -  1],  den);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  -  1],  den);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  -  1],  den);	  this(num,    new    int[den    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
37	[BUG]  [BUGGY]  this(num,  new  int[den  -  1],  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  -  1],  false);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  -  1],  false);	  this(num,    new    int[den    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
38	[BUG]  [BUGGY]  int  den  =  getDenied()  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  getDenied()  -  1;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  getDenied()  -  1;	  int    den    =    getDenied();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
39	[BUG]  [BUGGY]  Integer  den  =  getDenied();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  Integer  den  =  getDenied();  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	Integer  den  =  getDenied();	  int    den    =    getDenied();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
40	[BUG]  [BUGGY]  int  den  =  getDenied()  -  num;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  getDenied()  -  num;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  getDenied()  -  num;	  int    den    =    getDenied();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
41	[BUG]  [BUGGY]  int  den  =  getNumber().length();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  getNumber().length();  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  getNumber().length();	  int    den    =    getNumber().longValue();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
42	[BUG]  [BUGGY]  int  den  =  num.intValue()  *  den;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  num.intValue()  *  den;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  num.intValue()  *  den;	  int    den    =    num.intValue()    +    den;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
43	[BUG]  [BUGGY]  int  den  =  num.intValue()  +  den  *  2;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  num.intValue()  +  den  *  2;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  num.intValue()  +  den  *  2;	  int    den    =    num.intValue()    +    den;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
44	[BUG]  [BUGGY]  int  den  =  num.intValue()  +  den  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  num.intValue()  +  den  +  1;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  num.intValue()  +  den  +  1;	  int    den    =    num.intValue()    +    den;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
45	[BUG]  [BUGGY]  this(num,  n,  den);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  n,  den);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  n,  den);	  this(num,    numerator,    den);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
46	[BUG]  [BUGGY]  this(num,  numerator,  den,  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  numerator,  den,  denominator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  numerator,  den,  denominator);	  this(num,    numerator,    den);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
47	[BUG]  [BUGGY]  num  =  Math.max(num,  den  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  num  =  Math.max(num,  den  +  1);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	num  =  Math.max(num,  den  +  1);	  num    =    Math.max(num,    den);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
48	[BUG]  [BUGGY]  num  =  Math.max(num,  den,  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  num  =  Math.max(num,  den,  denominator);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	num  =  Math.max(num,  den,  denominator);	  num    =    Math.max(num,    den);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
49	[BUG]  [BUGGY]  Integer  den  =  getNumber().doubleValue();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  Integer  den  =  getNumber().doubleValue();  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	Integer  den  =  getNumber().doubleValue();	  int    den    =    getNumber().doubleValue()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
50	[BUG]  [BUGGY]  num  =  Math.min(num,  den  *  den  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  num  =  Math.min(num,  den  *  den  +  1);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	num  =  Math.min(num,  den  *  den  +  1);	  num    =    Math.min(num,    den    +    1);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
51	[BUG]  [BUGGY]  n  =  num.intValue()  +  den;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  n  =  num.intValue()  +  den;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	n  =  num.intValue()  +  den;	  n    =    num.intValue();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
52	[BUG]  [BUGGY]  n  =  num.doubleValue();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  n  =  num.doubleValue();  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	n  =  num.doubleValue();	  n    =    num.intValue();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
53	[BUG]  [BUGGY]  n  =  num.intValue()  *  den;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  n  =  num.intValue()  *  den;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	n  =  num.intValue()  *  den;	  n    =    num.intValue();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
54	[BUG]  [BUGGY]  int  den  =  getDenominator()  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  getDenominator()  -  1;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  getDenominator()  -  1;	  int    den    =    getNumber()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
55	[BUG]  [BUGGY]  int  den  =  getNumber().denominator()  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  getNumber().denominator()  -  1;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  getNumber().denominator()  -  1;	  int    den    =    getNumber().denominator();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
56	[BUG]  [BUGGY]  int  den  =  getNumber().denominator()  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  getNumber().denominator()  +  1;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  getNumber().denominator()  +  1;	  int    den    =    getNumber().denominator();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
57	[BUG]  [BUGGY]  Integer  den  =  getNumber().denominator();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  Integer  den  =  getNumber().denominator();  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	Integer  den  =  getNumber().denominator();	  int    den    =    getNumber().denominator();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
58	[BUG]  [BUGGY]  super(num,  den,  MINUS_ONE);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den,  MINUS_ONE);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den,  MINUS_ONE);	  super(num,    den,    ZERO);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
59	[BUG]  [BUGGY]  super(num,  den,  TWO);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den,  TWO);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den,  TWO);	  super(num,    den,    ZERO);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
60	[BUG]  [BUGGY]  super(num,  den,  10);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den,  10);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den,  10);	  super(num,    den,    ZERO);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
61	[BUG]  [BUGGY]  int  den  =  getNegativeDenominator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  getNegativeDenominator();  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  getNegativeDenominator();	  int    den    =    getDenominator();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
62	[BUG]  [BUGGY]  int  den  =  getNumDenominator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  getNumDenominator();  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  getNumDenominator();	  int    den    =    getDenominator();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
63	[BUG]  [BUGGY]  super(num,  den  +  1,  numerator);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den  +  1,  numerator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den  +  1,  numerator);	  super(num,    den    +    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
64	[BUG]  [BUGGY]  super(num,  den  +  2);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den  +  2);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den  +  2);	  super(num,    den    +    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
65	[BUG]  [BUGGY]  int  den  =  getNumber().doubleValue()  /  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  getNumber().doubleValue()  /  1;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  getNumber().doubleValue()  /  1;	  int    den    =    getNumber().doubleValue()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
66	[BUG]  [BUGGY]  super(num,  n);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  n);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  n);	  super(num,    Den);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
67	[BUG]  [BUGGY]  super(num,  Den  +  den);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  Den  +  den);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  Den  +  den);	  super(num,    Den);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
68	[BUG]  [BUGGY]  float  den  =  getNumber().floatValue();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  float  den  =  getNumber().floatValue();  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	float  den  =  getNumber().floatValue();	  int    den    =    getNumber().floatValue();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
69	[BUG]  [BUGGY]  int  den  =  getNumber().floatValue()  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  getNumber().floatValue()  +  1;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  getNumber().floatValue()  +  1;	  int    den    =    getNumber().floatValue();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
70	[BUG]  [BUGGY]  this(num,  new  int[den  -  1,  ZERO);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  -  1,  ZERO);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  -  1,  ZERO);	  this(num,    new    int[den],    ZERO);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
71	[BUG]  [BUGGY]  this(num,  new  int[den  +  1,  ZERO);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  +  1,  ZERO);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  +  1,  ZERO);	  this(num,    new    int[den],    ZERO);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
72	[BUG]  [BUGGY]  this(num,  new  int[den  +  1],  ZERO);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  +  1],  ZERO);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  +  1],  ZERO);	  this(num,    new    int[den],    ZERO);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
73	[BUG]  [BUGGY]  this(num,  new  int[den],  0,  den);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den],  0,  den);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den],  0,  den);	  this(num,    new    int[den],    ZERO);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
74	[BUG]  [BUGGY]  this(num,  new  int[den  -  1,  den);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  -  1,  den);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  -  1,  den);	  this(num,    new    int[den],    den);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
75	[BUG]  [BUGGY]  this(num,  new  int[den  +  1,  den);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  +  1,  den);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  +  1,  den);	  this(num,    new    int[den],    den);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
76	[BUG]  [BUGGY]  this(num,  new  int[den],  den,  numerator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den],  den,  numerator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den],  den,  numerator);	  this(num,    new    int[den],    den);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
77	[BUG]  [BUGGY]  this(num,  new  int[den  +  1],  den);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  +  1],  den);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  +  1],  den);	  this(num,    new    int[den],    den);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
78	[BUG]  [BUGGY]  super(num,  den  +  1,  n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den  +  1,  n);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den  +  1,  n);	  super(num,    den    +    1,    den);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
79	[BUG]  [BUGGY]  super(num,  n  +  1,  den);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  n  +  1,  den);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  n  +  1,  den);	  super(num,    den    +    1,    den);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
80	[BUG]  [BUGGY]  super(num,  num  +  1,  den);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  num  +  1,  den);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  num  +  1,  den);	  super(num,    den    +    1,    den);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
81	[BUG]  [BUGGY]  num  =  Math.min(num,  des);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  num  =  Math.min(num,  des);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	num  =  Math.min(num,  des);	  num    =    Math.min(den,    num);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
82	[BUG]  [BUGGY]  this(num,  0,  numerator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  0,  numerator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  0,  numerator);	  this(num,    0,    den);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
83	[BUG]  [BUGGY]  this(num,  0,  num,  den);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  0,  num,  den);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  0,  num,  den);	  this(num,    0,    den);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
84	[BUG]  [BUGGY]  this(num,  0,  den,  numerator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  0,  den,  numerator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  0,  den,  numerator);	  this(num,    0,    den);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
85	[BUG]  [BUGGY]  this(num,  0,  den,  denominator);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  0,  den,  denominator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  0,  den,  denominator);	  this(num,    0,    den);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
86	[BUG]  [BUGGY]  int  den  =  Math.min(num,  num  +  1,  den);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  Math.min(num,  num  +  1,  den);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  Math.min(num,  num  +  1,  den);	  int    den    =    Math.min(den,    num    +    1,    den);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
87	[BUG]  [BUGGY]  int  den  =  Math.min(num,  den  +  1,  den);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  Math.min(num,  den  +  1,  den);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  Math.min(num,  den  +  1,  den);	  int    den    =    Math.min(den,    num    +    1,    den);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
88	[BUG]  [BUGGY]  int  den  =  Math.min(den,  num  +  1,  numerator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  Math.min(den,  num  +  1,  numerator);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  Math.min(den,  num  +  1,  numerator);	  int    den    =    Math.min(den,    num    +    1,    den);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
89	[BUG]  [BUGGY]  int  den  =  Math.min(num,  des  +  1,  den);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  Math.min(num,  des  +  1,  den);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  Math.min(num,  des  +  1,  den);	  int    den    =    Math.min(den,    num    +    1,    den);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
90	[BUG]  [BUGGY]  super(num,  den,  2.0f);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den,  2.0f);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den,  2.0f);	  super(num,    den,    0.5f);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
91	[BUG]  [BUGGY]  super(num,  den,  0.01f);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den,  0.01f);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den,  0.01f);	  super(num,    den,    0.5f);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
92	[BUG]  [BUGGY]  super(num,  den,  0.25f);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den,  0.25f);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den,  0.25f);	  super(num,    den,    0.5f);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
93	[BUG]  [BUGGY]  this(num,  den,  0,  numerator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  den,  0,  numerator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  den,  0,  numerator);	  this(num,    den,    0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
94	[BUG]  [BUGGY]  this(num,  den,  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  den,  1);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  den,  1);	  this(num,    den,    0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
95	[BUG]  [BUGGY]  this(num,  den,  0,  den);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  den,  0,  den);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  den,  0,  den);	  this(num,    den,    0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
96	[BUG]  [BUGGY]  this.num  =  num,  den  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this.num  =  num,  den  +  1;  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this.num  =  num,  den  +  1;	  this.num    =    num,    den;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
97	[BUG]  [BUGGY]  this.num  =  num,  den  +  den;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this.num  =  num,  den  +  den;  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this.num  =  num,  den  +  den;	  this.num    =    num,    den;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
98	[BUG]  [BUGGY]  int  den  =  this.num.intValue()  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  this.num.intValue()  -  1;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  this.num.intValue()  -  1;	  int    den    =    this.num.intValue();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
99	[BUG]  [BUGGY]  int  den  =  this.num.intValue()  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  this.num.intValue()  +  1;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  this.num.intValue()  +  1;	  int    den    =    this.num.intValue();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
100	[BUG]  [BUGGY]  double  den  =  num.intValue();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  double  den  =  num.intValue();  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	double  den  =  num.intValue();	  float    den    =    num.intValue();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
101	[BUG]  [BUGGY]  long  den  =  num.intValue();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  long  den  =  num.intValue();  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	long  den  =  num.intValue();	  float    den    =    num.intValue();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
102	[BUG]  [BUGGY]  float  den  =  num.doubleValue();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  float  den  =  num.doubleValue();  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	float  den  =  num.doubleValue();	  float    den    =    num.intValue();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
103	[BUG]  [BUGGY]  this(num,  new  int[den  -  den  +  1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  -  den  +  1]);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  -  den  +  1]);	  this(num,    new    int[den    -    den]);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
104	[BUG]  [BUGGY]  this(num,  new  int[den  -  1,  den]);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  -  1,  den]);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  -  1,  den]);	  this(num,    new    int[den    -    den]);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
105	[BUG]  [BUGGY]  this.num  =  num  *  den  +  den;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this.num  =  num  *  den  +  den;  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this.num  =  num  *  den  +  den;	  this.num    =    num    *    den;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
106	[BUG]  [BUGGY]  this.num  =  num  *  den  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this.num  =  num  *  den  +  1;  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this.num  =  num  *  den  +  1;	  this.num    =    num    *    den;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
107	[BUG]  [BUGGY]  this(num,  n,  numerator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  n,  numerator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  n,  numerator);	  this(num,    den,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
108	[BUG]  [BUGGY]  this(num,  den,  numerator,  maxDenominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  den,  numerator,  maxDenominator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  den,  numerator,  maxDenominator);	  this(num,    den,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
109	[BUG]  [BUGGY]  this(num,  den,  maxDenominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  den,  maxDenominator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  den,  maxDenominator);	  this(num,    den,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
110	[BUG]  [BUGGY]  int  den  =  Math.min(num,  den  *  den  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  Math.min(num,  den  *  den  +  1);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  Math.min(num,  den  *  den  +  1);	  int    den    =    Math.min(num,    den    +    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
111	[BUG]  [BUGGY]  int  den  =  Math.min(num,  den  +  1,  numerator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  Math.min(num,  den  +  1,  numerator);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  Math.min(num,  den  +  1,  numerator);	  int    den    =    Math.min(num,    den    +    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
112	[BUG]  [BUGGY]  this(num,  new  int[den  *  2]);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  *  2]);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  *  2]);	  this(num,    new    int[den    *    den]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
113	[BUG]  [BUGGY]  this(num,  new  int[den  *  2,  den]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  *  2,  den]);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  *  2,  den]);	  this(num,    new    int[den    *    den]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
114	[BUG]  [BUGGY]  this(num,  new  int[den  *  1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  *  1]);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  *  1]);	  this(num,    new    int[den    *    den]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
115	[BUG]  [BUGGY]  this(num,  new  int[den  *  1,  den]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  *  1,  den]);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  *  1,  den]);	  this(num,    new    int[den    *    den]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
116	[BUG]  [BUGGY]  this(num,  n,  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  n,  denominator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  n,  denominator);	  this(num,    den,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
117	[BUG]  [BUGGY]  this(num,  new  int[den  +  den  -  1]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  +  den  -  1]);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  +  den  -  1]);	  this(num,    new    int[den    +    den]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
118	[BUG]  [BUGGY]  super(num  +  den,  den);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num  +  den,  den);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num  +  den,  den);	  super(num    +    den);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
119	[BUG]  [BUGGY]  super(num  +  den,  numerator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num  +  den,  numerator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num  +  den,  numerator);	  super(num    +    den);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
120	[BUG]  [BUGGY]  super(num  +  den,  des);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num  +  den,  des);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num  +  den,  des);	  super(num    +    den);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
121	[BUG]  [BUGGY]  int  den  =  Math.max(num,  den  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  Math.max(num,  den  +  1);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  Math.max(num,  den  +  1);	  int    den    =    Math.min(den,    num    +    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
122	[BUG]  [BUGGY]  super(num,  n,  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  n,  denominator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  n,  denominator);	  super(num,    den,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
123	[BUG]  [BUGGY]  super(num,  den,  zero);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den,  zero);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den,  zero);	  super(num,    den,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
124	[BUG]  [BUGGY]  int  den  =  getNumber().denominator().intValue();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  getNumber().denominator().intValue();  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  getNumber().denominator().intValue();	  int    den    =    getNumber().intValue()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
125	[BUG]  [BUGGY]  Integer  den  =  getNumber().intValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  Integer  den  =  getNumber().intValue()  +  1;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	Integer  den  =  getNumber().intValue()  +  1;	  Integer    den    =    getNumber().intValue();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
126	[BUG]  [BUGGY]  Integer  den  =  getNumber().intValue()  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  Integer  den  =  getNumber().intValue()  -  1;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	Integer  den  =  getNumber().intValue()  -  1;	  Integer    den    =    getNumber().intValue();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
127	[BUG]  [BUGGY]  Integer  den  =  getNumber().intValue()  *  num;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  Integer  den  =  getNumber().intValue()  *  num;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	Integer  den  =  getNumber().intValue()  *  num;	  Integer    den    =    getNumber().intValue();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
128	[BUG]  [BUGGY]  double  den  =  Math.min(num,  den);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  double  den  =  Math.min(num,  den);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	double  den  =  Math.min(num,  den);	  float    den    =    Math.min(num,    den);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
129	[BUG]  [BUGGY]  float  den  =  Math.min(den,  num);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  float  den  =  Math.min(den,  num);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	float  den  =  Math.min(den,  num);	  float    den    =    Math.min(num,    den);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
130	[BUG]  [BUGGY]  float  den  =  Math.max(num,  den);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  float  den  =  Math.max(num,  den);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	float  den  =  Math.max(num,  den);	  float    den    =    Math.min(num,    den);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
131	[BUG]  [BUGGY]  int  den  =  Math.min(den,  num  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  Math.min(den,  num  -  1);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  Math.min(den,  num  -  1);	  int    den    =    Math.min(num,    den    -    1);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
132	[BUG]  [BUGGY]  int  den  =  Math.min(num,  den  *  den  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  Math.min(num,  den  *  den  -  1);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  Math.min(num,  den  *  den  -  1);	  int    den    =    Math.min(num,    den    -    1);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
133	[BUG]  [BUGGY]  int  den  =  Math.max(num,  den  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  Math.max(num,  den  -  1);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  Math.max(num,  den  -  1);	  int    den    =    Math.min(num,    den    -    1);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
134	[BUG]  [BUGGY]  super(num,  den,  0.5f,  0.5f);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den,  0.5f,  0.5f);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den,  0.5f,  0.5f);	  super(num,    den,    0.5f);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
135	[BUG]  [BUGGY]  this(num,  new  int[den  *  4]);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  *  4]);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  *  4]);	  this(num,    new    int[den    *    den]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
136	[BUG]  [BUGGY]  int  den  =  Math.min(den,  num  +  1,  den  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  Math.min(den,  num  +  1,  den  +  1);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  Math.min(den,  num  +  1,  den  +  1);	  int    den    =    Math.min(den,    num    +    1,    den);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
137	[BUG]  [BUGGY]  int  den  =  Math.max(den,  num);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  Math.max(den,  num);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  Math.max(den,  num);	  int    den    =    Math.max(num,    den);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
138	[BUG]  [BUGGY]  num  =  Math.min(num,  den  *  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  num  =  Math.min(num,  den  *  2);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	num  =  Math.min(num,  den  *  2);	  num    =    Math.min(num,    den    +    1);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
139	[BUG]  [BUGGY]  this(num,  0,  den,  ZERO);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  0,  den,  ZERO);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  0,  den,  ZERO);	  this(num,    0,    den);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
140	[BUG]  [BUGGY]  this(num,  0,  den,  0);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  0,  den,  0);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  0,  den,  0);	  this(num,    0,    den);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
141	[BUG]  [BUGGY]  num  =  Math.min(num,  den  *  den  +  1,  den);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  num  =  Math.min(num,  den  *  den  +  1,  den);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	num  =  Math.min(num,  den  *  den  +  1,  den);	  num    =    Math.min(num,    den    +    1,    den);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
142	[BUG]  [BUGGY]  num  =  Math.min(num,  den  +  1,  der);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  num  =  Math.min(num,  den  +  1,  der);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	num  =  Math.min(num,  den  +  1,  der);	  num    =    Math.min(num,    den    +    1,    den);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
143	[BUG]  [BUGGY]  this(num,  den,  den);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  den,  den);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  den,  den);	  this(num,    numerator,    den);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
144	[BUG]  [BUGGY]  this(num,  new  int[den  /  1]);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  /  1]);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  /  1]);	  this(num,    new    int[den    +    1]);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
145	[BUG]  [BUGGY]  float  den  =  num.intValue()  +  den;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  float  den  =  num.intValue()  +  den;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	float  den  =  num.intValue()  +  den;	  float    den    =    num.intValue();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
146	[BUG]  [BUGGY]  int  den  =  getDenied()  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  getDenied()  +  1;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  getDenied()  +  1;	  int    den    =    getDenied();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
147	[BUG]  [BUGGY]  super(num  +  den  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num  +  den  -  1);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num  +  den  -  1);	  super(num    +    den);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
148	[BUG]  [BUGGY]  Integer  den  =  getNull();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  Integer  den  =  getNull();  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	Integer  den  =  getNull();	  Integer    den    =    getNumber();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
149	[BUG]  [BUGGY]  this(num,  new  int[den  -  1],  ZERO);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  -  1],  ZERO);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  -  1],  ZERO);	  this(num,    new    int[den],    ZERO);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
150	[BUG]  [BUGGY]  this(num,  new  int[den],  0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den],  0);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den],  0);	  this(num,    new    int[den],    ZERO);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
151	[BUG]  [BUGGY]  super(num,  den  +  1,  null);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den  +  1,  null);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den  +  1,  null);	  super(num,    den    +    1,    den);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
152	[BUG]  [BUGGY]  super(num,  den  +  1,  ZERO);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den  +  1,  ZERO);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den  +  1,  ZERO);	  super(num,    den    +    1,    den);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
153	[BUG]  [BUGGY]  super(num,  den  +  1,  des);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den  +  1,  des);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den  +  1,  des);	  super(num,    den    +    1,    den);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
154	[BUG]  [BUGGY]  this(num,  new  int[den  -  1]  +  den);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  -  1]  +  den);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  -  1]  +  den);	  this(num,    new    int[den    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
155	[BUG]  [BUGGY]  this(num,  den,  -1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  den,  -1);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  den,  -1);	  this(num,    den,    0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
156	[BUG]  [BUGGY]  this.num  =  num  *  den  +  2;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this.num  =  num  *  den  +  2;  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this.num  =  num  *  den  +  2;	  this.num    =    num    *    den;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
157	[BUG]  [BUGGY]  this.num  =  num  *  den  +  5;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this.num  =  num  *  den  +  5;  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this.num  =  num  *  den  +  5;	  this.num    =    num    *    den;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
158	[BUG]  [BUGGY]  this.num  =  num  +  5;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this.num  =  num  +  5;  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this.num  =  num  +  5;	  this.num    =    num    +    1;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
159	[BUG]  [BUGGY]  int  den  =  Math.min(num,  den  -  2);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  Math.min(num,  den  -  2);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  Math.min(num,  den  -  2);	  int    den    =    Math.min(num,    den    -    1);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
160	[BUG]  [BUGGY]  super(num,  Den  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  Den  -  1);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  Den  -  1);	  super(num,    den    -    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
161	[BUG]  [BUGGY]  super(num,  den  *  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den  *  1);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den  *  1);	  super(num,    den    +    1);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
162	[BUG]  [BUGGY]  this.num  =  num  +  den  *  2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this.num  =  num  +  den  *  2;  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this.num  =  num  +  den  *  2;	  this.num    =    num    +    den;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
163	[BUG]  [BUGGY]  int  den  =  num.intValue()  /  den;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  num.intValue()  /  den;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  num.intValue()  /  den;	  int    den    =    num.intValue()    +    den;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
164	[BUG]  [BUGGY]  int  den  =  num.intValue()  +  den  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  num.intValue()  +  den  -  1;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  num.intValue()  +  den  -  1;	  int    den    =    num.intValue()    +    den;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
165	[BUG]  [BUGGY]  super(num,  den,  -1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den,  -1);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den,  -1);	  super(num,    den,    0);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
166	[BUG]  [BUGGY]  super(num,  den,  2);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den,  2);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den,  2);	  super(num,    den,    0);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
167	[BUG]  [BUGGY]  int  den  =  getNumber().floatValue()  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  getNumber().floatValue()  -  1;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  getNumber().floatValue()  -  1;	  int    den    =    getNumber().intValue()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
168	[BUG]  [BUGGY]  int  den  =  Math.min(den,  des);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  Math.min(den,  des);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  Math.min(den,  des);	  int    den    =    Math.min(num,    des);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
169	[BUG]  [BUGGY]  int  den  =  getNumber().denominator()  +  num;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  getNumber().denominator()  +  num;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  getNumber().denominator()  +  num;	  int    den    =    getNumber().denominator();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
170	[BUG]  [BUGGY]  super(num,  ZERO);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  ZERO);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  ZERO);	  super(num,    Den);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
171	[BUG]  [BUGGY]  this(num,  num,  den,  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  num,  den,  denominator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  num,  den,  denominator);	  this(num,    den,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
172	[BUG]  [BUGGY]  this(num,  den,  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  den,  false);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  den,  false);	  this(num,    den,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
173	[BUG]  [BUGGY]  int  den  =  getNumber().longValue()  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  getNumber().longValue()  -  1;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  getNumber().longValue()  -  1;	  int    den    =    getNumber().intValue()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
174	[BUG]  [BUGGY]  num  =  Math.min(num,  den  *  den);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  num  =  Math.min(num,  den  *  den);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	num  =  Math.min(num,  den  *  den);	  num    =    Math.min(num,    den    +    1,    den);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
175	[BUG]  [BUGGY]  this(num,  new  int[den  -  den],  ZERO);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  -  den],  ZERO);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  -  den],  ZERO);	  this(num,    new    int[den],    ZERO);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
176	[BUG]  [BUGGY]  this(num,  new  int[den],  ZERO,  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den],  ZERO,  denominator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den],  ZERO,  denominator);	  this(num,    new    int[den],    ZERO);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
177	[BUG]  [BUGGY]  this.num  =  num  +  den  -  den;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this.num  =  num  +  den  -  den;  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this.num  =  num  +  den  -  den;	  this.num    =    num    +    den;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
178	[BUG]  [BUGGY]  this(num,  new  int[den  +  den  *  den]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  +  den  *  den]);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  +  den  *  den]);	  this(num,    new    int[den    +    den]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
179	[BUG]  [BUGGY]  this(num,  new  int[den  +  den  -  1,  den]);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  +  den  -  1,  den]);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  +  den  -  1,  den]);	  this(num,    new    int[den    +    den]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
180	[BUG]  [BUGGY]  this(num,  new  int[den  *  den  -  1]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  *  den  -  1]);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  *  den  -  1]);	  this(num,    new    int[den    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
181	[BUG]  [BUGGY]  super(num,  den  *  den  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den  *  den  -  1);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den  *  den  -  1);	  super(num,    den    -    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
182	[BUG]  [BUGGY]  super(num,  den  -  1,  den);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den  -  1,  den);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den  -  1,  den);	  super(num,    den    -    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
183	[BUG]  [BUGGY]  super(num,  den  +  1,  d);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den  +  1,  d);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den  +  1,  d);	  super(num,    den    +    1,    den);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
184	[BUG]  [BUGGY]  Integer  den  =  getNumber().intValue()  -  2;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  Integer  den  =  getNumber().intValue()  -  2;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	Integer  den  =  getNumber().intValue()  -  2;	  Integer    den    =    getNumber().intValue();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
185	[BUG]  [BUGGY]  int  den  =  Math.min(num,  den  +  1,  num);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  Math.min(num,  den  +  1,  num);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  Math.min(num,  den  +  1,  num);	  int    den    =    Math.min(den,    num    +    1,    den);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
186	[BUG]  [BUGGY]  Integer  den  =  getNumberInt();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  Integer  den  =  getNumberInt();  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	Integer  den  =  getNumberInt();	  Integer    den    =    getNumber();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
187	[BUG]  [BUGGY]  super(num,  den,  denominator,  maxDenominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den,  denominator,  maxDenominator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den,  denominator,  maxDenominator);	  super(num,    den,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
188	[BUG]  [BUGGY]  int  den  =  getNumber().numerator();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  getNumber().numerator();  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  getNumber().numerator();	  int    den    =    getNumber().denominator();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
189	[BUG]  [BUGGY]  this(num,  den,  numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  den,  numerator,  denominator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  den,  numerator,  denominator);	  this(num,    den,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
190	[BUG]  [BUGGY]  super(num  +  den  -  den);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num  +  den  -  den);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num  +  den  -  den);	  super(num    +    den);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
191	[BUG]  [BUGGY]  super(num  +  den  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num  +  den  +  1);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num  +  den  +  1);	  super(num    +    den);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
192	[BUG]  [BUGGY]  super(num,  den,  ZERO,  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  den,  ZERO,  denominator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  den,  ZERO,  denominator);	  super(num,    den,    ZERO);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
193	[BUG]  [BUGGY]  this(num,  new  int[den  *  DateTimeConstants.MILLIS_PER_DECEMBER]);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  *  DateTimeConstants.MILLIS_PER_DECEMBER]);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  *  DateTimeConstants.MILLIS_PER_DECEMBER]);	  this(num,    new    int[den    *    den]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
194	[BUG]  [BUGGY]  this(num,  new  int[den  *  DateTimeConstants.MILLIS_PER_SECOND]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  *  DateTimeConstants.MILLIS_PER_SECOND]);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  *  DateTimeConstants.MILLIS_PER_SECOND]);	  this(num,    new    int[den    *    den]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
195	[BUG]  [BUGGY]  this(num,  new  int[den  *  den  +  1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  *  den  +  1]);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  *  den  +  1]);	  this(num,    new    int[den    *    den]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
196	[BUG]  [BUGGY]  int  den  =  getDenied()  +  den;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  getDenied()  +  den;  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  getDenied()  +  den;	  int    den    =    getDenied();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
197	[BUG]  [BUGGY]  this(num,  den,  der);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  den,  der);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  den,  der);	  this(num,    numerator,    den);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
198	[BUG]  [BUGGY]  double  den  =  num.doubleValue();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  double  den  =  num.doubleValue();  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	double  den  =  num.doubleValue();	  float    den    =    num.intValue();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
199	[BUG]  [BUGGY]  this(num,  new  int[den],  den,  denominator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den],  den,  denominator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den],  den,  denominator);	  this(num,    new    int[den],    den);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
200	[BUG]  [BUGGY]  int  den  =  getNumerator().den;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  int  den  =  getNumerator().den;  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	int  den  =  getNumerator().den;	  int    den    =    getNumerator();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
201	[BUG]  [BUGGY]  num  =  Math.min(den,  num  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  num  =  Math.min(den,  num  +  1);  [BUGGY]      super();  if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	num  =  Math.min(den,  num  +  1);	  num    =    Math.min(den,    num);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
202	[BUG]  [BUGGY]  this(num,  new  int[den  -  den  -  1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  -  den  -  1]);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  -  den  -  1]);	  this(num,    new    int[den    -    den]);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
203	[BUG]  [BUGGY]  this(num,  new  int[den  -  den],  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  this(num,  new  int[den  -  den],  denominator);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	this(num,  new  int[den  -  den],  denominator);	  this(num,    new    int[den    -    den]);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
204	[BUG]  [BUGGY]  super(num,  new  int[den]);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  Fraction(int  num,  int  den)  {      [BUGGY]  super(num,  new  int[den]);  [BUGGY]      if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(     "zero  denominator  in  fraction  {0}/{1}     ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	super(num,  new  int[den]);	  super(num,    Den);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
