bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] double nOd = doubleValue(); [FE] AssertionFailedError [CONTEXT] public int compareTo(Fraction object) { [BUGGY] double nOd = doubleValue(); [BUGGY] double dOn = object.doubleValue(); return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0); } [CLASS] Fraction [METHOD] compareTo [RETURN_TYPE] int  Fraction object [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO object ret boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator double dOn nOd  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	1.0	259	259	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public int compareTo(Fraction object) { [BUGGY] [BUGGY] double nOd = doubleValue(); double dOn = object.doubleValue(); return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0); } [CLASS] Fraction [METHOD] compareTo [RETURN_TYPE] int  Fraction object [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO object ret boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator double dOn nOd  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	1.0	259	259	1	add	
3	[BUG] [BUGGY] double dOn = object.doubleValue(); [FE] AssertionFailedError [CONTEXT] public int compareTo(Fraction object) { double nOd = doubleValue(); [BUGGY] double dOn = object.doubleValue(); [BUGGY] return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0); } [CLASS] Fraction [METHOD] compareTo [RETURN_TYPE] int  Fraction object [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO object ret boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator double dOn nOd  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	1.0	260	260	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public int compareTo(Fraction object) { double nOd = doubleValue(); [BUGGY] [BUGGY] double dOn = object.doubleValue(); return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0); } [CLASS] Fraction [METHOD] compareTo [RETURN_TYPE] int  Fraction object [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO object ret boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator double dOn nOd  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	1.0	260	260	1	add	
5	[BUG] [BUGGY] return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0); [FE] AssertionFailedError [CONTEXT] public int compareTo(Fraction object) { double nOd = doubleValue(); double dOn = object.doubleValue(); [BUGGY] return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0); [BUGGY] } [CLASS] Fraction [METHOD] compareTo [RETURN_TYPE] int  Fraction object [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO object ret boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator double dOn nOd  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	1.0	261	261	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public int compareTo(Fraction object) { double nOd = doubleValue(); double dOn = object.doubleValue(); [BUGGY] [BUGGY] return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0); } [CLASS] Fraction [METHOD] compareTo [RETURN_TYPE] int  Fraction object [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO object ret boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator double dOn nOd  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	1.0	261	261	1	add	
7	[BUG] [BUGGY] return (double)numerator / (double)denominator; [FE] AssertionFailedError [CONTEXT] public double doubleValue() { [BUGGY] return (double)numerator / (double)denominator; [BUGGY] } [CLASS] Fraction [METHOD] doubleValue [RETURN_TYPE] double  [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO object ret boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double doubleValue() { [BUGGY] [BUGGY] return (double)numerator / (double)denominator; } [CLASS] Fraction [METHOD] doubleValue [RETURN_TYPE] double  [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO object ret boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	add	
9	[BUG] [BUGGY] super(); [FE] AssertionFailedError [CONTEXT] public Fraction(int num, int den) { [BUGGY] super(); [BUGGY] if (den == 0) { throw MathRuntimeException.createArithmeticException("zero denominator in fraction {0}/{1}", num, den); } if (den < 0) { if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) { throw MathRuntimeException.createArithmeticException("overflow in fraction {0}/{1}, cannot negate", num, den); } num = -num; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Fraction(int num, int den) { [BUGGY] [BUGGY] super(); if (den == 0) { throw MathRuntimeException.createArithmeticException("zero denominator in fraction {0}/{1}", num, den); } if (den < 0) { if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) { throw MathRuntimeException.createArithmeticException("overflow in fraction {0}/{1}, cannot negate", num, den); } num = -num; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	209	209	1	add	
11	[BUG] [BUGGY] if (den == 0) { [FE] AssertionFailedError [CONTEXT] public Fraction(int num, int den) { super(); [BUGGY] if (den == 0) { [BUGGY] throw MathRuntimeException.createArithmeticException("zero denominator in fraction {0}/{1}", num, den); } if (den < 0) { if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) { throw MathRuntimeException.createArithmeticException("overflow in fraction {0}/{1}, cannot negate", num, den); } num = -num; den = -den; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Fraction(int num, int den) { super(); [BUGGY] [BUGGY] if (den == 0) { throw MathRuntimeException.createArithmeticException("zero denominator in fraction {0}/{1}", num, den); } if (den < 0) { if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) { throw MathRuntimeException.createArithmeticException("overflow in fraction {0}/{1}, cannot negate", num, den); } num = -num; den = -den; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	add	
13	[BUG] [BUGGY] if (den < 0) { [FE] AssertionFailedError [CONTEXT] public Fraction(int num, int den) { super(); if (den == 0) { throw MathRuntimeException.createArithmeticException("zero denominator in fraction {0}/{1}", num, den); } [BUGGY] if (den < 0) { [BUGGY] if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) { throw MathRuntimeException.createArithmeticException("overflow in fraction {0}/{1}, cannot negate", num, den); } num = -num; den = -den; }  int d = MathUtils.gcd(num, den); if (d > 1) { [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	214	214	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Fraction(int num, int den) { super(); if (den == 0) { throw MathRuntimeException.createArithmeticException("zero denominator in fraction {0}/{1}", num, den); } [BUGGY] [BUGGY] if (den < 0) { if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) { throw MathRuntimeException.createArithmeticException("overflow in fraction {0}/{1}, cannot negate", num, den); } num = -num; den = -den; }  int d = MathUtils.gcd(num, den); if (d > 1) { [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	214	214	1	add	
15	[BUG] [BUGGY] int d = MathUtils.gcd(num, den); [FE] AssertionFailedError [CONTEXT] } if (den < 0) { if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) { throw MathRuntimeException.createArithmeticException("overflow in fraction {0}/{1}, cannot negate", num, den); } num = -num; den = -den; }  [BUGGY] int d = MathUtils.gcd(num, den); [BUGGY] if (d > 1) { num /= d; den /= d; }  if (den < 0) { num *= -1; den *= -1; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } if (den < 0) { if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) { throw MathRuntimeException.createArithmeticException("overflow in fraction {0}/{1}, cannot negate", num, den); } num = -num; den = -den; }  [BUGGY] [BUGGY] int d = MathUtils.gcd(num, den); if (d > 1) { num /= d; den /= d; }  if (den < 0) { num *= -1; den *= -1; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	add	
17	[BUG] [BUGGY] if (d > 1) { [FE] AssertionFailedError [CONTEXT] if (den < 0) { if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) { throw MathRuntimeException.createArithmeticException("overflow in fraction {0}/{1}, cannot negate", num, den); } num = -num; den = -den; }  int d = MathUtils.gcd(num, den); [BUGGY] if (d > 1) { [BUGGY] num /= d; den /= d; }  if (den < 0) { num *= -1; den *= -1; } this.numerator = num; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (den < 0) { if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) { throw MathRuntimeException.createArithmeticException("overflow in fraction {0}/{1}, cannot negate", num, den); } num = -num; den = -den; }  int d = MathUtils.gcd(num, den); [BUGGY] [BUGGY] if (d > 1) { num /= d; den /= d; }  if (den < 0) { num *= -1; den *= -1; } this.numerator = num; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	add	
19	[BUG] [BUGGY] if (den < 0) { [FE] AssertionFailedError [CONTEXT] den = -den; }  int d = MathUtils.gcd(num, den); if (d > 1) { num /= d; den /= d; }  [BUGGY] if (den < 0) { [BUGGY] num *= -1; den *= -1; } this.numerator = num; this.denominator = den; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	230	230	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] den = -den; }  int d = MathUtils.gcd(num, den); if (d > 1) { num /= d; den /= d; }  [BUGGY] [BUGGY] if (den < 0) { num *= -1; den *= -1; } this.numerator = num; this.denominator = den; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	230	230	1	add	
21	[BUG] [BUGGY] this.numerator = num; [FE] AssertionFailedError [CONTEXT] if (d > 1) { num /= d; den /= d; }  if (den < 0) { num *= -1; den *= -1; } [BUGGY] this.numerator = num; [BUGGY] this.denominator = den; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	234	234	1	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (d > 1) { num /= d; den /= d; }  if (den < 0) { num *= -1; den *= -1; } [BUGGY] [BUGGY] this.numerator = num; this.denominator = den; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	234	234	1	add	
23	[BUG] [BUGGY] this.denominator = den; [FE] AssertionFailedError [CONTEXT] num /= d; den /= d; }  if (den < 0) { num *= -1; den *= -1; } this.numerator = num; [BUGGY] this.denominator = den; [BUGGY] } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	235	235	1	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] num /= d; den /= d; }  if (den < 0) { num *= -1; den *= -1; } this.numerator = num; [BUGGY] [BUGGY] this.denominator = den; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	235	235	1	add	
25	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] den /= d; }  if (den < 0) { num *= -1; den *= -1; } this.numerator = num; this.denominator = den; [BUGGY] } [BUGGY]  [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	236	236	1	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] den /= d; }  if (den < 0) { num *= -1; den *= -1; } this.numerator = num; this.denominator = den; [BUGGY] [BUGGY] } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	236	236	1	add	
27	[BUG] [BUGGY] public static final Fraction TWO = new Fraction(2, 1); [FE] AssertionFailedError [CONTEXT] [BUGGY] public static final Fraction TWO = new Fraction(2, 1); [BUGGY]  [CLASS] Fraction  [VARIABLES] 	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	33	33	1	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] public static final Fraction TWO = new Fraction(2, 1); [CLASS] Fraction  [VARIABLES] 	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	33	33	1	add	
29	[BUG] [BUGGY] public static final Fraction ONE = new Fraction(1, 1); [FE] AssertionFailedError [CONTEXT] [BUGGY] public static final Fraction ONE = new Fraction(1, 1); [BUGGY]  [CLASS] Fraction  [VARIABLES] 	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	36	36	1	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] public static final Fraction ONE = new Fraction(1, 1); [CLASS] Fraction  [VARIABLES] 	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	36	36	1	add	
31	[BUG] [BUGGY] public static final Fraction ZERO = new Fraction(0, 1); [FE] AssertionFailedError [CONTEXT] [BUGGY] public static final Fraction ZERO = new Fraction(0, 1); [BUGGY]  [CLASS] Fraction  [VARIABLES] 	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	39	39	1	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] public static final Fraction ZERO = new Fraction(0, 1); [CLASS] Fraction  [VARIABLES] 	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	39	39	1	add	
33	[BUG] [BUGGY] public static final Fraction MINUS_ONE = new Fraction(-1, 1); [FE] AssertionFailedError [CONTEXT] [BUGGY] public static final Fraction MINUS_ONE = new Fraction(-1, 1); [BUGGY]  [CLASS] Fraction  [VARIABLES] 	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	42	42	1	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] public static final Fraction MINUS_ONE = new Fraction(-1, 1); [CLASS] Fraction  [VARIABLES] 	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	42	42	1	add	
