bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(den,  num  -  1);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(den,  num  -  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(den,  num  -  1);	  int    n    =    MathUtils.gcd(num,    den    -    1);    	non-compiled	[CE]  '.class'  expected	38	None	replace
2	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  den  *  2  -  1);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(num,  den  *  2  -  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  den  *  2  -  1);	  int    n    =    MathUtils.gcd(num,    den    -    1);    	non-compiled	[CE]  '.class'  expected	38	None	replace
3	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(num,  null);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  Integer  d  =  MathUtils.gcd(num,  null);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	Integer  d  =  MathUtils.gcd(num,  null);	  int    d    =    MathUtils.gcd(den,    null);    	non-compiled	[CE]  ')'  expected	30	None	replace
4	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  num  +  den);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  num  +  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  num  +  den);	  int    d    =    MathUtils.gcd(den,    num    +    den);    	non-compiled	[CE]  '.class'  expected	19	None	replace
5	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  den);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  +  den);	  int    d    =    MathUtils.gcd(den,    num    +    den);    	non-compiled	[CE]  '.class'  expected	19	None	replace
6	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num  +  den,  den);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num  +  den,  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num  +  den,  den);	  int    d    =    MathUtils.gcd(den,    num    +    den);    	non-compiled	[CE]  '.class'  expected	19	None	replace
7	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  2);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  2);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  *  2);	  int    d    =    MathUtils.gcd(num,    den    +    2);    	non-compiled	[CE]  '.class'  expected	34	None	replace
8	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  num  +  2);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den,  num  +  2);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  num  +  2);	  int    d    =    MathUtils.gcd(num,    den    +    2);    	non-compiled	[CE]  '.class'  expected	34	None	replace
9	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  num  *  den);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  num  *  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  num  *  den);	  int    d    =    MathUtils.gcd(num,    den    *    den);    	non-compiled	[CE]  '.class'  expected	48	None	replace
10	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  num  *  den);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den,  num  *  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  num  *  den);	  int    d    =    MathUtils.gcd(num,    den    *    den);    	non-compiled	[CE]  '.class'  expected	48	None	replace
11	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den  *  den);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den  *  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  0,  den  *  den);	  int    d    =    MathUtils.gcd(num,    den    *    den);    	non-compiled	[CE]  	48	None	replace
12	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(num,  0,  denominator);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  den  =  MathUtils.gcd(num,  0,  denominator);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  den  =  MathUtils.gcd(num,  0,  denominator);	  int    den    =    MathUtils.gcd(num,    denominator);    	non-compiled	[CE]  '.class'  expected	2	None	replace
13	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(num,  ZERO);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  den  =  MathUtils.gcd(num,  ZERO);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  den  =  MathUtils.gcd(num,  ZERO);	  int    den    =    MathUtils.gcd(num,    denominator);    	non-compiled	[CE]  '.class'  expected	2	None	replace
14	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  den  +  1);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den,  den  +  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  den  +  1);	  int    d    =    MathUtils.gcd(den,    num    +    1);    	non-compiled	[CE]  '.class'  expected	20	None	replace
15	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  der  +  1);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  der  +  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  der  +  1);	  int    d    =    MathUtils.gcd(den,    num    +    1);    	non-compiled	[CE]  '.class'  expected	20	None	replace
16	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den  +  1,  num  +  1);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den  +  1,  num  +  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den  +  1,  num  +  1);	  int    d    =    MathUtils.gcd(num,    den    +    1,    den    +    1);    	non-compiled	[CE]  '.class'  expected	35	None	replace
17	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  den  *  1);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  den  *  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  +  1,  den  *  1);	  int    d    =    MathUtils.gcd(num,    den    +    1,    den    +    1);    	non-compiled	[CE]  '.class'  expected	35	None	replace
18	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  num  +  1,  den  +  1);  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  num  +  1,  den  +  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  num  +  1,  den  +  1);	  int    d    =    MathUtils.gcd(num,    den    +    1,    den    +    1);    	non-compiled	[CE]  '.class'  expected	35	None	replace
19	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  den  *  1);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(num,  den  *  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  den  *  1);	  int    n    =    MathUtils.gcd(num,    den    +    1);    	non-compiled	[CE]  '.class'  expected	8	None	replace
20	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(den,  num  +  1);  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(den,  num  +  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(den,  num  +  1);	  int    n    =    MathUtils.gcd(num,    den    +    1);    	non-compiled	[CE]  '.class'  expected	8	None	replace
21	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  den  +  2);  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(num,  den  +  2);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  den  +  2);	  int    n    =    MathUtils.gcd(num,    den    +    1);    	non-compiled	[CE]  '.class'  expected	8	None	replace
22	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  des  *  1);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  des  *  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  des  *  1);	  int    d    =    MathUtils.gcd(num,    des    +    1);    	non-compiled	[CE]  '.class'  expected	46	None	replace
23	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  des  +  1);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den,  des  +  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  des  +  1);	  int    d    =    MathUtils.gcd(num,    des    +    1);    	non-compiled	[CE]  '.class'  expected	46	None	replace
24	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  des  +  1,  den);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  des  +  1,  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  des  +  1,  den);	  int    d    =    MathUtils.gcd(num,    des    +    1);    	non-compiled	[CE]  '.class'  expected	46	None	replace
25	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  *  1);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  den  *  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  *  1);	  int    num    =    MathUtils.gcd(num,    den    +    1);    	non-compiled	[CE]  '.class'  expected	11	None	replace
26	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  +  2);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  den  +  2);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  +  2);	  int    num    =    MathUtils.gcd(num,    den    +    1);    	non-compiled	[CE]  '.class'  expected	11	None	replace
27	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(den,  des);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  den  =  MathUtils.gcd(den,  des);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  den  =  MathUtils.gcd(den,  des);	  int    den    =    MathUtils.gcd(num,    des);    	non-compiled	[CE]  '.class'  expected	3	None	replace
28	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(num,  des  +  1);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  den  =  MathUtils.gcd(num,  des  +  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  den  =  MathUtils.gcd(num,  des  +  1);	  int    den    =    MathUtils.gcd(num,    des);    	non-compiled	[CE]  '.class'  expected	3	None	replace
29	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(num,  des  -  1);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  den  =  MathUtils.gcd(num,  des  -  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  den  =  MathUtils.gcd(num,  des  -  1);	  int    den    =    MathUtils.gcd(num,    des);    	non-compiled	[CE]  '.class'  expected	3	None	replace
30	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(den,  num  +  1,  den);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(den,  num  +  1,  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(den,  num  +  1,  den);	  int    n    =    MathUtils.gcd(den,    num);    	non-compiled	[CE]  '.class'  expected	7	None	replace
31	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(den,  num  +  den);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(den,  num  +  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(den,  num  +  den);	  int    n    =    MathUtils.gcd(den,    num);    	non-compiled	[CE]  '.class'  expected	7	None	replace
32	[BUG]  [BUGGY]  double  d  =  MathUtils.gcd(num,  denominator);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  double  d  =  MathUtils.gcd(num,  denominator);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	double  d  =  MathUtils.gcd(num,  denominator);	  float    d    =    MathUtils.gcd(num,    denominator);    	non-compiled	[CE]  '.class'  expected	57	None	replace
33	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  *  1,  den);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  *  1,  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	Integer  d  =  MathUtils.gcd(num,  den  *  1,  den);	  Integer    d    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  ')'  expected	55	None	replace
34	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(den  +  1,  num);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  Integer  d  =  MathUtils.gcd(den  +  1,  num);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	Integer  d  =  MathUtils.gcd(den  +  1,  num);	  Integer    d    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  ')'  expected	55	None	replace
35	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  *  2,  den);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  *  2,  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	Integer  d  =  MathUtils.gcd(num,  den  *  2,  den);	  Integer    d    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  ')'  expected	55	None	replace
36	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(den,  num  +  1,  den);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  Integer  d  =  MathUtils.gcd(den,  num  +  1,  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	Integer  d  =  MathUtils.gcd(den,  num  +  1,  den);	  Integer    d    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  ')'  expected	55	None	replace
37	[BUG]  [BUGGY]  double  d  =  MathUtils.gcd(den,  num);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  double  d  =  MathUtils.gcd(den,  num);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	double  d  =  MathUtils.gcd(den,  num);	  float    d    =    MathUtils.gcd(den,    num);    	non-compiled	[CE]  '.class'  expected	47	None	replace
38	[BUG]  [BUGGY]  double  d  =  MathUtils.gcd(num,  den);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  double  d  =  MathUtils.gcd(num,  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	double  d  =  MathUtils.gcd(num,  den);	  float    d    =    MathUtils.gcd(den,    num);    	non-compiled	[CE]  '.class'  expected	47	None	replace
39	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(den,  num  +  1);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  den  =  MathUtils.gcd(den,  num  +  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  den  =  MathUtils.gcd(den,  num  +  1);	  int    den    =    MathUtils.gcd(den,    num);    	non-compiled	[CE]  '.class'  expected	1	None	replace
40	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  den  *  1,  den);  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(num,  den  *  1,  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  den  *  1,  den);	  int    n    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  '.class'  expected	9	None	replace
41	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  den  *  2,  den);  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(num,  den  *  2,  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  den  *  2,  den);	  int    n    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  '.class'  expected	9	None	replace
42	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(den  +  1,  num);  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(den  +  1,  num);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(den  +  1,  num);	  int    n    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  '.class'  expected	9	None	replace
43	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  den  +  1,  des);  [CE]  '.class'  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(num,  den  +  1,  des);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  den  +  1,  des);	  int    n    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  '.class'  expected	9	None	replace
44	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den  *  1);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den  *  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  0,  den  *  1);	  int    d    =    MathUtils.gcd(num,    0,    den    +    1);    	non-compiled	[CE]  '.class'  expected	24	None	replace
45	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  0,  num  +  1);  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den,  0,  num  +  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  0,  num  +  1);	  int    d    =    MathUtils.gcd(num,    0,    den    +    1);    	non-compiled	[CE]  '.class'  expected	24	None	replace
46	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den  *  2);  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den  *  2);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  0,  den  *  2);	  int    d    =    MathUtils.gcd(num,    0,    den    +    1);    	non-compiled	[CE]  '.class'  expected	24	None	replace
47	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  *  den);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  den  *  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  *  den);	  int    num    =    MathUtils.gcd(num,    den    -    den);    	non-compiled	[CE]  '.class'  expected	51	None	replace
48	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(den,  num  -  den);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(den,  num  -  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(den,  num  -  den);	  int    num    =    MathUtils.gcd(num,    den    -    den);    	non-compiled	[CE]  '.class'  expected	51	None	replace
49	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  +  den);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  den  +  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  +  den);	  int    num    =    MathUtils.gcd(num,    den    -    den);    	non-compiled	[CE]  '.class'  expected	51	None	replace
50	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  *  1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  *  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	Integer  d  =  MathUtils.gcd(num,  den  *  1);	  Integer    d    =    MathUtils.gcd(num,    den    +    1);    	non-compiled	[CE]  ')'  expected	6	None	replace
51	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(den,  num  +  1);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  Integer  d  =  MathUtils.gcd(den,  num  +  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	Integer  d  =  MathUtils.gcd(den,  num  +  1);	  Integer    d    =    MathUtils.gcd(num,    den    +    1);    	non-compiled	[CE]  ')'  expected	6	None	replace
52	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  der);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den,  der);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  der);	  int    d    =    MathUtils.gcd(num,    der);    	non-compiled	[CE]  '.class'  expected	40	None	replace
53	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  0,  den);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den,  0,  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  0,  den);	  int    d    =    MathUtils.gcd(den,    0,    num);    	non-compiled	[CE]  '.class'  expected	22	None	replace
54	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(num,  0,  den);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  Integer  d  =  MathUtils.gcd(num,  0,  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	Integer  d  =  MathUtils.gcd(num,  0,  den);	  int    d    =    MathUtils.gcd(den,    0,    num);    	non-compiled	[CE]  ')'  expected	22	None	replace
55	[BUG]  [BUGGY]  float  d  =  MathUtils.gcd(den,  0,  num);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  float  d  =  MathUtils.gcd(den,  0,  num);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	float  d  =  MathUtils.gcd(den,  0,  num);	  int    d    =    MathUtils.gcd(den,    0,    num);    	non-compiled	[CE]  '.class'  expected	22	None	replace
56	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  *  1,  den);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  den  *  1,  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  *  1,  den);	  int    num    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  '.class'  expected	13	None	replace
57	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  +  1,  den  +  1);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  den  +  1,  den  +  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  +  1,  den  +  1);	  int    num    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  '.class'  expected	13	None	replace
58	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  *  2,  den);  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  den  *  2,  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  *  2,  den);	  int    num    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  '.class'  expected	13	None	replace
59	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  +  1,  des);  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  den  +  1,  des);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  +  1,  des);	  int    num    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  '.class'  expected	13	None	replace
60	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(den,  der);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(den,  der);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(den,  der);	  int    num    =    MathUtils.gcd(num,    der);    	non-compiled	[CE]  '.class'  expected	33	None	replace
61	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  numerator  +  1,  den);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  numerator  +  1,  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  numerator  +  1,  den);	  int    d    =    MathUtils.gcd(num,    den    +    1,    denominator);    	non-compiled	[CE]  '.class'  expected	49	None	replace
62	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  numerator  +  1,  denominator);  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  numerator  +  1,  denominator);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  numerator  +  1,  denominator);	  int    d    =    MathUtils.gcd(num,    den    +    1,    denominator);    	non-compiled	[CE]  '.class'  expected	49	None	replace
63	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  numerator);  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  numerator);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  +  1,  numerator);	  int    d    =    MathUtils.gcd(num,    den    +    1,    denominator);    	non-compiled	[CE]  '.class'  expected	49	None	replace
64	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  1,  denominator);  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  1,  denominator);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  *  1,  denominator);	  int    d    =    MathUtils.gcd(num,    den    +    1,    denominator);    	non-compiled	[CE]  '.class'  expected	49	None	replace
65	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(num,  des);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  Integer  d  =  MathUtils.gcd(num,  des);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	Integer  d  =  MathUtils.gcd(num,  des);	  int    d    =    MathUtils.gcd(den,    des);    	non-compiled	[CE]  ')'  expected	28	None	replace
66	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  1,  num);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den,  1,  num);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  1,  num);	  int    d    =    MathUtils.gcd(num,    1,    den);    	non-compiled	[CE]  '.class'  expected	53	None	replace
67	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  2,  den);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  2,  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  2,  den);	  int    d    =    MathUtils.gcd(num,    1,    den);    	non-compiled	[CE]  '.class'  expected	53	None	replace
68	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  1,  den  +  1);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  1,  den  +  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  1,  den  +  1);	  int    d    =    MathUtils.gcd(num,    1,    den);    	non-compiled	[CE]  '.class'  expected	53	None	replace
69	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  num  *  1,  den);  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  num  *  1,  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  num  *  1,  den);	  int    d    =    MathUtils.gcd(num,    den    *    1,    den);    	non-compiled	[CE]  '.class'  expected	17	None	replace
70	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  2,  den);  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  2,  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  *  2,  den);	  int    d    =    MathUtils.gcd(num,    den    *    1,    den);    	non-compiled	[CE]  '.class'  expected	17	None	replace
71	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  num  *  1,  den);  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den,  num  *  1,  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  num  *  1,  den);	  int    d    =    MathUtils.gcd(num,    den    *    1,    den);    	non-compiled	[CE]  '.class'  expected	17	None	replace
72	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  num  *  2,  den);  [CE]  '.class'  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  num  *  2,  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  num  *  2,  den);	  int    d    =    MathUtils.gcd(num,    den    *    1,    den);    	non-compiled	[CE]  '.class'  expected	17	None	replace
73	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  1,  fraction);  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  1,  fraction);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  *  1,  fraction);	  int    d    =    MathUtils.gcd(num,    den    +    1,    fraction);    	non-compiled	[CE]  '.class'  expected	50	None	replace
74	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  maxDenominator);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  maxDenominator);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  maxDenominator);	  int    num    =    MathUtils.gcd(num,    denominator);    	non-compiled	[CE]  '.class'  expected	31	None	replace
75	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(den,  -num);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  den  =  MathUtils.gcd(den,  -num);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  den  =  MathUtils.gcd(den,  -num);	  int    den    =    MathUtils.gcd(num,    -den);    	non-compiled	[CE]  '.class'  expected	42	None	replace
76	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(num,  -1);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  den  =  MathUtils.gcd(num,  -1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  den  =  MathUtils.gcd(num,  -1);	  int    den    =    MathUtils.gcd(num,    -den);    	non-compiled	[CE]  '.class'  expected	42	None	replace
77	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(num,  -den  +  1);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  den  =  MathUtils.gcd(num,  -den  +  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  den  =  MathUtils.gcd(num,  -den  +  1);	  int    den    =    MathUtils.gcd(num,    -den);    	non-compiled	[CE]  '.class'  expected	42	None	replace
78	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(den,  den);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(den,  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(den,  den);	  int    num    =    MathUtils.gcd(den,    num);    	non-compiled	[CE]  '.class'  expected	12	None	replace
79	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(den,  den  +  1);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(den,  den  +  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(den,  den  +  1);	  int    num    =    MathUtils.gcd(den,    num);    	non-compiled	[CE]  '.class'  expected	12	None	replace
80	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(den,  des);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(den,  des);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(den,  des);	  int    n    =    MathUtils.gcd(num,    des);    	non-compiled	[CE]  '.class'  expected	39	None	replace
81	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  des  +  1);  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(num,  des  +  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  des  +  1);	  int    n    =    MathUtils.gcd(num,    des);    	non-compiled	[CE]  '.class'  expected	39	None	replace
82	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  num  -  den  +  1);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den,  num  -  den  +  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  num  -  den  +  1);	  int    d    =    MathUtils.gcd(num,    den    -    den    +    1);    	non-compiled	[CE]  '.class'  expected	58	None	replace
83	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  den  +  1);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  den  +  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  *  den  +  1);	  int    d    =    MathUtils.gcd(num,    den    -    den    +    1);    	non-compiled	[CE]  '.class'  expected	58	None	replace
84	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  denominator  -  den  +  1);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  denominator  -  den  +  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  denominator  -  den  +  1);	  int    d    =    MathUtils.gcd(num,    den    -    den    +    1);    	non-compiled	[CE]  '.class'  expected	58	None	replace
85	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  0,  num  -  1);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den,  0,  num  -  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  0,  num  -  1);	  int    d    =    MathUtils.gcd(num,    0,    den    -    1);    	non-compiled	[CE]  '.class'  expected	37	None	replace
86	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den  *  den  -  1);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den  *  den  -  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  0,  den  *  den  -  1);	  int    d    =    MathUtils.gcd(num,    0,    den    -    1);    	non-compiled	[CE]  '.class'  expected	37	None	replace
87	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den  -  1,  denominator);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den  -  1,  denominator);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  0,  den  -  1,  denominator);	  int    d    =    MathUtils.gcd(num,    0,    den    -    1);    	non-compiled	[CE]  '.class'  expected	37	None	replace
88	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num  +  1,  den);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num  +  1,  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num  +  1,  den);	  int    d    =    MathUtils.gcd(den    +    1,    num);    	non-compiled	[CE]  '.class'  expected	16	None	replace
89	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num  +  1,  der);  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num  +  1,  der);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num  +  1,  der);	  int    d    =    MathUtils.gcd(den    +    1,    num);    	non-compiled	[CE]  '.class'  expected	16	None	replace
90	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den  /  1,  num);  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den  /  1,  num);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den  /  1,  num);	  int    d    =    MathUtils.gcd(den    +    1,    num);    	non-compiled	[CE]  '.class'  expected	16	None	replace
91	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den  +  1,  den);  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den  +  1,  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den  +  1,  den);	  int    d    =    MathUtils.gcd(den    +    1,    num);    	non-compiled	[CE]  '.class'  expected	16	None	replace
92	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  1,  des);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  1,  des);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  *  1,  des);	  int    d    =    MathUtils.gcd(num,    den    +    1,    des);    	non-compiled	[CE]  '.class'  expected	36	None	replace
93	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  des  *  1,  den);  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  des  *  1,  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  des  *  1,  den);	  int    d    =    MathUtils.gcd(num,    den    +    1,    des);    	non-compiled	[CE]  '.class'  expected	36	None	replace
94	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(num,  deserator  -  1);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  den  =  MathUtils.gcd(num,  deserator  -  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  den  =  MathUtils.gcd(num,  deserator  -  1);	  int    den    =    MathUtils.gcd(num,    deserator);    	non-compiled	[CE]  '.class'  expected	25	None	replace
95	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(den,  numerator);  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(den,  numerator);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(den,  numerator);	  int    n    =    MathUtils.gcd(num,    numerator);    	non-compiled	[CE]  '.class'  expected	10	None	replace
96	[BUG]  [BUGGY]  double  d  =  MathUtils.gcd(num,  numerator);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  double  d  =  MathUtils.gcd(num,  numerator);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	double  d  =  MathUtils.gcd(num,  numerator);	  float    d    =    MathUtils.gcd(num,    numerator);    	non-compiled	[CE]  '.class'  expected	52	None	replace
97	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  0,  den  -  num);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den,  0,  den  -  num);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  0,  den  -  num);	  int    d    =    MathUtils.gcd(num,    0,    den    -    den);    	non-compiled	[CE]  '.class'  expected	23	None	replace
98	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den  -  num);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den  -  num);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  0,  den  -  num);	  int    d    =    MathUtils.gcd(num,    0,    den    -    den);    	non-compiled	[CE]  '.class'  expected	23	None	replace
99	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  0,  num  -  den);  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den,  0,  num  -  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  0,  num  -  den);	  int    d    =    MathUtils.gcd(num,    0,    den    -    den);    	non-compiled	[CE]  '.class'  expected	23	None	replace
100	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  num);  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  num);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  +  1,  num);	  int    d    =    MathUtils.gcd(num,    num    +    1,    den);    	non-compiled	[CE]  '.class'  expected	18	None	replace
101	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  num  +  1,  den  *  2);  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  num  +  1,  den  *  2);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  num  +  1,  den  *  2);	  int    d    =    MathUtils.gcd(num,    num    +    1,    den);    	non-compiled	[CE]  '.class'  expected	18	None	replace
102	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(num,  numerator);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  Integer  d  =  MathUtils.gcd(num,  numerator);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	Integer  d  =  MathUtils.gcd(num,  numerator);	  Integer    d    =    MathUtils.gcd(num,    denominator);    	non-compiled	[CE]  ')'  expected	54	None	replace
103	[BUG]  [BUGGY]  float  d  =  MathUtils.gcd(num,  den  +  1);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  float  d  =  MathUtils.gcd(num,  den  +  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	float  d  =  MathUtils.gcd(num,  den  +  1);	  float    d    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  '.class'  expected	4	None	replace
104	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  *  2  -  1);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  den  *  2  -  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  *  2  -  1);	  int    num    =    MathUtils.gcd(num,    den    *    2);    	non-compiled	[CE]  '.class'  expected	14	None	replace
105	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  /  2);  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  den  /  2);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  /  2);	  int    num    =    MathUtils.gcd(num,    den    *    2);    	non-compiled	[CE]  '.class'  expected	14	None	replace
106	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  *  2  +  1);  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  den  *  2  +  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  *  2  +  1);	  int    num    =    MathUtils.gcd(num,    den    *    2);    	non-compiled	[CE]  '.class'  expected	14	None	replace
107	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  des);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  des);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  *  des);	  int    d    =    MathUtils.gcd(num,    des    *    den);    	non-compiled	[CE]  '.class'  expected	29	None	replace
108	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  des  *  2);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  des  *  2);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  des  *  2);	  int    d    =    MathUtils.gcd(num,    des    *    den);    	non-compiled	[CE]  '.class'  expected	29	None	replace
109	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  num  +  1,  den  +  1);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den,  num  +  1,  den  +  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  num  +  1,  den  +  1);	  int    d    =    MathUtils.gcd(den,    num    +    1,    den);    	non-compiled	[CE]  '.class'  expected	15	None	replace
110	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(den,  des);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(den,  des);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(den,  des);	  int    num    =    MathUtils.gcd(num,    des);    	non-compiled	[CE]  '.class'  expected	32	None	replace
111	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  des  *  den);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  des  *  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  des  *  den);	  int    num    =    MathUtils.gcd(num,    des);    	non-compiled	[CE]  '.class'  expected	32	None	replace
112	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  des  +  1);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  des  +  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  des  +  1);	  int    num    =    MathUtils.gcd(num,    des);    	non-compiled	[CE]  '.class'  expected	32	None	replace
113	[BUG]  [BUGGY]  double  d  =  MathUtils.gcd(num,  null);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  double  d  =  MathUtils.gcd(num,  null);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	double  d  =  MathUtils.gcd(num,  null);	  float    d    =    MathUtils.gcd(num,    null);    	non-compiled	[CE]  '.class'  expected	44	None	replace
114	[BUG]  [BUGGY]  float  d  =  MathUtils.gcd(den,  null);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  float  d  =  MathUtils.gcd(den,  null);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	float  d  =  MathUtils.gcd(den,  null);	  float    d    =    MathUtils.gcd(num,    null);    	non-compiled	[CE]  '.class'  expected	44	None	replace
115	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(num,  der);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  Integer  d  =  MathUtils.gcd(num,  der);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	Integer  d  =  MathUtils.gcd(num,  der);	  Integer    d    =    MathUtils.gcd(den,    num);    	non-compiled	[CE]  ')'  expected	5	None	replace
116	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  -  den);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  -  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  -  den);	  int    d    =    MathUtils.gcd(num,    des    -    den);    	non-compiled	[CE]  '.class'  expected	45	None	replace
117	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  des  -  num);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den,  des  -  num);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  des  -  num);	  int    d    =    MathUtils.gcd(num,    des    -    den);    	non-compiled	[CE]  '.class'  expected	45	None	replace
118	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  -  des);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  -  des);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  -  des);	  int    d    =    MathUtils.gcd(num,    des    -    den);    	non-compiled	[CE]  '.class'  expected	45	None	replace
119	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  num  *  1);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den,  num  *  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  num  *  1);	  int    d    =    MathUtils.gcd(num,    den    *    1);    	non-compiled	[CE]  '.class'  expected	21	None	replace
120	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  4);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  4);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  *  4);	  int    d    =    MathUtils.gcd(num,    den    *    1);    	non-compiled	[CE]  '.class'  expected	21	None	replace
121	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(den,  num  -  1);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(den,  num  -  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(den,  num  -  1);	  int    num    =    MathUtils.gcd(num,    den    -    1);    	non-compiled	[CE]  '.class'  expected	43	None	replace
122	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(den,  den);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(den,  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(den,  den);	  int    n    =    MathUtils.gcd(den,    num);    	non-compiled	[CE]  '.class'  expected	7	None	replace
123	[BUG]  [BUGGY]  float  d  =  MathUtils.gcd(den,  des);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  float  d  =  MathUtils.gcd(den,  des);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	float  d  =  MathUtils.gcd(den,  des);	  int    d    =    MathUtils.gcd(den,    des);    	non-compiled	[CE]  '.class'  expected	28	None	replace
124	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  den);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den,  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  den);	  int    d    =    MathUtils.gcd(den,    null);    	non-compiled	[CE]  '.class'  expected	30	None	replace
125	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  des  *  num);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den,  des  *  num);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  des  *  num);	  int    d    =    MathUtils.gcd(num,    des    *    den);    	non-compiled	[CE]  '.class'  expected	29	None	replace
126	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  maxDenominator);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(num,  maxDenominator);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  maxDenominator);	  int    n    =    MathUtils.gcd(num,    denominator);    	non-compiled	[CE]  '.class'  expected	56	None	replace
127	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  0,  denominator);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(num,  0,  denominator);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  0,  denominator);	  int    n    =    MathUtils.gcd(num,    denominator);    	non-compiled	[CE]  '.class'  expected	56	None	replace
128	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num  +  1,  des);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num  +  1,  des);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num  +  1,  des);	  int    d    =    MathUtils.gcd(den    +    1,    num);    	non-compiled	[CE]  '.class'  expected	16	None	replace
129	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  den  +  2);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  den  +  2);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  +  1,  den  +  2);	  int    d    =    MathUtils.gcd(num,    den    +    1,    den    +    1);    	non-compiled	[CE]  '.class'  expected	35	None	replace
130	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den  +  1,  den  +  1);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den  +  1,  den  +  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den  +  1,  den  +  1);	  int    d    =    MathUtils.gcd(num,    den    +    1,    den    +    1);    	non-compiled	[CE]  '.class'  expected	35	None	replace
131	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  /  2);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  /  2);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  /  2);	  int    d    =    MathUtils.gcd(num,    den    +    2);    	non-compiled	[CE]  '.class'  expected	34	None	replace
132	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  *  4);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  den  *  4);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  *  4);	  int    num    =    MathUtils.gcd(num,    den    *    2);    	non-compiled	[CE]  '.class'  expected	14	None	replace
133	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  *  3);  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  den  *  3);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  *  3);	  int    num    =    MathUtils.gcd(num,    den    *    2);    	non-compiled	[CE]  '.class'  expected	14	None	replace
134	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  num  *  2,  den);  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den,  num  *  2,  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  num  *  2,  den);	  int    d    =    MathUtils.gcd(num,    den    *    1,    den);    	non-compiled	[CE]  '.class'  expected	17	None	replace
135	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  2  -  den);  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  2  -  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  *  2  -  den);	  int    d    =    MathUtils.gcd(num,    den    *    1,    den);    	non-compiled	[CE]  '.class'  expected	17	None	replace
136	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  -  2);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  den  -  2);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  -  2);	  int    num    =    MathUtils.gcd(num,    den    -    den);    	non-compiled	[CE]  '.class'  expected	51	None	replace
137	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  -  1,  den);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  den  -  1,  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  -  1,  den);	  int    num    =    MathUtils.gcd(num,    den    -    den);    	non-compiled	[CE]  not  a  statement	51	None	replace
138	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(denominator,  num);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  den  =  MathUtils.gcd(denominator,  num);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  den  =  MathUtils.gcd(denominator,  num);	  int    den    =    MathUtils.gcd(num,    denominator);    	non-compiled	[CE]  not  a  statement	2	None	replace
139	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(num,  0);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  den  =  MathUtils.gcd(num,  0);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  den  =  MathUtils.gcd(num,  0);	  int    den    =    MathUtils.gcd(num,    denominator);    	non-compiled	[CE]  not  a  statement	2	None	replace
140	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  num);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  num);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  0,  num);	  int    d    =    MathUtils.gcd(den,    0,    num);    	non-compiled	[CE]  not  a  statement	22	None	replace
141	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num  +  den);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num  +  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num  +  den);	  int    d    =    MathUtils.gcd(den,    num    +    den);    	non-compiled	[CE]  not  a  statement	19	None	replace
142	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  -  den  *  2  +  1);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  -  den  *  2  +  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  -  den  *  2  +  1);	  int    d    =    MathUtils.gcd(num,    den    -    den    +    1);    	non-compiled	[CE]  not  a  statement	58	None	replace
143	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  0,  den  +  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den,  0,  den  +  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  0,  den  +  1);	  int    d    =    MathUtils.gcd(num,    0,    den    +    1);    	non-compiled	[CE]  not  a  statement	24	None	replace
144	[BUG]  [BUGGY]  float  d  =  MathUtils.gcd(den,  numerator);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  float  d  =  MathUtils.gcd(den,  numerator);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	float  d  =  MathUtils.gcd(den,  numerator);	  float    d    =    MathUtils.gcd(num,    numerator);    	non-compiled	[CE]  not  a  statement	52	None	replace
145	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(numerator,  denominator);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  den  =  MathUtils.gcd(numerator,  denominator);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  den  =  MathUtils.gcd(numerator,  denominator);	  int    den    =    MathUtils.gcd(den,    numerator);    	non-compiled	[CE]  not  a  statement	26	None	replace
146	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  den  +  1,  den  +  1);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(num,  den  +  1,  den  +  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  den  +  1,  den  +  1);	  int    n    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  not  a  statement	9	None	replace
147	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  +  1,  den  +  1);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  +  1,  den  +  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	Integer  d  =  MathUtils.gcd(num,  den  +  1,  den  +  1);	  Integer    d    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  not  a  statement	55	None	replace
148	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  3);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  3);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  *  3);	  int    d    =    MathUtils.gcd(num,    den    *    1);    	non-compiled	[CE]  not  a  statement	21	None	replace
149	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  +  1,  den  -  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  den  +  1,  den  -  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  +  1,  den  -  1);	  int    num    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  not  a  statement	13	None	replace
150	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  +  2);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  +  2);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	Integer  d  =  MathUtils.gcd(num,  den  +  2);	  Integer    d    =    MathUtils.gcd(num,    den    +    1);    	non-compiled	[CE]  not  a  statement	6	None	replace
151	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  fraction  -  den);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  fraction  -  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  +  1,  fraction  -  den);	  int    d    =    MathUtils.gcd(num,    den    +    1,    fraction);    	non-compiled	[CE]  not  a  statement	50	None	replace
152	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(numerator,  den);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  den  =  MathUtils.gcd(numerator,  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  den  =  MathUtils.gcd(numerator,  den);	  int    den    =    MathUtils.gcd(den,    numerator);    	non-compiled	[CE]  not  a  statement	26	None	replace
153	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  deserator);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(num,  deserator);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  deserator);	  int    n    =    MathUtils.gcd(num,    numerator);    	non-compiled	[CE]  not  a  statement	10	None	replace
154	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  -  den  *  2);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  den  -  den  *  2);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  -  den  *  2);	  int    num    =    MathUtils.gcd(num,    den    *    2);    	non-compiled	[CE]  not  a  statement	14	None	replace
155	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  *  den);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  *  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	Integer  d  =  MathUtils.gcd(num,  den  *  den);	  Integer    d    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  not  a  statement	55	None	replace
156	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  +  1,  denominator);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  +  1,  denominator);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	Integer  d  =  MathUtils.gcd(num,  den  +  1,  denominator);	  Integer    d    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  not  a  statement	55	None	replace
157	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  +  1,  des);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  +  1,  des);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	Integer  d  =  MathUtils.gcd(num,  den  +  1,  des);	  Integer    d    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  not  a  statement	55	None	replace
158	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  des  -  den);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  des  -  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  des  -  den);	  int    num    =    MathUtils.gcd(num,    des);    	non-compiled	[CE]  not  a  statement	32	None	replace
159	[BUG]  [BUGGY]  float  num  =  MathUtils.gcd(num,  des);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  float  num  =  MathUtils.gcd(num,  des);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	float  num  =  MathUtils.gcd(num,  des);	  int    num    =    MathUtils.gcd(num,    des);    	non-compiled	[CE]  not  a  statement	32	None	replace
160	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  der);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(num,  der);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  der);	  int    n    =    MathUtils.gcd(den,    num);    	non-compiled	[CE]  not  a  statement	7	None	replace
161	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  num);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  num);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  *  num);	  int    d    =    MathUtils.gcd(num,    den    *    den);    	non-compiled	[CE]  not  a  statement	48	None	replace
162	[BUG]  [BUGGY]  float  d  =  MathUtils.gcd(num,  den  +  1,  denominator);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  float  d  =  MathUtils.gcd(num,  den  +  1,  denominator);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	float  d  =  MathUtils.gcd(num,  den  +  1,  denominator);	  int    d    =    MathUtils.gcd(num,    den    +    1,    denominator);    	non-compiled	[CE]  not  a  statement	49	None	replace
163	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  den  -  2);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(num,  den  -  2);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  den  -  2);	  int    n    =    MathUtils.gcd(num,    den    -    1);    	non-compiled	[CE]  not  a  statement	38	None	replace
164	[BUG]  [BUGGY]  float  d  =  MathUtils.gcd(num,  den  +  den);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  float  d  =  MathUtils.gcd(num,  den  +  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	float  d  =  MathUtils.gcd(num,  den  +  den);	  float    d    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  not  a  statement	4	None	replace
165	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  /  1);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  /  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  /  1);	  int    d    =    MathUtils.gcd(num,    den    *    1);    	non-compiled	[CE]  not  a  statement	21	None	replace
166	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  -  den  *  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  -  den  *  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  -  den  *  1);	  int    d    =    MathUtils.gcd(num,    den    *    1);    	non-compiled	[CE]  not  a  statement	21	None	replace
167	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  denominator  *  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  denominator  *  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  denominator  *  1);	  int    d    =    MathUtils.gcd(num,    den    *    1);    	non-compiled	[CE]  not  a  statement	21	None	replace
168	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  den  -  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  den  -  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  +  1,  den  -  1);	  int    d    =    MathUtils.gcd(num,    den    +    1,    den    +    1);    	non-compiled	[CE]  not  a  statement	35	None	replace
169	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  den  +  1,  den  +  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  den  +  1,  den  +  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  *  den  +  1,  den  +  1);	  int    d    =    MathUtils.gcd(num,    den    +    1,    den    +    1);    	non-compiled	[CE]  not  a  statement	35	None	replace
170	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  -  den  *  den  +  1);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  -  den  *  den  +  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  -  den  *  den  +  1);	  int    d    =    MathUtils.gcd(num,    den    -    den    +    1);    	non-compiled	[CE]  not  a  statement	58	None	replace
171	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  -  den  /  1);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  -  den  /  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  -  den  /  1);	  int    d    =    MathUtils.gcd(num,    den    -    den    +    1);    	non-compiled	[CE]  not  a  statement	58	None	replace
172	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  2  +  den);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  2  +  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  *  2  +  den);	  int    d    =    MathUtils.gcd(num,    den    *    1,    den);    	non-compiled	[CE]  not  a  statement	17	None	replace
173	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  des  -  den);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(den,  des  -  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  des  -  den);	  int    d    =    MathUtils.gcd(num,    des    -    den);    	non-compiled	[CE]  not  a  statement	45	None	replace
174	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  denominator  -  den);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  denominator  -  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  denominator  -  den);	  int    d    =    MathUtils.gcd(num,    des    -    den);    	non-compiled	[CE]  not  a  statement	45	None	replace
175	[BUG]  [BUGGY]  float  num  =  MathUtils.gcd(num,  den  -  1);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  float  num  =  MathUtils.gcd(num,  den  -  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	float  num  =  MathUtils.gcd(num,  den  -  1);	  int    num    =    MathUtils.gcd(num,    den    -    1);    	non-compiled	[CE]  not  a  statement	43	None	replace
176	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  0,  den);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(num,  0,  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  0,  den);	  int    n    =    MathUtils.gcd(num,    denominator);    	non-compiled	[CE]  not  a  statement	56	None	replace
177	[BUG]  [BUGGY]  float  d  =  MathUtils.gcd(den,  num  +  1);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  float  d  =  MathUtils.gcd(den,  num  +  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	float  d  =  MathUtils.gcd(den,  num  +  1);	  int    d    =    MathUtils.gcd(den,    num    +    1);    	non-compiled	[CE]  not  a  statement	20	None	replace
178	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  -  den  +  2);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  -  den  +  2);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  -  den  +  2);	  int    d    =    MathUtils.gcd(num,    den    +    2);    	non-compiled	[CE]  not  a  statement	34	None	replace
179	[BUG]  [BUGGY]  float  d  =  MathUtils.gcd(den  +  1,  num);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  float  d  =  MathUtils.gcd(den  +  1,  num);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	float  d  =  MathUtils.gcd(den  +  1,  num);	  int    d    =    MathUtils.gcd(den    +    1,    num);    	non-compiled	[CE]  not  a  statement	16	None	replace
180	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  des  -  den);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(num,  des  -  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  des  -  den);	  int    n    =    MathUtils.gcd(num,    des);    	non-compiled	[CE]  not  a  statement	39	None	replace
181	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(num,  der);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  den  =  MathUtils.gcd(num,  der);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  den  =  MathUtils.gcd(num,  der);	  int    den    =    MathUtils.gcd(den,    num);    	non-compiled	[CE]  not  a  statement	1	None	replace
182	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  des  *  den  +  1);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  des  *  den  +  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  des  *  den  +  1);	  int    d    =    MathUtils.gcd(num,    des    *    den);    	non-compiled	[CE]  not  a  statement	29	None	replace
183	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  der  +  1,  den);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  der  +  1,  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  der  +  1,  den);	  int    d    =    MathUtils.gcd(den,    num    +    1,    den);    	non-compiled	[CE]  not  a  statement	15	None	replace
184	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  den  *  den);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(num,  den  *  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  den  *  den);	  int    n    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  not  a  statement	9	None	replace
185	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  den  +  1,  denominator);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(num,  den  +  1,  denominator);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  den  +  1,  denominator);	  int    n    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  not  a  statement	9	None	replace
186	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  den  +  1,  fraction);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(num,  den  +  1,  fraction);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  den  +  1,  fraction);	  int    n    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  not  a  statement	9	None	replace
187	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  den  /  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  n  =  MathUtils.gcd(num,  den  /  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  den  /  1);	  int    n    =    MathUtils.gcd(num,    den    +    1);    	non-compiled	[CE]  not  a  statement	8	None	replace
188	[BUG]  [BUGGY]  float  num  =  MathUtils.gcd(num,  denominator);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  float  num  =  MathUtils.gcd(num,  denominator);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	float  num  =  MathUtils.gcd(num,  denominator);	  int    num    =    MathUtils.gcd(num,    denominator);    	non-compiled	[CE]  not  a  statement	31	None	replace
189	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  0,  den);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  0,  den);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  0,  den);	  int    num    =    MathUtils.gcd(num,    denominator);    	non-compiled	[CE]  not  a  statement	31	None	replace
190	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den  /  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den  /  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  0,  den  /  1);	  int    d    =    MathUtils.gcd(num,    0,    den    +    1);    	non-compiled	[CE]  not  a  statement	24	None	replace
191	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den  -  den  -  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den  -  den  -  1);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  0,  den  -  den  -  1);	  int    d    =    MathUtils.gcd(num,    0,    den    -    den);    	non-compiled	[CE]  not  a  statement	23	None	replace
192	[BUG]  [BUGGY]  float  num  =  MathUtils.gcd(num,  der);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  float  num  =  MathUtils.gcd(num,  der);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	float  num  =  MathUtils.gcd(num,  der);	  int    num    =    MathUtils.gcd(num,    der);    	non-compiled	[CE]  not  a  statement	33	None	replace
193	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  den  +  1,  des);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  den  +  1,  des);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  *  den  +  1,  des);	  int    d    =    MathUtils.gcd(num,    den    +    1,    des);    	non-compiled	[CE]  not  a  statement	36	None	replace
194	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  /  1,  des);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  /  1,  des);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  /  1,  des);	  int    d    =    MathUtils.gcd(num,    den    +    1,    des);    	non-compiled	[CE]  not  a  statement	36	None	replace
195	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  des  -  den);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  des  -  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  +  1,  des  -  den);	  int    d    =    MathUtils.gcd(num,    den    +    1,    des);    	non-compiled	[CE]  not  a  statement	36	None	replace
196	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  -  den  +  1);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  den  -  den  +  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  -  den  +  1);	  int    num    =    MathUtils.gcd(num,    den    -    den);    	non-compiled	[CE]  not  a  statement	51	None	replace
197	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  -  den  -  1);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  den  -  den  -  1);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  -  den  -  1);	  int    num    =    MathUtils.gcd(num,    den    -    den);    	non-compiled	[CE]  not  a  statement	51	None	replace
198	[BUG]  [BUGGY]  float  d  =  MathUtils.gcd(den,  num  +  den);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  float  d  =  MathUtils.gcd(den,  num  +  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	float  d  =  MathUtils.gcd(den,  num  +  den);	  int    d    =    MathUtils.gcd(den,    num    +    den);    	non-compiled	[CE]  not  a  statement	19	None	replace
199	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  num  +  1,  den  -  den);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  d  =  MathUtils.gcd(num,  num  +  1,  den  -  den);  [BUGGY]      if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  num  +  1,  den  -  den);	  int    d    =    MathUtils.gcd(num,    num    +    1,    den);    	non-compiled	[CE]  not  a  statement	18	None	replace
200	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  *  2);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  *  2);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	Integer  d  =  MathUtils.gcd(num,  den  *  2);	  Integer    d    =    MathUtils.gcd(num,    den    +    1);    	non-compiled	[CE]  not  a  statement	6	None	replace
201	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  +  1,  denominator);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(     "overflow  in  fraction  {0}/{1},  cannot  negate     ",  num,  den);  }  num  =  -num;  den  =  -den;  }        [BUGGY]  int  num  =  MathUtils.gcd(num,  den  +  1,  denominator);  [BUGGY]      int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  +  1,  denominator);	  int    num    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  not  a  statement	13	None	replace
