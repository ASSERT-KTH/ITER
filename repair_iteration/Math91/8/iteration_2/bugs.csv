bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(den,  num);  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  den  =  MathUtils.gcd(den,  num);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  den  =  MathUtils.gcd(den,  num);	      int    den    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  '.class'  expected	11	None	replace
2	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(num,  denominator);  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  den  =  MathUtils.gcd(num,  denominator);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  den  =  MathUtils.gcd(num,  denominator);	      int    den    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  '.class'  expected	11	None	replace
3	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(num,  des);  [CE]  '.class'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  den  =  MathUtils.gcd(num,  des);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  den  =  MathUtils.gcd(num,  des);	      int    den    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  '.class'  expected	11	None	replace
4	[BUG]  [BUGGY]  float  d  =  MathUtils.gcd(num,  den);  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  float  d  =  MathUtils.gcd(num,  den);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	float  d  =  MathUtils.gcd(num,  den);	      int    d    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  '.class'  expected	1	None	replace
5	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(den,  num);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  Integer  d  =  MathUtils.gcd(den,  num);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	Integer  d  =  MathUtils.gcd(den,  num);	      Integer    d    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  ')'  expected	5	None	replace
6	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  +  1);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  +  1);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	Integer  d  =  MathUtils.gcd(num,  den  +  1);	      Integer    d    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  ')'  expected	5	None	replace
7	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(den,  num);  [CE]  '.class'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  n  =  MathUtils.gcd(den,  num);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(den,  num);	      int    n    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  '.class'  expected	4	None	replace
8	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  den  +  1);  [CE]  '.class'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  n  =  MathUtils.gcd(num,  den  +  1);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  den  +  1);	      int    n    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  '.class'  expected	4	None	replace
9	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  den  +  1,  den);  [CE]  '.class'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  n  =  MathUtils.gcd(num,  den  +  1,  den);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  den  +  1,  den);	      int    n    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  '.class'  expected	4	None	replace
10	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  numerator);  [CE]  '.class'  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  n  =  MathUtils.gcd(num,  numerator);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  numerator);	      int    n    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  '.class'  expected	4	None	replace
11	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  +  1);  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  num  =  MathUtils.gcd(num,  den  +  1);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  +  1);	      int    num    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  '.class'  expected	2	None	replace
12	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(den,  num);  [CE]  '.class'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  num  =  MathUtils.gcd(den,  num);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(den,  num);	      int    num    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  '.class'  expected	2	None	replace
13	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  +  1,  den);  [CE]  '.class'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  num  =  MathUtils.gcd(num,  den  +  1,  den);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  +  1,  den);	      int    num    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  '.class'  expected	2	None	replace
14	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  *  2);  [CE]  '.class'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  num  =  MathUtils.gcd(num,  den  *  2);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  *  2);	      int    num    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  '.class'  expected	2	None	replace
15	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  num  +  1,  den);  [CE]  '.class'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(den,  num  +  1,  den);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  num  +  1,  den);	  int    d    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  '.class'  expected	9	None	replace
16	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den  +  1,  num);  [CE]  '.class'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(den  +  1,  num);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den  +  1,  num);	  int    d    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  '.class'  expected	9	None	replace
17	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  1,  den);  [CE]  '.class'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  1,  den);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  *  1,  den);	  int    d    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  '.class'  expected	9	None	replace
18	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  num  +  1,  den);  [CE]  '.class'  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(num,  num  +  1,  den);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  num  +  1,  den);	  int    d    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  '.class'  expected	9	None	replace
19	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  num  +  den);  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(den,  num  +  den);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  num  +  den);	  int    d    =    MathUtils.gcd(den,    num);    	non-compiled	[CE]  '.class'  expected	6	None	replace
20	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  num  +  1);  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(den,  num  +  1);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  num  +  1);	  int    d    =    MathUtils.gcd(num,    den    +    1);    	non-compiled	[CE]  '.class'  expected	7	None	replace
21	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  1);  [CE]  '.class'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  1);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  *  1);	  int    d    =    MathUtils.gcd(num,    den    +    1);    	non-compiled	[CE]  '.class'  expected	7	None	replace
22	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  0,  num);  [CE]  '.class'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(den,  0,  num);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  0,  num);	  int    d    =    MathUtils.gcd(num,    0,    den);    	non-compiled	[CE]  '.class'  expected	8	None	replace
23	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den  -  den);  [CE]  '.class'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den  -  den);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  0,  den  -  den);	  int    d    =    MathUtils.gcd(num,    0,    den);    	non-compiled	[CE]  '.class'  expected	8	None	replace
24	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den  +  1);  [CE]  '.class'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den  +  1);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  0,  den  +  1);	  int    d    =    MathUtils.gcd(num,    0,    den);    	non-compiled	[CE]  '.class'  expected	8	None	replace
25	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(num,  deserator);  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  den  =  MathUtils.gcd(num,  deserator);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  den  =  MathUtils.gcd(num,  deserator);	      int    den    =    MathUtils.gcd(num,    numerator);    	non-compiled	[CE]  '.class'  expected	14	None	replace
26	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(den,  numerator);  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  den  =  MathUtils.gcd(den,  numerator);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  den  =  MathUtils.gcd(den,  numerator);	      int    den    =    MathUtils.gcd(num,    numerator);    	non-compiled	[CE]  '.class'  expected	14	None	replace
27	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  numerator);  [CE]  '.class'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(den,  numerator);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  numerator);	      int    d    =    MathUtils.gcd(num,    numerator);    	non-compiled	[CE]  '.class'  expected	3	None	replace
28	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  des);  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(den,  des);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  des);	  int    d    =    MathUtils.gcd(num,    des);    	non-compiled	[CE]  '.class'  expected	10	None	replace
29	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  des  *  den);  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(num,  des  *  den);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  des  *  den);	  int    d    =    MathUtils.gcd(num,    des);    	non-compiled	[CE]  '.class'  expected	10	None	replace
30	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  null);  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(den,  null);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  null);	      int    d    =    MathUtils.gcd(num,    null);    	non-compiled	[CE]  '.class'  expected	12	None	replace
31	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  denominator);  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  num  =  MathUtils.gcd(num,  denominator);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  denominator);	      int    num    =    MathUtils.gcd(num,    numerator);    	non-compiled	[CE]  '.class'  expected	15	None	replace
32	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  des);  [CE]  '.class'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  num  =  MathUtils.gcd(num,  des);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  des);	      int    num    =    MathUtils.gcd(num,    numerator);    	non-compiled	[CE]  '.class'  expected	15	None	replace
33	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  der);  [CE]  '.class'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  num  =  MathUtils.gcd(num,  der);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  der);	      int    num    =    MathUtils.gcd(num,    numerator);    	non-compiled	[CE]  '.class'  expected	15	None	replace
34	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  2);  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  2);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  +  2);	  int    d    =    MathUtils.gcd(num,    den    +    1);    	non-compiled	[CE]  '.class'  expected	7	None	replace
35	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  den  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  den  +  1);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  +  1,  den  +  1);	  int    d    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
36	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  des);  [CE]  '.class'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  des);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  +  1,  des);	  int    d    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  '.class'  expected	9	None	replace
37	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den  -  1);  [CE]  '.class'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den  -  1);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  0,  den  -  1);	  int    d    =    MathUtils.gcd(num,    0,    den);    	non-compiled	[CE]  '.class'  expected	8	None	replace
38	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  den  -  1);  [CE]  '.class'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  n  =  MathUtils.gcd(num,  den  -  1);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  den  -  1);	      int    n    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  '.class'  expected	4	None	replace
39	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  des);  [CE]  '.class'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  n  =  MathUtils.gcd(num,  des);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  des);	      int    n    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  '.class'  expected	4	None	replace
40	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  der);  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(num,  der);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  der);	  int    d    =    MathUtils.gcd(den,    num);    	non-compiled	[CE]  '.class'  expected	6	None	replace
41	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(num,  num);  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  den  =  MathUtils.gcd(num,  num);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  den  =  MathUtils.gcd(num,  num);	      int    den    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  '.class'  expected	11	None	replace
42	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(num,  -den);  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  den  =  MathUtils.gcd(num,  -den);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  den  =  MathUtils.gcd(num,  -den);	      int    den    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  '.class'  expected	11	None	replace
43	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  -  1);  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  num  =  MathUtils.gcd(num,  den  -  1);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  -  1);	      int    num    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  '.class'  expected	2	None	replace
44	[BUG]  [BUGGY]  float  d  =  MathUtils.gcd(num,  null);  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  float  d  =  MathUtils.gcd(num,  null);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	float  d  =  MathUtils.gcd(num,  null);	      int    d    =    MathUtils.gcd(num,    null);    	non-compiled	[CE]  '.class'  expected	12	None	replace
45	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  des  -  den);  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(num,  des  -  den);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  des  -  den);	  int    d    =    MathUtils.gcd(num,    des);    	non-compiled	[CE]  '.class'  expected	10	None	replace
46	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  des  +  1);  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(num,  des  +  1);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  des  +  1);	  int    d    =    MathUtils.gcd(num,    des);    	non-compiled	[CE]  '.class'  expected	10	None	replace
47	[BUG]  [BUGGY]  float  d  =  MathUtils.gcd(den,  num);  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  float  d  =  MathUtils.gcd(den,  num);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	float  d  =  MathUtils.gcd(den,  num);	  int    d    =    MathUtils.gcd(den,    num);    	non-compiled	[CE]  '.class'  expected	6	None	replace
48	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  den);  [CE]  '.class'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(num,  den  *  den);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  *  den);	  int    d    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  '.class'  expected	9	None	replace
49	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  denominator);  [CE]  '.class'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  denominator);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  +  1,  denominator);	  int    d    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  '.class'  expected	9	None	replace
50	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  fraction);  [CE]  '.class'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  fraction);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  +  1,  fraction);	  int    d    =    MathUtils.gcd(num,    den    +    1,    den);    	non-compiled	[CE]  '.class'  expected	9	None	replace
51	[BUG]  [BUGGY]  int  num  =  MathUtils.gcd(num,  den  -  den);  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  num  =  MathUtils.gcd(num,  den  -  den);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  num  =  MathUtils.gcd(num,  den  -  den);	      int    num    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  '.class'  expected	2	None	replace
52	[BUG]  [BUGGY]  float  d  =  MathUtils.gcd(num,  numerator);  [CE]  '.class'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  float  d  =  MathUtils.gcd(num,  numerator);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	float  d  =  MathUtils.gcd(num,  numerator);	      int    d    =    MathUtils.gcd(num,    numerator);    	non-compiled	[CE]  '.class'  expected	3	None	replace
53	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  1,  den);  [CE]  '.class'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(num,  1,  den);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  1,  den);	  int    d    =    MathUtils.gcd(num,    0,    den);    	non-compiled	[CE]  '.class'  expected	8	None	replace
54	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(num,  denominator);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  Integer  d  =  MathUtils.gcd(num,  denominator);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	Integer  d  =  MathUtils.gcd(num,  denominator);	      Integer    d    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  ')'  expected	5	None	replace
55	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  +  1,  den);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  +  1,  den);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	Integer  d  =  MathUtils.gcd(num,  den  +  1,  den);	      Integer    d    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  ')'  expected	5	None	replace
56	[BUG]  [BUGGY]  int  n  =  MathUtils.gcd(num,  denominator);  [CE]  '.class'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  n  =  MathUtils.gcd(num,  denominator);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  n  =  MathUtils.gcd(num,  denominator);	      int    n    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  '.class'  expected	4	None	replace
57	[BUG]  [BUGGY]  float  d  =  MathUtils.gcd(num,  denominator);  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  float  d  =  MathUtils.gcd(num,  denominator);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	float  d  =  MathUtils.gcd(num,  denominator);	  int    d    =    MathUtils.gcd(num,    denominator);    	non-compiled	[CE]  '.class'  expected	13	None	replace
58	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  -  den  +  1);  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }      [BUGGY]  int  d  =  MathUtils.gcd(num,  den  -  den  +  1);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  -  den  +  1);	  int    d    =    MathUtils.gcd(num,    den    +    1);    	non-compiled	[CE]  '.class'  expected	7	None	replace
