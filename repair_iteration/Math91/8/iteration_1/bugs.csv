bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  [CE]  unclosed  string  literal  [FE]    AssertionFailedError  [CONTEXT]  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }    [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  [BUGGY]  int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	    int  d  =  MathUtils.gcd(num,  den);		non-compiled	[CE]  unclosed  string  literal	16	None	add
2	[BUG]  [BUGGY]    int  num  =  MathUtils.gcd(num,  den);  [CE]  >  expected  [FE]      AssertionFailedError  [CONTEXT]  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }    [BUGGY]    int  num  =  MathUtils.gcd(num,  den);  [BUGGY]  int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	    int  num  =  MathUtils.gcd(num,  den);		non-compiled	[CE]  >  expected	16	None	add
3	[BUG]  [BUGGY]    int  d  =  MathUtils.gcd(num,  numerator);  [CE]  >  expected  [FE]        AssertionFailedError  [CONTEXT]  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }    [BUGGY]    int  d  =  MathUtils.gcd(num,  numerator);  [BUGGY]  int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	    int  d  =  MathUtils.gcd(num,  numerator);		non-compiled	[CE]  >  expected	16	None	add
4	[BUG]  [BUGGY]    int  n  =  MathUtils.gcd(num,  den);  [CE]  >  expected  [FE]          AssertionFailedError  [CONTEXT]  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }    [BUGGY]    int  n  =  MathUtils.gcd(num,  den);  [BUGGY]  int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	    int  n  =  MathUtils.gcd(num,  den);		non-compiled	[CE]  >  expected	16	None	add
5	[BUG]  [BUGGY]    Integer  d  =  MathUtils.gcd(num,  den);  [CE]  >  expected  [FE]            AssertionFailedError  [CONTEXT]  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }    [BUGGY]    Integer  d  =  MathUtils.gcd(num,  den);  [BUGGY]  int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	    Integer  d  =  MathUtils.gcd(num,  den);		non-compiled	[CE]  >  expected	16	None	add
6	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  num);  [CE]  >  expected  [FE]    AssertionFailedError  [CONTEXT]  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }    [BUGGY]  int  d  =  MathUtils.gcd(den,  num);  [BUGGY]  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(den,  num);	int  d  =  MathUtils.gcd(num,  den);  	non-compiled	[CE]  >  expected	15	None	replace
7	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1);  [CE]  >  expected  [FE]      AssertionFailedError  [CONTEXT]  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }    [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1);  [BUGGY]  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  +  1);	int  d  =  MathUtils.gcd(num,  den);  	non-compiled	[CE]  >  expected	15	None	replace
8	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den);  [CE]  >  expected  [FE]        AssertionFailedError  [CONTEXT]  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }    [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den);  [BUGGY]  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  0,  den);	int  d  =  MathUtils.gcd(num,  den);  	non-compiled	[CE]  >  expected	15	None	replace
9	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  den);  [CE]  >  expected  [FE]          AssertionFailedError  [CONTEXT]  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }    [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  den);  [BUGGY]  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  den  +  1,  den);	int  d  =  MathUtils.gcd(num,  den);  	non-compiled	[CE]  >  expected	15	None	replace
10	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  des);  [CE]  >  expected  [FE]    AssertionFailedError  [CONTEXT]  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }    [BUGGY]  int  d  =  MathUtils.gcd(num,  des);  [BUGGY]  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  des);	int  d  =  MathUtils.gcd(num,  den);  	non-compiled	[CE]  >  expected	15	None	replace
11	[BUG]  [BUGGY]    int  den  =  MathUtils.gcd(num,  den);  [CE]  '.class'  expected  [FE]    AssertionFailedError  [CONTEXT]  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }    [BUGGY]    int  den  =  MathUtils.gcd(num,  den);  [BUGGY]  int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	    int  den  =  MathUtils.gcd(num,  den);		non-compiled	[CE]  '.class'  expected	16	None	add
12	[BUG]  [BUGGY]    int  d  =  MathUtils.gcd(num,  null);  [CE]  '.class'  expected  [FE]      AssertionFailedError  [CONTEXT]  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }    [BUGGY]    int  d  =  MathUtils.gcd(num,  null);  [BUGGY]  int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	    int  d  =  MathUtils.gcd(num,  null);		non-compiled	[CE]  '.class'  expected	16	None	add
13	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  denominator);  [CE]  '.class'  expected  [FE]    AssertionFailedError  [CONTEXT]  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }    [BUGGY]  int  d  =  MathUtils.gcd(num,  denominator);  [BUGGY]  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	int  d  =  MathUtils.gcd(num,  denominator);	int  d  =  MathUtils.gcd(num,  den);  	non-compiled	[CE]  '.class'  expected	15	None	replace
14	[BUG]  [BUGGY]    int  den  =  MathUtils.gcd(num,  numerator);  [CE]  '.class'  expected  [FE]    AssertionFailedError  [CONTEXT]  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }    [BUGGY]    int  den  =  MathUtils.gcd(num,  numerator);  [BUGGY]  int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	    int  den  =  MathUtils.gcd(num,  numerator);		non-compiled	[CE]  '.class'  expected	16	None	add
15	[BUG]  [BUGGY]    int  num  =  MathUtils.gcd(num,  numerator);  [CE]  '.class'  expected  [FE]      AssertionFailedError  [CONTEXT]  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }    [BUGGY]    int  num  =  MathUtils.gcd(num,  numerator);  [BUGGY]  int  d  =  MathUtils.gcd(num,  den);  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	    int  num  =  MathUtils.gcd(num,  numerator);		non-compiled	[CE]  '.class'  expected	16	None	add
