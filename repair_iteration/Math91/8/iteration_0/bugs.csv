bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
15	[BUG] [BUGGY] int d = MathUtils.gcd(num, den); [FE] AssertionFailedError [CONTEXT] } if (den < 0) { if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) { throw MathRuntimeException.createArithmeticException("overflow in fraction {0}/{1}, cannot negate", num, den); } num = -num; den = -den; }  [BUGGY] int d = MathUtils.gcd(num, den); [BUGGY] if (d > 1) { num /= d; den /= d; }  if (den < 0) { num *= -1; den *= -1; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } if (den < 0) { if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) { throw MathRuntimeException.createArithmeticException("overflow in fraction {0}/{1}, cannot negate", num, den); } num = -num; den = -den; }  [BUGGY] [BUGGY] int d = MathUtils.gcd(num, den); if (d > 1) { num /= d; den /= d; }  if (den < 0) { num *= -1; den *= -1; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction MINUS_ONE ONE TWO ZERO boolean long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	223	223	1	add	
