bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);  [BUGGY]    int  d  =  MathUtils.gcd(num,  den);  [BUGGY]  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	    int  d  =  MathUtils.gcd(num,  den);		non-compiled	[CE]  not  a  statement	18	None	add
2	[BUG]  [BUGGY]    d  =  MathUtils.gcd(num,  den);  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);  [BUGGY]    d  =  MathUtils.gcd(num,  den);  [BUGGY]  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	    d  =  MathUtils.gcd(num,  den);		non-compiled	[CE]  not  a  statement	18	None	add
3	[BUG]  [BUGGY]    Integer  d  =  MathUtils.gcd(num,  den);  [CE]  not  a  statement  [FE]        AssertionFailedError  [CONTEXT]  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);  [BUGGY]    Integer  d  =  MathUtils.gcd(num,  den);  [BUGGY]  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	    Integer  d  =  MathUtils.gcd(num,  den);		non-compiled	[CE]  not  a  statement	18	None	add
4	[BUG]  [BUGGY]    int  d  =  MathUtils.gcd(den,  den);  [CE]  not  a  statement  [FE]          AssertionFailedError  [CONTEXT]  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);  [BUGGY]    int  d  =  MathUtils.gcd(den,  den);  [BUGGY]  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	    int  d  =  MathUtils.gcd(den,  den);		non-compiled	[CE]  not  a  statement	18	None	add
5	[BUG]  [BUGGY]    int  d  =  MathUtils.gcd(num,  des);  [CE]  not  a  statement  [FE]            AssertionFailedError  [CONTEXT]  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);  [BUGGY]    int  d  =  MathUtils.gcd(num,  des);  [BUGGY]  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	    int  d  =  MathUtils.gcd(num,  des);		non-compiled	[CE]  not  a  statement	18	None	add
6	[BUG]  [BUGGY]  if(d  >  0)  {  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);  [BUGGY]  if(d  >  0)  {  [BUGGY]  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	if(d  >  0)  {	if  (d  >  1)  {  	non-compiled	[CE]  not  a  statement	17	None	replace
7	[BUG]  [BUGGY]  if(d  <  0)  {  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);  [BUGGY]  if(d  <  0)  {  [BUGGY]  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	if(d  <  0)  {	if  (d  >  1)  {  	non-compiled	[CE]  not  a  statement	17	None	replace
8	[BUG]  [BUGGY]  if  (den  >  1)  {  [CE]  not  a  statement  [FE]        AssertionFailedError  [CONTEXT]  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);  [BUGGY]  if  (den  >  1)  {  [BUGGY]  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	if  (den  >  1)  {	if  (d  >  1)  {  	non-compiled	[CE]  not  a  statement	17	None	replace
9	[BUG]  [BUGGY]    int  den  =  MathUtils.gcd(num,  den);  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);  [BUGGY]    int  den  =  MathUtils.gcd(num,  den);  [BUGGY]  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	    int  den  =  MathUtils.gcd(num,  den);		non-compiled	[CE]  not  a  statement	18	None	add
10	[BUG]  [BUGGY]    int  d  =  MathUtils.gcd(den);  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);  [BUGGY]    int  d  =  MathUtils.gcd(den);  [BUGGY]  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	    int  d  =  MathUtils.gcd(den);		non-compiled	[CE]  not  a  statement	18	None	add
11	[BUG]  [BUGGY]    int  den  =  MathUtils.gcd(den);  [CE]  not  a  statement  [FE]        AssertionFailedError  [CONTEXT]  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {0}/{1},  cannot  negate ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);  [BUGGY]    int  den  =  MathUtils.gcd(den);  [BUGGY]  if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	    int  den  =  MathUtils.gcd(den);		non-compiled	[CE]  not  a  statement	18	None	add
