bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(den,  num);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  Integer  d  =  MathUtils.gcd(den,  num);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	Integer  d  =  MathUtils.gcd(den,  num);	      Integer    d    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  not  a  statement	3	None	replace
2	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  num);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  int  d  =  MathUtils.gcd(den,  num);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	int  d  =  MathUtils.gcd(den,  num);	      Integer    d    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  not  a  statement	3	None	replace
3	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  +  1);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  +  1);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	Integer  d  =  MathUtils.gcd(num,  den  +  1);	      Integer    d    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  not  a  statement	3	None	replace
4	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	int  d  =  MathUtils.gcd(num,  den  +  1);	      Integer    d    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  not  a  statement	3	None	replace
5	[BUG]  [BUGGY]  float  d  =  MathUtils.gcd(den,  den);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  float  d  =  MathUtils.gcd(den,  den);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	float  d  =  MathUtils.gcd(den,  den);	      int    d    =    MathUtils.gcd(den,    den);    	non-compiled	[CE]  not  a  statement	4	None	replace
6	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  den  +  1);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  int  d  =  MathUtils.gcd(den,  den  +  1);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	int  d  =  MathUtils.gcd(den,  den  +  1);	      int    d    =    MathUtils.gcd(den,    den);    	non-compiled	[CE]  not  a  statement	4	None	replace
7	[BUG]  [BUGGY]  if(den  <  0)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  if(den  <  0)  {  [BUGGY]    num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	if(den  <  0)  {	  if(d    <    0)    {    	non-compiled	[CE]  not  a  statement	7	None	replace
8	[BUG]  [BUGGY]  if(d  <  0  ||  d  >  Integer.MIN_VALUE  ||  d  >  Integer.MAX_VALUE)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  if(d  <  0  ||  d  >  Integer.MIN_VALUE  ||  d  >  Integer.MAX_VALUE)  {  [BUGGY]    num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	if(d  <  0  ||  d  >  Integer.MIN_VALUE  ||  d  >  Integer.MAX_VALUE)  {	  if(d    <    0)    {    	non-compiled	[CE]  not  a  statement	7	None	replace
9	[BUG]  [BUGGY]  if(d  <  0  ||  d  >  Integer.MAX_VALUE  ||  d  >  Integer.MAX_VALUE)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  if(d  <  0  ||  d  >  Integer.MAX_VALUE  ||  d  >  Integer.MAX_VALUE)  {  [BUGGY]    num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	if(d  <  0  ||  d  >  Integer.MAX_VALUE  ||  d  >  Integer.MAX_VALUE)  {	  if(d    <    0)    {    	non-compiled	[CE]  not  a  statement	7	None	replace
10	[BUG]  [BUGGY]  if(d  <  0  ||  d  >  Integer.MAX_VALUE)  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  if(d  <  0  ||  d  >  Integer.MAX_VALUE)  {  [BUGGY]    num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	if(d  <  0  ||  d  >  Integer.MAX_VALUE)  {	  if(d    <    0)    {    	non-compiled	[CE]  not  a  statement	7	None	replace
11	[BUG]  [BUGGY]  if(den  >  0)  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  if(den  >  0)  {  [BUGGY]    num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	if(den  >  0)  {	  if(d    >    0)    {    	non-compiled	[CE]  not  a  statement	6	None	replace
12	[BUG]  [BUGGY]  float  d  =  MathUtils.gcd(den);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  float  d  =  MathUtils.gcd(den);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	float  d  =  MathUtils.gcd(den);	      int    d    =    MathUtils.gcd(den);    	non-compiled	[CE]  not  a  statement	10	None	replace
13	[BUG]  [BUGGY]  if  (den  <  1)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  if  (den  <  1)  {  [BUGGY]    num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	if  (den  <  1)  {	  if    (den    >    1)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
14	[BUG]  [BUGGY]  d  =  MathUtils.gcd(den,  num);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  d  =  MathUtils.gcd(den,  num);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	d  =  MathUtils.gcd(den,  num);	      d    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  not  a  statement	2	None	replace
15	[BUG]  [BUGGY]  d  =  MathUtils.gcd(num,  den  +  1);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  d  =  MathUtils.gcd(num,  den  +  1);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	d  =  MathUtils.gcd(num,  den  +  1);	      d    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  not  a  statement	2	None	replace
16	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(den,  num);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  int  den  =  MathUtils.gcd(den,  num);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	int  den  =  MathUtils.gcd(den,  num);	      int    den    =    MathUtils.gcd(den);    	non-compiled	[CE]  not  a  statement	11	None	replace
17	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(den,  denominator);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  int  den  =  MathUtils.gcd(den,  denominator);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	int  den  =  MathUtils.gcd(den,  denominator);	      int    den    =    MathUtils.gcd(den);    	non-compiled	[CE]  not  a  statement	11	None	replace
18	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(den,  0);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  int  den  =  MathUtils.gcd(den,  0);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	int  den  =  MathUtils.gcd(den,  0);	      int    den    =    MathUtils.gcd(den);    	non-compiled	[CE]  not  a  statement	11	None	replace
19	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(num,  denominator);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  int  den  =  MathUtils.gcd(num,  denominator);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	int  den  =  MathUtils.gcd(num,  denominator);	      int    den    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  not  a  statement	9	None	replace
20	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(num,  n);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  int  den  =  MathUtils.gcd(num,  n);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	int  den  =  MathUtils.gcd(num,  n);	      int    den    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  not  a  statement	9	None	replace
21	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(num,  d);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  int  den  =  MathUtils.gcd(num,  d);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	int  den  =  MathUtils.gcd(num,  d);	      int    den    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  not  a  statement	9	None	replace
22	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  des);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  int  d  =  MathUtils.gcd(den,  des);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	int  d  =  MathUtils.gcd(den,  des);	      int    d    =    MathUtils.gcd(num,    des);    	non-compiled	[CE]  not  a  statement	5	None	replace
23	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  des  +  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  int  d  =  MathUtils.gcd(num,  des  +  1);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	int  d  =  MathUtils.gcd(num,  des  +  1);	      int    d    =    MathUtils.gcd(num,    des);    	non-compiled	[CE]  not  a  statement	5	None	replace
24	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  den);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  int  d  =  MathUtils.gcd(num,  den  +  1,  den);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	int  d  =  MathUtils.gcd(num,  den  +  1,  den);	      int    d    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  not  a  statement	1	None	replace
25	[BUG]  [BUGGY]  float  d  =  MathUtils.gcd(num,  den);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  float  d  =  MathUtils.gcd(num,  den);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	float  d  =  MathUtils.gcd(num,  den);	      int    d    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  not  a  statement	1	None	replace
26	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  int  d  =  MathUtils.gcd(num);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	int  d  =  MathUtils.gcd(num);	      int    d    =    MathUtils.gcd(den);    	non-compiled	[CE]  not  a  statement	10	None	replace
27	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  denominator);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  int  d  =  MathUtils.gcd(den,  denominator);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	int  d  =  MathUtils.gcd(den,  denominator);	      int    d    =    MathUtils.gcd(den);    	non-compiled	[CE]  not  a  statement	10	None	replace
28	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  int  d  =  MathUtils.gcd(num,  0,  den);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	int  d  =  MathUtils.gcd(num,  0,  den);	      int    d    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  not  a  statement	1	None	replace
29	[BUG]  [BUGGY]  if(d  <  0  ||  den  >  Integer.MAX_VALUE)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  if(d  <  0  ||  den  >  Integer.MAX_VALUE)  {  [BUGGY]    num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	if(d  <  0  ||  den  >  Integer.MAX_VALUE)  {	  if(d    <    0)    {    	non-compiled	[CE]  not  a  statement	7	None	replace
30	[BUG]  [BUGGY]  if(d  <  0  ||  num  ==  Integer.MIN_VALUE)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  if(d  <  0  ||  num  ==  Integer.MIN_VALUE)  {  [BUGGY]    num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	if(d  <  0  ||  num  ==  Integer.MIN_VALUE)  {	  if(d    <    0)    {    	non-compiled	[CE]  not  a  statement	7	None	replace
31	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(den,  0);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  int  d  =  MathUtils.gcd(den,  0);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	int  d  =  MathUtils.gcd(den,  0);	      int    d    =    MathUtils.gcd(den,    den);    	non-compiled	[CE]  not  a  statement	4	None	replace
32	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(num,  -den);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  int  den  =  MathUtils.gcd(num,  -den);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	int  den  =  MathUtils.gcd(num,  -den);	      int    den    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  not  a  statement	9	None	replace
33	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(num,  0);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  int  den  =  MathUtils.gcd(num,  0);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	int  den  =  MathUtils.gcd(num,  0);	      int    den    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  not  a  statement	9	None	replace
34	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(num,  0,  den);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  Integer  d  =  MathUtils.gcd(num,  0,  den);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	Integer  d  =  MathUtils.gcd(num,  0,  den);	      Integer    d    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  not  a  statement	3	None	replace
35	[BUG]  [BUGGY]  d  =  MathUtils.gcd(num,  denominator);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  d  =  MathUtils.gcd(num,  denominator);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	d  =  MathUtils.gcd(num,  denominator);	      d    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  not  a  statement	2	None	replace
36	[BUG]  [BUGGY]  d  =  MathUtils.gcd(num,  des);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  d  =  MathUtils.gcd(num,  des);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	d  =  MathUtils.gcd(num,  des);	      d    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  not  a  statement	2	None	replace
37	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  des  *  den);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  int  d  =  MathUtils.gcd(num,  des  *  den);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	int  d  =  MathUtils.gcd(num,  des  *  den);	      int    d    =    MathUtils.gcd(num,    des);    	non-compiled	[CE]  not  a  statement	5	None	replace
38	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  des  +  den);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  int  d  =  MathUtils.gcd(num,  des  +  den);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	int  d  =  MathUtils.gcd(num,  des  +  den);	      int    d    =    MathUtils.gcd(num,    des);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
39	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(num,  denominator);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  Integer  d  =  MathUtils.gcd(num,  denominator);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	Integer  d  =  MathUtils.gcd(num,  denominator);	      Integer    d    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  not  a  statement	3	None	replace
40	[BUG]  [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  +  1,  den);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  Integer  d  =  MathUtils.gcd(num,  den  +  1,  den);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	Integer  d  =  MathUtils.gcd(num,  den  +  1,  den);	      Integer    d    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  not  a  statement	3	None	replace
41	[BUG]  [BUGGY]  int  den  =  MathUtils.gcd(num,  des);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  int  den  =  MathUtils.gcd(num,  des);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	int  den  =  MathUtils.gcd(num,  des);	      int    den    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  not  a  statement	9	None	replace
42	[BUG]  [BUGGY]  int  d  =  MathUtils.gcd(num,  denominator);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  int  d  =  MathUtils.gcd(num,  denominator);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	int  d  =  MathUtils.gcd(num,  denominator);	      int    d    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  not  a  statement	1	None	replace
43	[BUG]  [BUGGY]  d  =  MathUtils.gcd(num,  den  +  1,  den);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  }  int  d  =  MathUtils.gcd(num,  den);    [BUGGY]  d  =  MathUtils.gcd(num,  den  +  1,  den);  [BUGGY]    if  (d  >  1)  {  num  /=  d;  den  /=  d;  }  if  (den  <  0)  {  num  *=  -1;  den  *=  -1;  }  this.numerator  =  num;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	224	224	1	replace	d  =  MathUtils.gcd(num,  den  +  1,  den);	      d    =    MathUtils.gcd(num,    den);    	non-compiled	[CE]  not  a  statement	2	None	replace
