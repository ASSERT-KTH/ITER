bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  getNumber().doubleValue()  /  getNumber().doubleValue();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  getNumber().doubleValue()  /  getNumber().doubleValue();  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  getNumber().doubleValue()  /  getNumber().doubleValue();	  return    getNumber().doubleValue()    -    getNumber().doubleValue();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	24	None	replace
2	[BUG]  [BUGGY]  return  getNumber().doubleValue()  *  getNumber().doubleValue();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  getNumber().doubleValue()  *  getNumber().doubleValue();  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  getNumber().doubleValue()  *  getNumber().doubleValue();	  return    getNumber().doubleValue()    -    getNumber().doubleValue();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	24	None	replace
3	[BUG]  [BUGGY]  return  getNumber().doubleValue()  -  getNumber().doubleValue()  +  1;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  getNumber().doubleValue()  -  getNumber().doubleValue()  +  1;  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  getNumber().doubleValue()  -  getNumber().doubleValue()  +  1;	  return    getNumber().doubleValue()    -    getNumber().doubleValue();    	non-compiled	[CE]  not  a  statement	24	None	replace
4	[BUG]  [BUGGY]  return  getNumber().doubleValue()  +  1;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  getNumber().doubleValue()  +  1;  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  getNumber().doubleValue()  +  1;	  return    getNumber().doubleValue();    	non-compiled	[CE]  not  a  statement	22	None	replace
5	[BUG]  [BUGGY]  return  getNumber().doubleValue()  /  Math.PI;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  getNumber().doubleValue()  /  Math.PI;  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  getNumber().doubleValue()  /  Math.PI;	  return    getNumber().doubleValue();    	non-compiled	[CE]  not  a  statement	22	None	replace
6	[BUG]  [BUGGY]  return  getNumber().doubleValue()  /  10;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  getNumber().doubleValue()  /  10;  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  getNumber().doubleValue()  /  10;	  return    getNumber().doubleValue();    	non-compiled	[CE]  not  a  statement	22	None	replace
7	[BUG]  [BUGGY]  int  denominator  =  getDenominator().denominator;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  denominator  =  getDenominator().denominator;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  denominator  =  getDenominator().denominator;	  int    denominator    =    getDenominator();    	non-compiled	[CE]  not  a  statement	9	None	replace
8	[BUG]  [BUGGY]  int  denominator  =  getDenominator()  -  1;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  denominator  =  getDenominator()  -  1;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  denominator  =  getDenominator()  -  1;	  int    denominator    =    getDenominator();    	non-compiled	[CE]  not  a  statement	9	None	replace
9	[BUG]  [BUGGY]  double  numerator  =  Math.min(numerator,  maxDenominator);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  numerator  =  Math.min(numerator,  maxDenominator);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  numerator  =  Math.min(numerator,  maxDenominator);	  double    numerator    =    Math.min(numerator,    denominator);    	non-compiled	[CE]  not  a  statement	29	None	replace
10	[BUG]  [BUGGY]  double  numerator  =  Math.min(numerator,  denominator,  maxIterations);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  numerator  =  Math.min(numerator,  denominator,  maxIterations);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  numerator  =  Math.min(numerator,  denominator,  maxIterations);	  double    numerator    =    Math.min(numerator,    denominator);    	non-compiled	[CE]  not  a  statement	29	None	replace
11	[BUG]  [BUGGY]  double  numerator  =  Math.min(denominator,  number);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  numerator  =  Math.min(denominator,  number);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  numerator  =  Math.min(denominator,  number);	  double    numerator    =    Math.min(numerator,    denominator);    	non-compiled	[CE]  not  a  statement	29	None	replace
12	[BUG]  [BUGGY]  double  numerator  =  Math.min(numerator,  denominator,  maxDenominator);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  numerator  =  Math.min(numerator,  denominator,  maxDenominator);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  numerator  =  Math.min(numerator,  denominator,  maxDenominator);	  double    numerator    =    Math.min(numerator,    denominator);    	non-compiled	[CE]  not  a  statement	29	None	replace
13	[BUG]  [BUGGY]  return  getNumberValue().doubleValue()  +  1;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  getNumberValue().doubleValue()  +  1;  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  getNumberValue().doubleValue()  +  1;	  return    getNumberValue().doubleValue();    	non-compiled	[CE]  not  a  statement	23	None	replace
14	[BUG]  [BUGGY]  return  getNumberValue().doubleValue()  /  100.0;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  getNumberValue().doubleValue()  /  100.0;  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  getNumberValue().doubleValue()  /  100.0;	  return    getNumberValue().doubleValue();    	non-compiled	[CE]  not  a  statement	23	None	replace
15	[BUG]  [BUGGY]  return  getNumberValue().doubleValue()  /  Math.PI;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  getNumberValue().doubleValue()  /  Math.PI;  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  getNumberValue().doubleValue()  /  Math.PI;	  return    getNumberValue().doubleValue();    	non-compiled	[CE]  not  a  statement	23	None	replace
16	[BUG]  [BUGGY]  return  Math.sqrt(numerator  /  Math.pow(10,  num));  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(numerator  /  Math.pow(10,  num));  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(numerator  /  Math.pow(10,  num));	  return    Math.sqrt(numerator    *    Math.pow(10,    num));    	non-compiled	[CE]  not  a  statement	37	None	replace
17	[BUG]  [BUGGY]  return  Math.sqrt(numerator  *  Math.pow(10,  num),  denominator);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(numerator  *  Math.pow(10,  num),  denominator);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(numerator  *  Math.pow(10,  num),  denominator);	  return    Math.sqrt(numerator    *    Math.pow(10,    num));    	non-compiled	[CE]  not  a  statement	37	None	replace
18	[BUG]  [BUGGY]  return  Math.sqrt(numerator  *  Math.pow(10,  n));  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(numerator  *  Math.pow(10,  n));  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(numerator  *  Math.pow(10,  n));	  return    Math.sqrt(numerator    *    Math.pow(10,    num));    	non-compiled	[CE]  not  a  statement	37	None	replace
19	[BUG]  [BUGGY]  return  Math.sqrt(numerator  *  Math.pow(10,  denominator));  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(numerator  *  Math.pow(10,  denominator));  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(numerator  *  Math.pow(10,  denominator));	  return    Math.sqrt(numerator    *    Math.pow(10,    num));    	non-compiled	[CE]  not  a  statement	37	None	replace
20	[BUG]  [BUGGY]  return  Math.sqrt(getDenominator());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(getDenominator());  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(getDenominator());	  return    Math.sqrt(getNumerator());    	non-compiled	[CE]  not  a  statement	36	None	replace
21	[BUG]  [BUGGY]  return  Math.sqrt(getNumerator()  /  getDenominator());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(getNumerator()  /  getDenominator());  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(getNumerator()  /  getDenominator());	  return    Math.sqrt(getNumerator());    	non-compiled	[CE]  not  a  statement	36	None	replace
22	[BUG]  [BUGGY]  return  Math.sqrt(getNumerator(),  denominator);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(getNumerator(),  denominator);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(getNumerator(),  denominator);	  return    Math.sqrt(getNumerator());    	non-compiled	[CE]  not  a  statement	36	None	replace
23	[BUG]  [BUGGY]  double  numerator  =  getNumber()  +  1;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  numerator  =  getNumber()  +  1;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  numerator  =  getNumber()  +  1;	  int    numerator    =    getNumber()    +    1;    	non-compiled	[CE]  not  a  statement	33	None	replace
24	[BUG]  [BUGGY]  int  numerator  =  getNumber()  /  1;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  getNumber()  /  1;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  getNumber()  /  1;	  int    numerator    =    getNumber()    +    1;    	non-compiled	[CE]  not  a  statement	33	None	replace
25	[BUG]  [BUGGY]  long  numerator  =  getNumber()  +  1;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  long  numerator  =  getNumber()  +  1;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	long  numerator  =  getNumber()  +  1;	  int    numerator    =    getNumber()    +    1;    	non-compiled	[CE]  not  a  statement	33	None	replace
26	[BUG]  [BUGGY]  return  Math.sqrt(numerator,  denominator);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(numerator,  denominator);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(numerator,  denominator);	  return    Math.sqrt(numerator);    	non-compiled	[CE]  not  a  statement	35	None	replace
27	[BUG]  [BUGGY]  return  Math.sqrt(numerator  /  denominator);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(numerator  /  denominator);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(numerator  /  denominator);	  return    Math.sqrt(numerator);    	non-compiled	[CE]  ';'  expected	35	None	replace
28	[BUG]  [BUGGY]  return  Math.sqrt(numerator,  numerator);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(numerator,  numerator);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(numerator,  numerator);	  return    Math.sqrt(numerator);    	non-compiled	[CE]  ';'  expected	35	None	replace
29	[BUG]  [BUGGY]  return  Math.sqrt(numerator,  0,  denominator);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(numerator,  0,  denominator);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(numerator,  0,  denominator);	  return    Math.sqrt(numerator);    	non-compiled	[CE]  ';'  expected	35	None	replace
30	[BUG]  [BUGGY]  double  numerator  =  getNumber()  -  1;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  numerator  =  getNumber()  -  1;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  numerator  =  getNumber()  -  1;	  int    numerator    =    getNumber()    -    1;    	non-compiled	[CE]  ';'  expected	4	None	replace
31	[BUG]  [BUGGY]  long  numerator  =  getNumber()  -  1;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  long  numerator  =  getNumber()  -  1;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	long  numerator  =  getNumber()  -  1;	  int    numerator    =    getNumber()    -    1;    	non-compiled	[CE]  ';'  expected	4	None	replace
32	[BUG]  [BUGGY]  double  numerator  =  getDenominator().doubleValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  numerator  =  getDenominator().doubleValue();  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  numerator  =  getDenominator().doubleValue();	  int    numerator    =    getDenominator().doubleValue();    	non-compiled	[CE]  ';'  expected	14	None	replace
33	[BUG]  [BUGGY]  long  numerator  =  getDenominator().doubleValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  long  numerator  =  getDenominator().doubleValue();  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	long  numerator  =  getDenominator().doubleValue();	  int    numerator    =    getDenominator().doubleValue();    	non-compiled	[CE]  ';'  expected	14	None	replace
34	[BUG]  [BUGGY]  return  Math.sqrt(getNumerator(),  getNumerator());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(getNumerator(),  getNumerator());  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(getNumerator(),  getNumerator());	  return    Math.sqrt(getNumerator(),    getDenominator());    	non-compiled	[CE]  ';'  expected	43	None	replace
35	[BUG]  [BUGGY]  return  Math.sqrt(getNumerator(),  getDenominator(),  numerator);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(getNumerator(),  getDenominator(),  numerator);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(getNumerator(),  getDenominator(),  numerator);	  return    Math.sqrt(getNumerator(),    getDenominator());    	non-compiled	[CE]  ';'  expected	43	None	replace
36	[BUG]  [BUGGY]  return  Math.sqrt(getNumerator(),  getDenominator(),  den);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(getNumerator(),  getDenominator(),  den);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(getNumerator(),  getDenominator(),  den);	  return    Math.sqrt(getNumerator(),    getDenominator());    	non-compiled	[CE]  ';'  expected	43	None	replace
37	[BUG]  [BUGGY]  int  numerator  =  Math.min(numerator,  desominator,  maxDenominator);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  Math.min(numerator,  desominator,  maxDenominator);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(numerator,  desominator,  maxDenominator);	  int    numerator    =    Math.min(numerator,    denominator,    maxDenominator);    	non-compiled	[CE]  ';'  expected	41	None	replace
38	[BUG]  [BUGGY]  int  numerator  =  Math.min(numerator,  denominator,  maxDenominator,  d);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  Math.min(numerator,  denominator,  maxDenominator,  d);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(numerator,  denominator,  maxDenominator,  d);	  int    numerator    =    Math.min(numerator,    denominator,    maxDenominator);    	non-compiled	[CE]  ';'  expected	41	None	replace
39	[BUG]  [BUGGY]  int  numerator  =  Math.min(numerator,  desominator);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  Math.min(numerator,  desominator);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(numerator,  desominator);	  int    numerator    =    Math.min(denominator,    number);    	non-compiled	[CE]  ';'  expected	32	None	replace
40	[BUG]  [BUGGY]  double  denominator  =  getNumerator().denominator;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  denominator  =  getNumerator().denominator;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  denominator  =  getNumerator().denominator;	  int    denominator    =    getNumerator().denominator;    	non-compiled	[CE]  ';'  expected	40	None	replace
41	[BUG]  [BUGGY]  int  denominator  =  getNumerator().numerator;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  denominator  =  getNumerator().numerator;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  denominator  =  getNumerator().numerator;	  int    denominator    =    getNumerator().denominator;    	non-compiled	[CE]  ';'  expected	40	None	replace
42	[BUG]  [BUGGY]  return  this.numerator  *(double)denominator;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  this.numerator  *(double)denominator;  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  this.numerator  *(double)denominator;	  return    this.numerator    /(double)denominator;    	non-compiled	[CE]  ';'  expected	17	None	replace
43	[BUG]  [BUGGY]  return  this.numerator  /(double)denominator  +  1;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  this.numerator  /(double)denominator  +  1;  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  this.numerator  /(double)denominator  +  1;	  return    this.numerator    /(double)denominator;    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	17	None	replace
44	[BUG]  [BUGGY]  return  Math.sqrt(numerator  *  getNumberOfIterations());  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(numerator  *  getNumberOfIterations());  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(numerator  *  getNumberOfIterations());	  return    Math.sqrt(numerator    /    getNumberOfIterations());    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	38	None	replace
45	[BUG]  [BUGGY]  return  Math.sqrt(numerator  /  getDenominator());  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                      AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(numerator  /  getDenominator());  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(numerator  /  getDenominator());	  return    Math.sqrt(numerator    /    getNumberOfIterations());    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	38	None	replace
46	[BUG]  [BUGGY]  return  Math.sqrt(numerator  /  getNumberOfIterations(),  denominator);  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                        AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(numerator  /  getNumberOfIterations(),  denominator);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(numerator  /  getNumberOfIterations(),  denominator);	  return    Math.sqrt(numerator    /    getNumberOfIterations());    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	38	None	replace
47	[BUG]  [BUGGY]  return  Math.sqrt(numerator  /  getNumberOfIterations()  +  1);  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                          AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(numerator  /  getNumberOfIterations()  +  1);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(numerator  /  getNumberOfIterations()  +  1);	  return    Math.sqrt(numerator    /    getNumberOfIterations());    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	38	None	replace
48	[BUG]  [BUGGY]  long  numerator  =  getDenominator();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  long  numerator  =  getDenominator();  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	long  numerator  =  getDenominator();	  long    numerator    =    getNumerator();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	28	None	replace
49	[BUG]  [BUGGY]  return  getNumberValue()  /  DateTimeConstants.MILLIS_PER_SECOND;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  getNumberValue()  /  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  getNumberValue()  /  DateTimeConstants.MILLIS_PER_SECOND;	  return    getNumberValue();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	25	None	replace
50	[BUG]  [BUGGY]  return  getDoubleValue();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                      AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  getDoubleValue();  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  getDoubleValue();	  return    getNumberValue();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	25	None	replace
51	[BUG]  [BUGGY]  return  getNumberValue()  /  DateTimeConstants.MILLIS_PER_DAY;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                        AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  getNumberValue()  /  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  getNumberValue()  /  DateTimeConstants.MILLIS_PER_DAY;	  return    getNumberValue();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	25	None	replace
52	[BUG]  [BUGGY]  return  getNumberValue()  /  DateTimeConstants.MILLIS_PER_WEEK;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                          AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  getNumberValue()  /  DateTimeConstants.MILLIS_PER_WEEK;  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  getNumberValue()  /  DateTimeConstants.MILLIS_PER_WEEK;	  return    getNumberValue();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	25	None	replace
53	[BUG]  [BUGGY]  int  numerator  =  Math.min(numerator,  n,  denominator,  maxIterations);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  Math.min(numerator,  n,  denominator,  maxIterations);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(numerator,  n,  denominator,  maxIterations);	  int    numerator    =    Math.min(numerator,    denominator,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
54	[BUG]  [BUGGY]  int  numerator  =  Math.min(numerator,  denominator,  maxIterations,  n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  Math.min(numerator,  denominator,  maxIterations,  n);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(numerator,  denominator,  maxIterations,  n);	  int    numerator    =    Math.min(numerator,    denominator,    maxIterations);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
55	[BUG]  [BUGGY]  int  numerator  =  Math.min(numerator,  denominator,  maxDenominator,  n);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  Math.min(numerator,  denominator,  maxDenominator,  n);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(numerator,  denominator,  maxDenominator,  n);	  int    numerator    =    Math.min(numerator,    denominator,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
56	[BUG]  [BUGGY]  return  numerator  *(double)denominator  /(double)numerator;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  numerator  *(double)denominator  /(double)numerator;  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  numerator  *(double)denominator  /(double)numerator;	  return    numerator    *(double)denominator;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
57	[BUG]  [BUGGY]  long  numerator  =  getNumber().doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  long  numerator  =  getNumber().doubleValue()  +  1;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	long  numerator  =  getNumber().doubleValue()  +  1;	  long    numerator    =    getNumber().doubleValue();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
58	[BUG]  [BUGGY]  double  desominator  =  getDenominator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  desominator  =  getDenominator();  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  desominator  =  getDenominator();	  int    desominator    =    getDenominator();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
59	[BUG]  [BUGGY]  int  desominator  =  getDestinator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  desominator  =  getDestinator();  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  desominator  =  getDestinator();	  int    desominator    =    getDenominator();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
60	[BUG]  [BUGGY]  int  desominator  =  getNumerator().numerator;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  desominator  =  getNumerator().numerator;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  desominator  =  getNumerator().numerator;	  int    desominator    =    getNumerator().denominator;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
61	[BUG]  [BUGGY]  double  desominator  =  getNumerator().denominator;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                      AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  desominator  =  getNumerator().denominator;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  desominator  =  getNumerator().denominator;	  int    desominator    =    getNumerator().denominator;    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	8	None	replace
62	[BUG]  [BUGGY]  int  desominator  =  getDenominator().denominator;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                        AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  desominator  =  getDenominator().denominator;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  desominator  =  getDenominator().denominator;	  int    desominator    =    getNumerator().denominator;    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	8	None	replace
63	[BUG]  [BUGGY]  long  desominator  =  getDenominator();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  long  desominator  =  getDenominator();  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	long  desominator  =  getDenominator();	  long    desominator    =    getNumerator();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	7	None	replace
64	[BUG]  [BUGGY]  long  desominator  =  getNumerator().doubleValue();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  long  desominator  =  getNumerator().doubleValue();  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	long  desominator  =  getNumerator().doubleValue();	  long    desominator    =    getNumerator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
65	[BUG]  [BUGGY]  return  numerator  /(double)num;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  numerator  /(double)num;  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  numerator  /(double)num;	  return    num    /(double)denominator;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
66	[BUG]  [BUGGY]  return  int  num  /(double)denominator;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  int  num  /(double)denominator;  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  int  num  /(double)denominator;	  return    num    /(double)denominator;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
67	[BUG]  [BUGGY]  int  numerator  =  Math.min(numerator,  denominator  -  1,  maxIterations);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  Math.min(numerator,  denominator  -  1,  maxIterations);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(numerator,  denominator  -  1,  maxIterations);	  int    numerator    =    Math.min(numerator,    denominator    -    1);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
68	[BUG]  [BUGGY]  double  numerator  =  Math.min(numerator,  denominator  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  numerator  =  Math.min(numerator,  denominator  -  1);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  numerator  =  Math.min(numerator,  denominator  -  1);	  int    numerator    =    Math.min(numerator,    denominator    -    1);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
69	[BUG]  [BUGGY]  int  numerator  =  Math.min(numerator,  maxDenominator  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  Math.min(numerator,  maxDenominator  -  1);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(numerator,  maxDenominator  -  1);	  int    numerator    =    Math.min(numerator,    denominator    -    1);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
70	[BUG]  [BUGGY]  int  numerator  =  Math.min(numerator,  denominator  *  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  Math.min(numerator,  denominator  *  1);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(numerator,  denominator  *  1);	  int    numerator    =    Math.min(numerator,    denominator    -    1);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
71	[BUG]  [BUGGY]  double  numerator  =  getDenominator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  numerator  =  getDenominator();  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  numerator  =  getDenominator();	  int    numerator    =    getDenominator();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
72	[BUG]  [BUGGY]  int  numerator  =  getNumerator().numerator;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  getNumerator().numerator;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  getNumerator().numerator;	  int    numerator    =    getNumerator().denominator;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
73	[BUG]  [BUGGY]  double  numerator  =  getNumerator().denominator;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  numerator  =  getNumerator().denominator;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  numerator  =  getNumerator().denominator;	  int    numerator    =    getNumerator().denominator;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
74	[BUG]  [BUGGY]  int  numerator  =  getNumerator().denominator  /  denominator;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  getNumerator().denominator  /  denominator;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  getNumerator().denominator  /  denominator;	  int    numerator    =    getNumerator().denominator;    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	27	None	replace
75	[BUG]  [BUGGY]  int  numerator  =  Math.min(denominator,  maxDenominator);  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  Math.min(denominator,  maxDenominator);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(denominator,  maxDenominator);	  int    numerator    =    Math.min(denominator,    numerator);    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	31	None	replace
76	[BUG]  [BUGGY]  double  numerator  =  getNumber().doubleValue()  +  1;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  numerator  =  getNumber().doubleValue()  +  1;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  numerator  =  getNumber().doubleValue()  +  1;	  int    numerator    =    getNumber().doubleValue()    +    1;    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	21	None	replace
77	[BUG]  [BUGGY]  double  numerator  =  getNumber().doubleValue()  /  DateTimeConstants.MILLIS_PER_SECOND;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  numerator  =  getNumber().doubleValue()  /  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  numerator  =  getNumber().doubleValue()  /  DateTimeConstants.MILLIS_PER_SECOND;	  double    numerator    =    getNumber().doubleValue();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	19	None	replace
78	[BUG]  [BUGGY]  n  =  getNumber().doubleValue();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  n  =  getNumber().doubleValue();  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	n  =  getNumber().doubleValue();	  double    numerator    =    getNumber().doubleValue();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	19	None	replace
79	[BUG]  [BUGGY]  double  desominator  =  getDestinator();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  desominator  =  getDestinator();  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  desominator  =  getDestinator();	  double    desominator    =    getNumerator();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	5	None	replace
80	[BUG]  [BUGGY]  double  desominator  =  getNumerator().doubleValue();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  desominator  =  getNumerator().doubleValue();  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  desominator  =  getNumerator().doubleValue();	  double    desominator    =    getNumerator();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	5	None	replace
81	[BUG]  [BUGGY]  return  numerator  *(double)numerator;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]            AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  numerator  *(double)numerator;  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  numerator  *(double)numerator;	  return    numerator    /(double)numerator;    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	34	None	replace
82	[BUG]  [BUGGY]  return  this.numerator  /(double)numerator;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  this.numerator  /(double)numerator;  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  this.numerator  /(double)numerator;	  return    numerator    /(double)numerator;    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	34	None	replace
83	[BUG]  [BUGGY]  return  number  /(double)numerator;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  number  /(double)numerator;  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  number  /(double)numerator;	  return    numerator    /(double)numerator;    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	34	None	replace
84	[BUG]  [BUGGY]  int  den  =  Math.min(numerator,  denominator,  maxIterations);  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  den  =  Math.min(numerator,  denominator,  maxIterations);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  den  =  Math.min(numerator,  denominator,  maxIterations);	  int    den    =    Math.min(numerator,    denominator);    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	45	None	replace
85	[BUG]  [BUGGY]  int  den  =  Math.min(denominator,  numerator);  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  den  =  Math.min(denominator,  numerator);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  den  =  Math.min(denominator,  numerator);	  int    den    =    Math.min(numerator,    denominator);    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	45	None	replace
86	[BUG]  [BUGGY]  int  den  =  Math.min(numerator,  denominator,  maxDenominator);  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                      AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  den  =  Math.min(numerator,  denominator,  maxDenominator);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  den  =  Math.min(numerator,  denominator,  maxDenominator);	  int    den    =    Math.min(numerator,    denominator);    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	45	None	replace
87	[BUG]  [BUGGY]  double  den  =  Math.min(numerator,  denominator);  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                        AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  den  =  Math.min(numerator,  denominator);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  den  =  Math.min(numerator,  denominator);	  int    den    =    Math.min(numerator,    denominator);    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	45	None	replace
88	[BUG]  [BUGGY]  long  denominator  =  getNumerator();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  long  denominator  =  getNumerator();  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	long  denominator  =  getNumerator();	  float    denominator    =    getNumerator();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	12	None	replace
89	[BUG]  [BUGGY]  double  numerator  =  getNumerator().doubleValue()  +  1;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]            AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  numerator  =  getNumerator().doubleValue()  +  1;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  numerator  =  getNumerator().doubleValue()  +  1;	  int    numerator    =    getNumerator().doubleValue()    +    1;    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	46	None	replace
90	[BUG]  [BUGGY]  float  numerator  =  getNumerator().doubleValue()  +  1;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  float  numerator  =  getNumerator().doubleValue()  +  1;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	float  numerator  =  getNumerator().doubleValue()  +  1;	  int    numerator    =    getNumerator().doubleValue()    +    1;    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	46	None	replace
91	[BUG]  [BUGGY]  int  den  =  getNumber().doubleValue();  return  Math.sqrt(den,  denominator);  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  den  =  getNumber().doubleValue();  return  Math.sqrt(den,  denominator);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  den  =  getNumber().doubleValue();  return  Math.sqrt(den,  denominator);	  int    den    =    getNumber().doubleValue();    return    Math.sqrt(den);    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	44	None	replace
92	[BUG]  [BUGGY]  double  den  =  getNumber().doubleValue();  return  Math.sqrt(den);  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  den  =  getNumber().doubleValue();  return  Math.sqrt(den);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  den  =  getNumber().doubleValue();  return  Math.sqrt(den);	  int    den    =    getNumber().doubleValue();    return    Math.sqrt(den);    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	44	None	replace
93	[BUG]  [BUGGY]  long  den  =  getNumber().doubleValue();  return  Math.sqrt(den);  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  long  den  =  getNumber().doubleValue();  return  Math.sqrt(den);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	long  den  =  getNumber().doubleValue();  return  Math.sqrt(den);	  int    den    =    getNumber().doubleValue();    return    Math.sqrt(den);    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	44	None	replace
94	[BUG]  [BUGGY]  double  denominator  =  getDenominator()  /  DateTimeConstants.MILLIS_PER_SECOND;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  denominator  =  getDenominator()  /  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  denominator  =  getDenominator()  /  DateTimeConstants.MILLIS_PER_SECOND;	  double    denominator    =    getDenominator();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	11	None	replace
95	[BUG]  [BUGGY]  double  denominator  =  getDenominator()  /  DateTimeConstants.MILLIS_PER_DECEMBER;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  denominator  =  getDenominator()  /  DateTimeConstants.MILLIS_PER_DECEMBER;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  denominator  =  getDenominator()  /  DateTimeConstants.MILLIS_PER_DECEMBER;	  double    denominator    =    getDenominator();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	11	None	replace
96	[BUG]  [BUGGY]  double  denominator  =  getDenominator().doubleValue();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  denominator  =  getDenominator().doubleValue();  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  denominator  =  getDenominator().doubleValue();	  double    denominator    =    getDenominator();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	11	None	replace
97	[BUG]  [BUGGY]  int  den  =  getNumber().doubleValue();  return  Math.sqrt(den  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  den  =  getNumber().doubleValue();  return  Math.sqrt(den  +  1);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  den  =  getNumber().doubleValue();  return  Math.sqrt(den  +  1);	  int    den    =    getNumber().doubleValue();    return    Math.sqrt(den);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
98	[BUG]  [BUGGY]  float  denominator  =  getDenominator();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  float  denominator  =  getDenominator();  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	float  denominator  =  getDenominator();	  float    denominator    =    getNumerator();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
99	[BUG]  [BUGGY]  return  Math.sqrt(numerator  -  1,  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(numerator  -  1,  denominator);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(numerator  -  1,  denominator);	  return    Math.sqrt(numerator);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
100	[BUG]  [BUGGY]  return  Math.sqrt(numerator  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(numerator  -  1);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(numerator  -  1);	  return    Math.sqrt(numerator);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
101	[BUG]  [BUGGY]  int  numerator  =  getDenominator().doubleValue()  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  getDenominator().doubleValue()  +  1;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  getDenominator().doubleValue()  +  1;	  int    numerator    =    getDenominator().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
102	[BUG]  [BUGGY]  return  Math.sqrt(numerator,  getDenominator());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(numerator,  getDenominator());  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(numerator,  getDenominator());	  return    Math.sqrt(getNumerator());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
103	[BUG]  [BUGGY]  return  Math.sqrt(getNumerator()  /  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(getNumerator()  /  denominator);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(getNumerator()  /  denominator);	  return    Math.sqrt(getNumerator());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
104	[BUG]  [BUGGY]  int  den  =  Math.min(numerator,  maxDenominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  den  =  Math.min(numerator,  maxDenominator);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  den  =  Math.min(numerator,  maxDenominator);	  int    den    =    Math.min(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
105	[BUG]  [BUGGY]  int  den  =  Math.min(numerator,  denominator  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  den  =  Math.min(numerator,  denominator  -  1);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  den  =  Math.min(numerator,  denominator  -  1);	  int    den    =    Math.min(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
106	[BUG]  [BUGGY]  int  numerator  =  Math.min(number,  denominator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  Math.min(number,  denominator);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(number,  denominator);	  int    numerator    =    Math.min(denominator,    number);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
107	[BUG]  [BUGGY]  return  getNumber().doubleValue()  /  Math.pow(10,  getNumber().doubleValue());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  getNumber().doubleValue()  /  Math.pow(10,  getNumber().doubleValue());  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  getNumber().doubleValue()  /  Math.pow(10,  getNumber().doubleValue());	  return    getNumber().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
108	[BUG]  [BUGGY]  double  numerator  =  Math.min(denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  numerator  =  Math.min(denominator,  numerator);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  numerator  =  Math.min(denominator,  numerator);	  double    numerator    =    Math.min(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
109	[BUG]  [BUGGY]  return  Math.sqrt(numerator  /  getNumberOfIterations()  /  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(numerator  /  getNumberOfIterations()  /  denominator);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(numerator  /  getNumberOfIterations()  /  denominator);	  return    Math.sqrt(numerator    /    getNumberOfIterations());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
110	[BUG]  [BUGGY]  double  numerator  =  getNumber().doubleValue()  +  0.5;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  numerator  =  getNumber().doubleValue()  +  0.5;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  numerator  =  getNumber().doubleValue()  +  0.5;	  double    numerator    =    getNumber().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
111	[BUG]  [BUGGY]  return  Math.sqrt(getNumerator(),  getDenominator()  /  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(getNumerator(),  getDenominator()  /  denominator);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(getNumerator(),  getDenominator()  /  denominator);	  return    Math.sqrt(getNumerator(),    getDenominator());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
112	[BUG]  [BUGGY]  return  Math.sqrt(getNumerator(),  getDenominator()  -  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(getNumerator(),  getDenominator()  -  denominator);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(getNumerator(),  getDenominator()  -  denominator);	  return    Math.sqrt(getNumerator(),    getDenominator());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
113	[BUG]  [BUGGY]  int  numerator  =  Math.min(denominator,  numerator  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  Math.min(denominator,  numerator  -  1);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(denominator,  numerator  -  1);	  int    numerator    =    Math.min(numerator,    denominator    -    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
114	[BUG]  [BUGGY]  return  num  /(double)denominator  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  num  /(double)denominator  +  1;  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  num  /(double)denominator  +  1;	  return    num    /(double)denominator;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
115	[BUG]  [BUGGY]  return  num  *(double)denominator;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  num  *(double)denominator;  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  num  *(double)denominator;	  return    numerator    *(double)denominator;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
116	[BUG]  [BUGGY]  return  value  *(double)denominator;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  value  *(double)denominator;  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  value  *(double)denominator;	  return    numerator    *(double)denominator;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
117	[BUG]  [BUGGY]  int  numerator  =  getNumber()  *  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  getNumber()  *  1;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  getNumber()  *  1;	  int    numerator    =    getNumber()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
118	[BUG]  [BUGGY]  int  numerator  =  Math.min(denominator,  maxIterations);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  Math.min(denominator,  maxIterations);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(denominator,  maxIterations);	  int    numerator    =    Math.min(numerator,    denominator,    maxIterations);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
119	[BUG]  [BUGGY]  int  numerator  =  Math.min(numerator,  denominator,  maxIterations  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  Math.min(numerator,  denominator,  maxIterations  -  1);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(numerator,  denominator,  maxIterations  -  1);	  int    numerator    =    Math.min(numerator,    denominator,    maxIterations);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
120	[BUG]  [BUGGY]  int  numerator  =  Math.min(numerator,  denominator,  maxIterations,  0);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  Math.min(numerator,  denominator,  maxIterations,  0);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(numerator,  denominator,  maxIterations,  0);	  int    numerator    =    Math.min(numerator,    denominator,    maxIterations);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
121	[BUG]  [BUGGY]  int  desominator  =  getNumerator().denominator  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  desominator  =  getNumerator().denominator  +  1;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  desominator  =  getNumerator().denominator  +  1;	  int    desominator    =    getNumerator().denominator;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
122	[BUG]  [BUGGY]  int  desominator  =  getNumerator().denominator  -  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  desominator  =  getNumerator().denominator  -  1;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  desominator  =  getNumerator().denominator  -  1;	  int    desominator    =    getNumerator().denominator;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
123	[BUG]  [BUGGY]  Integer  numerator  =  getNumber();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  Integer  numerator  =  getNumber();  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	Integer  numerator  =  getNumber();	  long    numerator    =    getNumber();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
124	[BUG]  [BUGGY]  return  getNumber().doubleValue()  +  getNumber().doubleValue();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  getNumber().doubleValue()  +  getNumber().doubleValue();  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  getNumber().doubleValue()  +  getNumber().doubleValue();	  return    getNumber().doubleValue()    -    getNumber().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
125	[BUG]  [BUGGY]  int  numerator  =  Math.min(denominator,  maxDenominator,  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  Math.min(denominator,  maxDenominator,  denominator);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(denominator,  maxDenominator,  denominator);	  int    numerator    =    Math.min(numerator,    denominator,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
126	[BUG]  [BUGGY]  int  numerator  =  Math.min(numerator,  maxDenominator,  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  Math.min(numerator,  maxDenominator,  denominator);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(numerator,  maxDenominator,  denominator);	  int    numerator    =    Math.min(numerator,    denominator,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
127	[BUG]  [BUGGY]  int  numerator  =  Math.min(numerator,  denominator,  maxDenominator  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  Math.min(numerator,  denominator,  maxDenominator  -  1);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(numerator,  denominator,  maxDenominator  -  1);	  int    numerator    =    Math.min(numerator,    denominator,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
128	[BUG]  [BUGGY]  int  denominator  =  getNumerator().denominator  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  denominator  =  getNumerator().denominator  -  1;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  denominator  =  getNumerator().denominator  -  1;	  int    denominator    =    getNumerator().denominator;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
129	[BUG]  [BUGGY]  int  denominator  =  getNumerator().denominator  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  denominator  =  getNumerator().denominator  +  1;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  denominator  =  getNumerator().denominator  +  1;	  int    denominator    =    getNumerator().denominator;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
130	[BUG]  [BUGGY]  return  getNumberValue()  /.doubleValue();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  getNumberValue()  /.doubleValue();  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  getNumberValue()  /.doubleValue();	  return    getNumberValue().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
131	[BUG]  [BUGGY]  float  numerator  =  getNumber().doubleValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  float  numerator  =  getNumber().doubleValue()  +  1;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	float  numerator  =  getNumber().doubleValue()  +  1;	  int    numerator    =    getNumber().doubleValue()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
132	[BUG]  [BUGGY]  return  numerator  /(double)numerator  +  denominator;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  numerator  /(double)numerator  +  denominator;  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  numerator  /(double)numerator  +  denominator;	  return    numerator    /(double)numerator;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
133	[BUG]  [BUGGY]  Integer  numerator  =  getNumerator();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  Integer  numerator  =  getNumerator();  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	Integer  numerator  =  getNumerator();	  long    numerator    =    getNumerator();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
134	[BUG]  [BUGGY]  int  numerator  =  getNumerator().denominator  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  getNumerator().denominator  -  1;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  getNumerator().denominator  -  1;	  int    numerator    =    getNumerator().denominator;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
135	[BUG]  [BUGGY]  return  Math.sqrt(getNumerator(),  getDenominator(),  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(getNumerator(),  getDenominator(),  denominator);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(getNumerator(),  getDenominator(),  denominator);	  return    Math.sqrt(getNumerator(),    getDenominator());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
136	[BUG]  [BUGGY]  int  numerator  =  Math.min(numerator,  denominator,  maxDenominator,  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  numerator  =  Math.min(numerator,  denominator,  maxDenominator,  denominator);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(numerator,  denominator,  maxDenominator,  denominator);	  int    numerator    =    Math.min(numerator,    denominator,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
137	[BUG]  [BUGGY]  long  desominator  =  getNumerator().denominator;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  long  desominator  =  getNumerator().denominator;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	long  desominator  =  getNumerator().denominator;	  long    desominator    =    getNumerator();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
138	[BUG]  [BUGGY]  return  Math.sqrt(denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(denominator,  numerator);  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(denominator,  numerator);	  return    Math.sqrt(numerator);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
139	[BUG]  [BUGGY]  double  numerator  =  Math.min(denominator,  maxDenominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  numerator  =  Math.min(denominator,  maxDenominator);  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  numerator  =  Math.min(denominator,  maxDenominator);	  int    numerator    =    Math.min(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
140	[BUG]  [BUGGY]  double  numerator  =  getNumber().doubleValue()  +  denominator;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  numerator  =  getNumber().doubleValue()  +  denominator;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  numerator  =  getNumber().doubleValue()  +  denominator;	  double    numerator    =    getNumber().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
141	[BUG]  [BUGGY]  double  numerator  =  getNumber().doubleValue()  /(double)denominator;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  numerator  =  getNumber().doubleValue()  /(double)denominator;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  numerator  =  getNumber().doubleValue()  /(double)denominator;	  double    numerator    =    getNumber().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
142	[BUG]  [BUGGY]  int  desominator  =  getNumerator().denominator  /(double)numerator;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  desominator  =  getNumerator().denominator  /(double)numerator;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  desominator  =  getNumerator().denominator  /(double)numerator;	  int    desominator    =    getNumerator().denominator;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
143	[BUG]  [BUGGY]  int  desominator  =  getNumerator().denominator  /  Math.PI;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  desominator  =  getNumerator().denominator  /  Math.PI;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  desominator  =  getNumerator().denominator  /  Math.PI;	  int    desominator    =    getNumerator().denominator;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
144	[BUG]  [BUGGY]  return  Math.sqrt(denominator  /  getNumberOfIterations());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(denominator  /  getNumberOfIterations());  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(denominator  /  getNumberOfIterations());	  return    Math.sqrt(numerator    /    getNumberOfIterations());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
145	[BUG]  [BUGGY]  return  Math.sqrt(numerator  *  Math.pow(10,  deserator));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  Math.sqrt(numerator  *  Math.pow(10,  deserator));  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(numerator  *  Math.pow(10,  deserator));	  return    Math.sqrt(numerator    *    Math.pow(10,    num));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
146	[BUG]  [BUGGY]  return  getNumber().doubleValue()  *  Math.sqrt(getDenominator());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  getNumber().doubleValue()  *  Math.sqrt(getDenominator());  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  getNumber().doubleValue()  *  Math.sqrt(getDenominator());	  return    getNumber().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
147	[BUG]  [BUGGY]  double  desominator  =  getDiminator();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  double  desominator  =  getDiminator();  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  desominator  =  getDiminator();	  double    desominator    =    getNumerator();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
148	[BUG]  [BUGGY]  int  den  =  getNumber().doubleValue();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  int  den  =  getNumber().doubleValue();  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  den  =  getNumber().doubleValue();	  int    den    =    getNumber().doubleValue();    return    Math.sqrt(den);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
149	[BUG]  [BUGGY]  long  numerator  =  getNumerator().denominator;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  long  numerator  =  getNumerator().denominator;  [BUGGY]      return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	long  numerator  =  getNumerator().denominator;	  long    numerator    =    getNumerator();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
150	[BUG]  [BUGGY]  return  getNumberValue().doubleValue()  *  Math.sqrt(getDenominator());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  doubleValue()  {      [BUGGY]  return  getNumberValue().doubleValue()  *  Math.sqrt(getDenominator());  [BUGGY]      }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  getNumberValue().doubleValue()  *  Math.sqrt(getDenominator());	  return    getNumberValue().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
