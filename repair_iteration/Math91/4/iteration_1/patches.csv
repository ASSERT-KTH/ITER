bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  numerator  =  getNumber();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]              AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  double  numerator  =  getNumber();  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  numerator  =  getNumber();	      int    numerator    =    getNumber();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	6	None	replace
2	[BUG]  [BUGGY]  long  numerator  =  getNumber();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  long  numerator  =  getNumber();  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	long  numerator  =  getNumber();	      int    numerator    =    getNumber();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	6	None	replace
3	[BUG]  [BUGGY]  int  numerator  =  getDenominator();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                  AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  int  numerator  =  getDenominator();  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  getDenominator();	      int    numerator    =    getNumber();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	6	None	replace
4	[BUG]  [BUGGY]  int  numerator  =  getNumber()  -  1;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                    AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  int  numerator  =  getNumber()  -  1;  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  getNumber()  -  1;	      int    numerator    =    getNumber();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	6	None	replace
5	[BUG]  [BUGGY]  double  desominator  =  getNumerator();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]          AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  double  desominator  =  getNumerator();  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  desominator  =  getNumerator();	      int    desominator    =    getNumerator();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	9	None	replace
6	[BUG]  [BUGGY]  int  desominator  =  getDenominator();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]            AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  int  desominator  =  getDenominator();  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  desominator  =  getDenominator();	      int    desominator    =    getNumerator();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	9	None	replace
7	[BUG]  [BUGGY]  long  desominator  =  getNumerator();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]              AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  long  desominator  =  getNumerator();  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	long  desominator  =  getNumerator();	      int    desominator    =    getNumerator();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	9	None	replace
8	[BUG]  [BUGGY]  int  desominator  =  getNumerator().denominator;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  int  desominator  =  getNumerator().denominator;  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  desominator  =  getNumerator().denominator;	      int    desominator    =    getNumerator();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	9	None	replace
9	[BUG]  [BUGGY]  int  denominator  =  getDenominator();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]        AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  int  denominator  =  getDenominator();  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  denominator  =  getDenominator();	      int    denominator    =    getNumerator();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	8	None	replace
10	[BUG]  [BUGGY]  double  denominator  =  getNumerator();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]          AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  double  denominator  =  getNumerator();  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  denominator  =  getNumerator();	      int    denominator    =    getNumerator();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	8	None	replace
11	[BUG]  [BUGGY]  double  denominator  =  getDenominator();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]            AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  double  denominator  =  getDenominator();  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  denominator  =  getDenominator();	      int    denominator    =    getNumerator();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	8	None	replace
12	[BUG]  [BUGGY]  float  denominator  =  getNumerator();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]              AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  float  denominator  =  getNumerator();  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	float  denominator  =  getNumerator();	      int    denominator    =    getNumerator();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	8	None	replace
13	[BUG]  [BUGGY]  double  numerator  =  getNumerator().doubleValue();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]        AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  double  numerator  =  getNumerator().doubleValue();  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  numerator  =  getNumerator().doubleValue();	      int    numerator    =    getNumerator().doubleValue();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	7	None	replace
14	[BUG]  [BUGGY]  int  numerator  =  getDenominator().doubleValue();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]          AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  int  numerator  =  getDenominator().doubleValue();  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  getDenominator().doubleValue();	      int    numerator    =    getNumerator().doubleValue();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	7	None	replace
15	[BUG]  [BUGGY]  long  numerator  =  getNumerator().doubleValue();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]            AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  long  numerator  =  getNumerator().doubleValue();  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	long  numerator  =  getNumerator().doubleValue();	      int    numerator    =    getNumerator().doubleValue();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	7	None	replace
16	[BUG]  [BUGGY]  return  numerator  *(double)denominator;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]        AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  return  numerator  *(double)denominator;  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  numerator  *(double)denominator;	  return    numerator    /(double)denominator;    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	1	None	replace
17	[BUG]  [BUGGY]  return  this.numerator  /(double)denominator;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]          AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  return  this.numerator  /(double)denominator;  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  this.numerator  /(double)denominator;	  return    numerator    /(double)denominator;    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	1	None	replace
18	[BUG]  [BUGGY]  return  num  /(double)denominator;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]            AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  return  num  /(double)denominator;  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  num  /(double)denominator;	  return    numerator    /(double)denominator;    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	1	None	replace
19	[BUG]  [BUGGY]  double  numerator  =  getNumber().doubleValue();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]          AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  double  numerator  =  getNumber().doubleValue();  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  numerator  =  getNumber().doubleValue();	      int    numerator    =    getNumber().doubleValue();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	4	None	replace
20	[BUG]  [BUGGY]  long  numerator  =  getNumber().doubleValue();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]            AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  long  numerator  =  getNumber().doubleValue();  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	long  numerator  =  getNumber().doubleValue();	      int    numerator    =    getNumber().doubleValue();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	4	None	replace
21	[BUG]  [BUGGY]  int  numerator  =  getNumber().doubleValue()  +  1;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]              AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  int  numerator  =  getNumber().doubleValue()  +  1;  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  getNumber().doubleValue()  +  1;	      int    numerator    =    getNumber().doubleValue();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	4	None	replace
22	[BUG]  [BUGGY]  return  getNumber().doubleValue();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]          AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  return  getNumber().doubleValue();  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  getNumber().doubleValue();	      	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	2	None	replace
23	[BUG]  [BUGGY]  return  getNumberValue().doubleValue();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]            AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  return  getNumberValue().doubleValue();  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  getNumberValue().doubleValue();	      	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	2	None	replace
24	[BUG]  [BUGGY]  return  getNumber().doubleValue()  -  getNumber().doubleValue();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]              AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  return  getNumber().doubleValue()  -  getNumber().doubleValue();  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  getNumber().doubleValue()  -  getNumber().doubleValue();	      	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	2	None	replace
25	[BUG]  [BUGGY]  return  getNumberValue();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  return  getNumberValue();  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  getNumberValue();	      	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	2	None	replace
26	[BUG]  [BUGGY]  double  numerator  =  getNumerator();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]        AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  double  numerator  =  getNumerator();  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  numerator  =  getNumerator();	      int    numerator    =    getNumerator();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	3	None	replace
27	[BUG]  [BUGGY]  int  numerator  =  getNumerator().denominator;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]          AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  int  numerator  =  getNumerator().denominator;  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  getNumerator().denominator;	      int    numerator    =    getNumerator();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	3	None	replace
28	[BUG]  [BUGGY]  long  numerator  =  getNumerator();  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]            AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  long  numerator  =  getNumerator();  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	long  numerator  =  getNumerator();	      int    numerator    =    getNumerator();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	3	None	replace
29	[BUG]  [BUGGY]  double  numerator  =  Math.min(numerator,  denominator);  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]            AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  double  numerator  =  Math.min(numerator,  denominator);  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	double  numerator  =  Math.min(numerator,  denominator);	      int    numerator    =    Math.min(numerator,    denominator);    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	5	None	replace
30	[BUG]  [BUGGY]  int  numerator  =  Math.min(numerator,  denominator,  maxIterations);  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]              AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  int  numerator  =  Math.min(numerator,  denominator,  maxIterations);  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(numerator,  denominator,  maxIterations);	      int    numerator    =    Math.min(numerator,    denominator);    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	5	None	replace
31	[BUG]  [BUGGY]  int  numerator  =  Math.min(denominator,  numerator);  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  int  numerator  =  Math.min(denominator,  numerator);  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(denominator,  numerator);	      int    numerator    =    Math.min(numerator,    denominator);    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	5	None	replace
32	[BUG]  [BUGGY]  int  numerator  =  Math.min(denominator,  number);  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                  AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  int  numerator  =  Math.min(denominator,  number);  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(denominator,  number);	      int    numerator    =    Math.min(numerator,    denominator);    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	5	None	replace
33	[BUG]  [BUGGY]  int  numerator  =  getNumber()  +  1;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]              AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  int  numerator  =  getNumber()  +  1;  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  getNumber()  +  1;	      int    numerator    =    getNumber();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	6	None	replace
34	[BUG]  [BUGGY]  return  numerator  /(double)numerator;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]        AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  return  numerator  /(double)numerator;  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  numerator  /(double)numerator;	  return    numerator    /(double)denominator;    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	1	None	replace
35	[BUG]  [BUGGY]  return  Math.sqrt(numerator);  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]          AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  return  Math.sqrt(numerator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(numerator);	      	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	2	None	replace
36	[BUG]  [BUGGY]  return  Math.sqrt(getNumerator());  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]            AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  return  Math.sqrt(getNumerator());  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(getNumerator());	      	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	2	None	replace
37	[BUG]  [BUGGY]  return  Math.sqrt(numerator  *  Math.pow(10,  num));  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]              AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  return  Math.sqrt(numerator  *  Math.pow(10,  num));  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(numerator  *  Math.pow(10,  num));	      	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	2	None	replace
38	[BUG]  [BUGGY]  return  Math.sqrt(numerator  /  getNumberOfIterations());  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]                AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  return  Math.sqrt(numerator  /  getNumberOfIterations());  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(numerator  /  getNumberOfIterations());	      	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	2	None	replace
39	[BUG]  [BUGGY]  int  numerator  =  Math.min(numerator,  maxDenominator);  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]            AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  int  numerator  =  Math.min(numerator,  maxDenominator);  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(numerator,  maxDenominator);	      int    numerator    =    Math.min(numerator,    denominator);    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	5	None	replace
40	[BUG]  [BUGGY]  int  denominator  =  getNumerator().denominator;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]        AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  int  denominator  =  getNumerator().denominator;  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  denominator  =  getNumerator().denominator;	      int    denominator    =    getNumerator();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	8	None	replace
41	[BUG]  [BUGGY]  int  numerator  =  Math.min(numerator,  denominator,  maxDenominator);  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]            AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  int  numerator  =  Math.min(numerator,  denominator,  maxDenominator);  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(numerator,  denominator,  maxDenominator);	      int    numerator    =    Math.min(numerator,    denominator);    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	5	None	replace
42	[BUG]  [BUGGY]  int  numerator  =  Math.min(numerator,  denominator  -  1);  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]              AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  int  numerator  =  Math.min(numerator,  denominator  -  1);  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  Math.min(numerator,  denominator  -  1);	      int    numerator    =    Math.min(numerator,    denominator);    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	5	None	replace
43	[BUG]  [BUGGY]  return  Math.sqrt(getNumerator(),  getDenominator());  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]          AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  return  Math.sqrt(getNumerator(),  getDenominator());  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	return  Math.sqrt(getNumerator(),  getDenominator());	      	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	2	None	replace
44	[BUG]  [BUGGY]  int  den  =  getNumber().doubleValue();  return  Math.sqrt(den);  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]            AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  int  den  =  getNumber().doubleValue();  return  Math.sqrt(den);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  den  =  getNumber().doubleValue();  return  Math.sqrt(den);	      	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	2	None	replace
45	[BUG]  [BUGGY]  int  den  =  Math.min(numerator,  denominator);  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]              AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  int  den  =  Math.min(numerator,  denominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  den  =  Math.min(numerator,  denominator);	      	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	2	None	replace
46	[BUG]  [BUGGY]  int  numerator  =  getNumerator().doubleValue()  +  1;  [CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable  [FE]        AssertionFailedError    [CONTEXT]    public  double  doubleValue()  {    [BUGGY]  int  numerator  =  getNumerator().doubleValue()  +  1;  [BUGGY]    return  (double)numerator  /  (double)denominator;  }  [CLASS]  Fraction  [METHOD]  doubleValue  [RETURN_TYPE]  double  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  object  ret  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.4472135954999579	270	270	1	replace	int  numerator  =  getNumerator().doubleValue()  +  1;	      int    numerator    =    getNumerator().doubleValue();    	non-compiled	[CE]  Fraction  is  not  abstract  and  does  not  override  abstract  method  compareTo(Fraction)  in  Comparable	7	None	replace
