bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(num  <  0  ||  den  <  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(num  <  0  ||  den  <  0)  {  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(num  <  0  ||  den  <  0)  {	  if(den    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
2	[BUG]  [BUGGY]  if(num  <  0  ||  den  >  Integer.MIN_VALUE  ||  den  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(num  <  0  ||  den  >  Integer.MIN_VALUE  ||  den  >  Integer.MAX_VALUE)  {  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(num  <  0  ||  den  >  Integer.MIN_VALUE  ||  den  >  Integer.MAX_VALUE)  {	  if(den    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
3	[BUG]  [BUGGY]  if(num  ==  Integer.MIN_VALUE  ||  den  <  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(num  ==  Integer.MIN_VALUE  ||  den  <  0)  {  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(num  ==  Integer.MIN_VALUE  ||  den  <  0)  {	  if(den    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
4	[BUG]  [BUGGY]  int  den  =  getNumerator().denominator();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  getNumerator().denominator();  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  getNumerator().denominator();	      int    den    =    getNumerator().intValue();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
5	[BUG]  [BUGGY]  int  den  =  getDenominator().intValue();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  getDenominator().intValue();  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  getDenominator().intValue();	      int    den    =    getNumerator().intValue();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
6	[BUG]  [BUGGY]  int  den  =  getNumberOfDenominators();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  getNumberOfDenominators();  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  getNumberOfDenominators();	      int    den    =    getNumberOfNumerations();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
7	[BUG]  [BUGGY]  int  den  =  getNumberOfDenominations();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  getNumberOfDenominations();  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  getNumberOfDenominations();	      int    den    =    getNumberOfNumerations();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
8	[BUG]  [BUGGY]  int  den  =  getDenominator();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  getDenominator();  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  getDenominator();	      int    den    =    getNumberOfNumerations();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
9	[BUG]  [BUGGY]  int  den  =  getNumberOfNumerations()  -  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  getNumberOfNumerations()  -  1;  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  getNumberOfNumerations()  -  1;	      int    den    =    getNumberOfNumerations();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
10	[BUG]  [BUGGY]  if(den  <  0  ||  num  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(den  <  0  ||  num  ==  0)  {  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(den  <  0  ||  num  ==  0)  {	  if(num    <    0    ||    den    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
11	[BUG]  [BUGGY]  if(num  <  0  ||  den  >=  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(num  <  0  ||  den  >=  0)  {  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(num  <  0  ||  den  >=  0)  {	  if(num    <    0    ||    den    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
12	[BUG]  [BUGGY]  num  =  Math.min(num,  den);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  num  =  Math.min(num,  den);  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	num  =  Math.min(num,  den);	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
13	[BUG]  [BUGGY]  int  den  =  getNumber().intValue()  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  getNumber().intValue()  +  1;  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  getNumber().intValue()  +  1;	      int    den    =    getNumber().intValue();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
14	[BUG]  [BUGGY]  int  den  =  getNumber().intValue()  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  getNumber().intValue()  -  1;  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  getNumber().intValue()  -  1;	      int    den    =    getNumber().intValue();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
15	[BUG]  [BUGGY]  int  den  =  getNumber().denominator();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  getNumber().denominator();  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  getNumber().denominator();	      int    den    =    getNumber().intValue();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
16	[BUG]  [BUGGY]  int  den  =  getNumber()  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  getNumber()  -  1;  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  getNumber()  -  1;	      int    den    =    getNumber();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
17	[BUG]  [BUGGY]  int  den  =  getNumber()  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  getNumber()  +  1;  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  getNumber()  +  1;	      int    den    =    getNumber();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
18	[BUG]  [BUGGY]  int  den  =  getNumber().doubleValue()  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  getNumber().doubleValue()  +  1;  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  getNumber().doubleValue()  +  1;	      int    den    =    getNumber().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
19	[BUG]  [BUGGY]  int  den  =  getNumber().doubleValue()  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  getNumber().doubleValue()  -  1;  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  getNumber().doubleValue()  -  1;	      int    den    =    getNumber().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
20	[BUG]  [BUGGY]  if(den  <  0  ||  den  >  ZERO)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(den  <  0  ||  den  >  ZERO)  {  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(den  <  0  ||  den  >  ZERO)  {	  if(num    <    0    ||    den    >    ZERO)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
21	[BUG]  [BUGGY]  if(num  <  0  ||  den  >  MINUS_ONE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(num  <  0  ||  den  >  MINUS_ONE)  {  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(num  <  0  ||  den  >  MINUS_ONE)  {	  if(num    <    0    ||    den    >    ZERO)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
22	[BUG]  [BUGGY]  if(num  <  0  ||  den  ==  ZERO)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(num  <  0  ||  den  ==  ZERO)  {  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(num  <  0  ||  den  ==  ZERO)  {	  if(num    <    0    ||    den    >    ZERO)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
23	[BUG]  [BUGGY]  int  den  =  num.intValue()  +  den;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  num.intValue()  +  den;  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  num.intValue()  +  den;	      int    den    =    num.intValue();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  float  den  =  num.intValue();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  float  den  =  num.intValue();  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	float  den  =  num.intValue();	      int    den    =    num.intValue();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  int  den  =  num.doubleValue();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  num.doubleValue();  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  num.doubleValue();	      int    den    =    num.intValue();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
26	[BUG]  [BUGGY]  int  den  =  Math.max(num,  den);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  Math.max(num,  den);  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  Math.max(num,  den);	      int    den    =    Math.min(den,    num);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
27	[BUG]  [BUGGY]  if(num  <  0  ||  den  >  Integer.MAX_VALUE  ||  den  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(num  <  0  ||  den  >  Integer.MAX_VALUE  ||  den  >  Integer.MAX_VALUE)  {  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(num  <  0  ||  den  >  Integer.MAX_VALUE  ||  den  >  Integer.MAX_VALUE)  {	  if(num    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
28	[BUG]  [BUGGY]  if(den  <  0  ||  num  >  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(den  <  0  ||  num  >  0)  {  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(den  <  0  ||  num  >  0)  {	  if(num    <    0    ||    den    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
29	[BUG]  [BUGGY]  if(den  <  0  ||  den  >  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(den  <  0  ||  den  >  0)  {  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(den  <  0  ||  den  >  0)  {	  if(num    <    0    ||    den    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
30	[BUG]  [BUGGY]  int  den  =  Math.min(num,  den  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  Math.min(num,  den  +  1);  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  Math.min(num,  den  +  1);	      int    den    =    Math.min(num,    den);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
31	[BUG]  [BUGGY]  int  den  =  Math.min(num,  den  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  Math.min(num,  den  -  1);  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  Math.min(num,  den  -  1);	      int    den    =    Math.min(num,    den);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
32	[BUG]  [BUGGY]  int  den  =  getNumber().floatValue();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  getNumber().floatValue();  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  getNumber().floatValue();	      int    den    =    getNumber().intValue();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
33	[BUG]  [BUGGY]  if(num  <  0  ||  den  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(num  <  0  ||  den  >  Integer.MAX_VALUE)  {  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(num  <  0  ||  den  >  Integer.MAX_VALUE)  {	  if(den    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
34	[BUG]  [BUGGY]  if(den  <  0  ||  den  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(den  <  0  ||  den  >  Integer.MAX_VALUE)  {  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(den  <  0  ||  den  >  Integer.MAX_VALUE)  {	  if(den    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
35	[BUG]  [BUGGY]  if(num  <  0  ||  den  >  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(num  <  0  ||  den  >  Integer.MIN_VALUE)  {  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(num  <  0  ||  den  >  Integer.MIN_VALUE)  {	  if(den    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
36	[BUG]  [BUGGY]  int  den  =  getNumberOfElements();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  getNumberOfElements();  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  getNumberOfElements();	      int    den    =    getNumberOfNumerations();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
37	[BUG]  [BUGGY]  if(num  <  0  ||  den  >  10)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(num  <  0  ||  den  >  10)  {  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(num  <  0  ||  den  >  10)  {	  if(num    <    0    ||    den    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
38	[BUG]  [BUGGY]  int  den  =  getNumerator().intValue()  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  getNumerator().intValue()  +  1;  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  getNumerator().intValue()  +  1;	      int    den    =    getNumerator().intValue();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
39	[BUG]  [BUGGY]  if(den  <  0  ||  num  >  ZERO)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(den  <  0  ||  num  >  ZERO)  {  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(den  <  0  ||  num  >  ZERO)  {	  if(num    <    0    ||    den    >    ZERO)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
40	[BUG]  [BUGGY]  Math.min(den,  num);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  Math.min(den,  num);  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	Math.min(den,  num);	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
41	[BUG]  [BUGGY]  int  den  =  num.intValue()  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  num.intValue()  +  1;  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  num.intValue()  +  1;	      int    den    =    num.intValue();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
42	[BUG]  [BUGGY]  int  den  =  this.num.intValue();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  this.num.intValue();  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  this.num.intValue();	      int    den    =    num.intValue();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
43	[BUG]  [BUGGY]  int  den  =  getDenied();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  getDenied();  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  getDenied();	      int    den    =    getNumber();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
44	[BUG]  [BUGGY]  if(den  <  0  ||  den  >  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(den  <  0  ||  den  >  Integer.MIN_VALUE)  {  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(den  <  0  ||  den  >  Integer.MIN_VALUE)  {	  if(den    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
45	[BUG]  [BUGGY]  int  den  =  getNumber().intValue()  -  2;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  getNumber().intValue()  -  2;  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  getNumber().intValue()  -  2;	      int    den    =    getNumber().intValue();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
46	[BUG]  [BUGGY]  int  den  =  getNumber().longValue();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  getNumber().longValue();  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  getNumber().longValue();	      int    den    =    getNumber().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
47	[BUG]  [BUGGY]  int  den  =  n.intValue();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  n.intValue();  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  n.intValue();	      int    den    =    num.intValue();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
48	[BUG]  [BUGGY]  if(den  <  0)  {  if(num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MAX_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "zero  denominator  in  fraction  {  0  }  /  {  1  }   ",  num,  den);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(den  <  0)  {  if(num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MAX_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "zero  denominator  in  fraction  {  0  }  /  {  1  }   ",  num,  den);  }  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(den  <  0)  {  if(num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MAX_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "zero  denominator  in  fraction  {  0  }  /  {  1  }   ",  num,  den);  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
49	[BUG]  [BUGGY]  if(den  <  0)  {  if(num  <  Integer.MIN_VALUE  ||  den  >  Integer.MAX_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "zero  denominator  in  fraction  {  0  }  /  {  1  }   ",  num,  den);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(den  <  0)  {  if(num  <  Integer.MIN_VALUE  ||  den  >  Integer.MAX_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "zero  denominator  in  fraction  {  0  }  /  {  1  }   ",  num,  den);  }  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(den  <  0)  {  if(num  <  Integer.MIN_VALUE  ||  den  >  Integer.MAX_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "zero  denominator  in  fraction  {  0  }  /  {  1  }   ",  num,  den);  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
50	[BUG]  [BUGGY]  if(den  <  0)  {  if(num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MAX_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {  0  }  /  {  1  }   ",  num,  den);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(den  <  0)  {  if(num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MAX_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {  0  }  /  {  1  }   ",  num,  den);  }  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(den  <  0)  {  if(num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MAX_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {  0  }  /  {  1  }   ",  num,  den);  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
51	[BUG]  [BUGGY]  if(den  <  0)  {  if(num  <  Integer.MIN_VALUE  ||  den  >  Integer.MAX_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {  0  }  /  {  1  }   ",  num,  den);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(den  <  0)  {  if(num  <  Integer.MIN_VALUE  ||  den  >  Integer.MAX_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {  0  }  /  {  1  }   ",  num,  den);  }  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(den  <  0)  {  if(num  <  Integer.MIN_VALUE  ||  den  >  Integer.MAX_VALUE)  {  throw  MathRuntimeException.createArithmeticException( "overflow  in  fraction  {  0  }  /  {  1  }   ",  num,  den);  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
52	[BUG]  [BUGGY]  if(den  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(den  <  =  0)  {  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(den  <  =  0)  {	  if(num    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
53	[BUG]  [BUGGY]  int  den  =  Math.min(den,  num  +  1,  den);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  Math.min(den,  num  +  1,  den);  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  Math.min(den,  num  +  1,  den);	      int    den    =    Math.min(den,    num);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
54	[BUG]  [BUGGY]  int  den  =  Math.min(den,  num  +  1);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  int  den  =  Math.min(den,  num  +  1);  [BUGGY]    if  (den  ==  0)  {  throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	int  den  =  Math.min(den,  num  +  1);	      int    den    =    Math.min(den,    num);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
55	[BUG]  [BUGGY]  if(den  <  0  ||  num  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(den  <  0  ||  num  ==  Integer.MAX_VALUE)  {  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(den  <  0  ||  num  ==  Integer.MAX_VALUE)  {	  if(num    <    0    ||    den    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
56	[BUG]  [BUGGY]  if(den  <  0  ||  num  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Fraction(int  num,  int  den)  {  super();    [BUGGY]  if(den  <  0  ||  num  ==  Integer.MIN_VALUE)  {  [BUGGY]    throw  MathRuntimeException.createArithmeticException(   "zero  denominator  in  fraction  {0}/{1}   ",  num,  den);  }  if  (den  <  0)  {  if  (num  ==  Integer.MIN_VALUE  ||  den  ==  Integer.MIN_VALUE)  {  throw  MathRuntimeException.createArithmeticException(   "overflow  in  fraction  {0}/{1},  cannot  negate   ",  num,  den);  }  num  =  -num;  den  =  -den;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(int,int)  int  num  int  den  [VARIABLES]  Fraction  MINUS_ONE  ONE  TWO  ZERO  boolean  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  d  den  denominator  maxDenominator  maxIterations  n  num  numerator  	projects/Math91/src/java/org/apache/commons/math/fraction/Fraction.java	0.2182178902359924	210	210	1	replace	if(den  <  0  ||  num  ==  Integer.MIN_VALUE)  {	  if(num    <    0    ||    den    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
