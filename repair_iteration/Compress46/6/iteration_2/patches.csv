bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  bucket  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  >  expected  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  bucket  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	bucket  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  >  expected	81	None	replace
2	[BUG]  [BUGGY]  hingeger  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  >  expected  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  hingeger  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	hingeger  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  >  expected	81	None	replace
3	[BUG]  [BUGGY]  vice(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  vice(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	vice(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	81	None	replace
4	[BUG]  [BUGGY]  bucket  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  >  expected  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  bucket  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	bucket  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  >  expected	81	None	replace
5	[BUG]  [BUGGY]  hingeger  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  >  expected  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  hingeger  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	hingeger  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  >  expected	81	None	replace
6	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  /  1);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  /  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  /  1);	  return    new    ZipLong(l    /    1);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	133	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  /  2);	  return    new    ZipLong(l    /    1);    	compilable	  [FE]  AssertionError  	133	2	replace
8	[BUG]  [BUGGY]  return  new  ZipLong(l  /  2);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  /  2);	  return    new    ZipLong(l    /    1);    	compilable	  [FE]  AssertionError  	133	2	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  *  2);	  return    new    ZipLong(l    /    1);    	compilable	  [FE]  AssertionError  	133	2	replace
10	[BUG]  [BUGGY]  return  new  ZipLong(l  *  2);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  2);	  return    new    ZipLong(l    /    1);    	compilable	  [FE]  AssertionError  	133	2	replace
11	[BUG]  [BUGGY]  return  new  ZipLong(two_TO_32  /  1);  [CE]  cannot  find  symbol  two_TO_32  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_TO_32  /  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_TO_32  /  1);	  return    new    ZipLong(l    /    1);    	non-compiled	[CE]  cannot  find  symbol  two_TO_32	133	None	replace
12	[BUG]  [BUGGY]  return  new  ZipLong(two_to_32  /  1);  [CE]  cannot  find  symbol  two_to_32  [FE]            AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_to_32  /  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_to_32  /  1);	  return    new    ZipLong(l    /    1);    	non-compiled	[CE]  cannot  find  symbol  two_to_32	133	None	replace
13	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  l  /  1);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]              AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  l  /  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  l  /  1);	  return    new    ZipLong(l    /    1);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	133	None	replace
14	[BUG]  [BUGGY]  long  l  =  Long.parseLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  Long.parseLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  Long.parseLong(l);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    Long.parseLong(l);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	50	None	replace
15	[BUG]  [BUGGY]  long  l  =  Long.parseLong(tWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  Long.parseLong(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  Long.parseLong(tWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    Long.parseLong(l);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	50	None	replace
16	[BUG]  [BUGGY]  Long  l  =  Long.parseLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  Long  l  =  Long.parseLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	Long  l  =  Long.parseLong(l);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    Long.parseLong(l);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	50	None	replace
17	[BUG]  [BUGGY]  long  l  =  Long.parseLong(two_to_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  Long.parseLong(two_to_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  Long.parseLong(two_to_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    Long.parseLong(l);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	50	None	replace
18	[BUG]  [BUGGY]  long  l  =  Long.parseLong(two_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  Long.parseLong(two_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  Long.parseLong(two_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    Long.parseLong(l);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	50	None	replace
19	[BUG]  [BUGGY]  short  l  =  Long.parseLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  short  l  =  Long.parseLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	short  l  =  Long.parseLong(l);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    Long.parseLong(l);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	50	None	replace
20	[BUG]  [BUGGY]  return  new  ZipLong(l,  tWorst);  [CE]  cannot  find  symbol  tWorst  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  tWorst);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  tWorst);	  return    new    ZipLong(tWorst,    l);    	non-compiled	[CE]  cannot  find  symbol  tWorst	131	None	replace
21	[BUG]  [BUGGY]  return  new  ZipLong(two_to_32,  l);  [CE]  cannot  find  symbol  two_to_32  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_to_32,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_to_32,  l);	  return    new    ZipLong(tWorst,    l);    	non-compiled	[CE]  cannot  find  symbol  two_to_32	131	None	replace
22	[BUG]  [BUGGY]  return  new  ZipLong(tWorstamp,  l);  [CE]  cannot  find  symbol  tWorstamp  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWorstamp,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWorstamp,  l);	  return    new    ZipLong(tWorst,    l);    	non-compiled	[CE]  cannot  find  symbol  tWorstamp	131	None	replace
23	[BUG]  [BUGGY]  return  new  ZipLong(two_TO_32,  l);  [CE]  cannot  find  symbol  two_TO_32  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_TO_32,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_TO_32,  l);	  return    new    ZipLong(tWorst,    l);    	non-compiled	[CE]  cannot  find  symbol  two_TO_32	131	None	replace
24	[BUG]  [BUGGY]  return  new  ZipLong(l  -  2);  new  ZipLong(l  -  2);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  2);  new  ZipLong(l  -  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    2);    new  ZipLong(l  -  2);	  	non-compiled	[CE]  unreachable  statement	79	None	add
25	[BUG]  [BUGGY]  return  new  ZipLong(l  -  2);  ((  ZipLong)l).longValue();  [CE]  inconvertible  types  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  2);  ((  ZipLong)l).longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    2);    ((  ZipLong)l).longValue();	  	non-compiled	[CE]  inconvertible  types	79	None	add
26	[BUG]  [BUGGY]  return  new  ZipLong(l  -  2);  long  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  2);  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    2);    long  l  =  getTime().longValue();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	79	None	add
27	[BUG]  [BUGGY]  return  new  ZipLong(l  -  2);  long  l  -  2;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  2);  long  l  -  2;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    2);    long  l  -  2;	  	non-compiled	[CE]  ';'  expected	79	None	add
28	[BUG]  [BUGGY]  return  new  ZipLong(l  -  2);  ((  ZipLong)l  -  2).longValue();  [CE]  inconvertible  types  [FE]            AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  2);  ((  ZipLong)l  -  2).longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    2);    ((  ZipLong)l  -  2).longValue();	  	non-compiled	[CE]  inconvertible  types	79	None	add
29	[BUG]  [BUGGY]  return  new  ZipLong(l  -  2);  long  l  =  getTime();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]              AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  2);  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    2);    long  l  =  getTime();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	79	None	add
30	[BUG]  [BUGGY]  return  new  ZipLong(l  -  2);  l  -  2;  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  2);  l  -  2;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    2);    l  -  2;	  	non-compiled	[CE]  not  a  statement	79	None	add
31	[BUG]  [BUGGY]  return  new  ZipLong(l  -  2);  ((  ZipLong)l).setLong(l  -  2);  [CE]  inconvertible  types  [FE]                  AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  2);  ((  ZipLong)l).setLong(l  -  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    2);    ((  ZipLong)l).setLong(l  -  2);	  	non-compiled	[CE]  inconvertible  types	79	None	add
32	[BUG]  [BUGGY]  return  ZipLong.valueOf(tWO_TO_32);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  ZipLong.valueOf(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  ZipLong.valueOf(tWO_TO_32);	  return    ZipLong.valueOf(l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	114	None	replace
33	[BUG]  [BUGGY]  return  ZipLong.valueOf(l,  TWO_TO_32);  [CE]  cannot  find  symbol  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  ZipLong.valueOf(l,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  ZipLong.valueOf(l,  TWO_TO_32);	  return    ZipLong.valueOf(l);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
34	[BUG]  [BUGGY]  return  ZipLong.valueOf(two_TO_32);  [CE]  cannot  find  symbol  two_TO_32  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  ZipLong.valueOf(two_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  ZipLong.valueOf(two_TO_32);	  return    ZipLong.valueOf(l);    	non-compiled	[CE]  cannot  find  symbol  two_TO_32	114	None	replace
35	[BUG]  [BUGGY]  return  ZipLong.valueOf(l  +  TWO_TO_32);  [CE]  cannot  find  symbol  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  ZipLong.valueOf(l  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  ZipLong.valueOf(l  +  TWO_TO_32);	  return    ZipLong.valueOf(l);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
36	[BUG]  [BUGGY]  return  ZipLong.valueOf(l,  X5455_ExtendedTimestamp);  [CE]  cannot  find  symbol  X5455_ExtendedTimestamp  [FE]                                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  ZipLong.valueOf(l,  X5455_ExtendedTimestamp);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  ZipLong.valueOf(l,  X5455_ExtendedTimestamp);	  return    ZipLong.valueOf(l);    	non-compiled	[CE]  cannot  find  symbol  X5455_ExtendedTimestamp	114	None	replace
37	[BUG]  [BUGGY]  return  ZipLong.valueOf(l,  X5455_Timestamp);  [CE]  cannot  find  symbol  X5455_Timestamp  [FE]                                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  ZipLong.valueOf(l,  X5455_Timestamp);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  ZipLong.valueOf(l,  X5455_Timestamp);	  return    ZipLong.valueOf(l);    	non-compiled	[CE]  cannot  find  symbol  X5455_Timestamp	114	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }  else  {  return  new  ZipLong(l  -  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }  else  {  return  new  ZipLong(l  -  TWO_TO_32);  }	  return    new    ZipLong(l    -    TWO_TO_32);    return    new    ZipLong(l    -    TWO_TO_32);    	compilable	  [FE]  AssertionError  	128	1	replace
39	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }  else  {  return  new  ZipLong(l  -  TWO_TO_32);  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }  else  {  return  new  ZipLong(l  -  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }  else  {  return  new  ZipLong(l  -  TWO_TO_32);  }	  return    new    ZipLong(l    -    TWO_TO_32);    return    new    ZipLong(l    -    TWO_TO_32);    	compilable	  [FE]  AssertionError  	128	1	replace
40	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }	  return    new    ZipLong(l    -    TWO_TO_32);    return    new    ZipLong(l    -    TWO_TO_32);    	non-compiled	[CE]  missing  return  statement	128	None	replace
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }  else  {  return  new  ZipLong(l  -  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	if(l  >  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }  else  {  return  new  ZipLong(l  -  TWO_TO_32);  }	  return    new    ZipLong(l    -    TWO_TO_32);    return    new    ZipLong(l    -    TWO_TO_32);    	compilable	  [FE]  AssertionError  	128	1	replace
42	[BUG]  [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }  else  {  return  new  ZipLong(l  -  TWO_TO_32);  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }  else  {  return  new  ZipLong(l  -  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  >  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }  else  {  return  new  ZipLong(l  -  TWO_TO_32);  }	  return    new    ZipLong(l    -    TWO_TO_32);    return    new    ZipLong(l    -    TWO_TO_32);    	compilable	  [FE]  AssertionError  	128	1	replace
43	[BUG]  [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  >  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }	  return    new    ZipLong(l    -    TWO_TO_32);    return    new    ZipLong(l    -    TWO_TO_32);    	non-compiled	[CE]  missing  return  statement	128	None	replace
44	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }	  return    new    ZipLong(l    -    TWO_TO_32);    return    new    ZipLong(l    -    TWO_TO_32);    	non-compiled	[CE]  missing  return  statement	128	None	replace
45	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    return    new    ZipLong(TWO_TO_32);    	non-compiled	[CE]  missing  return  statement	146	None	replace
46	[BUG]  [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    return    new    ZipLong(TWO_TO_32);    	non-compiled	[CE]  missing  return  statement	146	None	replace
47	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    return    new    ZipLong(TWO_TO_32);    	compilable	  [FE]  AssertionError  	146	2	replace
48	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    return    new    ZipLong(TWO_TO_32);    	compilable	  [FE]  AssertionError  	146	2	replace
49	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    return    new    ZipLong(TWO_TO_32);    	compilable	  [FE]  AssertionError  	146	2	replace
50	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    return    new    ZipLong(TWO_TO_32);    	compilable	  [FE]  AssertionError  	146	2	replace
51	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    return    new    ZipLong(TWO_TO_32);    	compilable	  [FE]  IllegalArgumentException  	146	4	replace
52	[BUG]  [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [FE]  IllegalArgumentException  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    return    new    ZipLong(TWO_TO_32);    	compilable	  [FE]  IllegalArgumentException  	146	4	replace
53	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    return    new    ZipLong(TWO_TO_32);    	compilable	  [FE]  AssertionError  	146	2	replace
54	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  return  new  ZipLong(TWO_TO_32);  }  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    return    new    ZipLong(TWO_TO_32);    	compilable	  [FE]  AssertionError  	146	2	replace
55	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    ZipLong(TWO_TO_32);    return    new    ZipLong(TWO_TO_32);    	compilable	  [FE]  AssertionError  	146	2	replace
56	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    ZipLong(TWO_TO_32);    return    new    ZipLong(TWO_TO_32);    	compilable	  [FE]  AssertionError  	146	2	replace
57	[BUG]  [BUGGY]  long  l  =  unixTimeToZipLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  unixTimeToZipLong(l);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTimeToZipLong(l);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	108	None	replace
58	[BUG]  [BUGGY]  long  l  =  unixTimeToZipLong(tWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  unixTimeToZipLong(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  unixTimeToZipLong(tWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTimeToZipLong(l);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	108	None	replace
59	[BUG]  [BUGGY]  long  l  =  unixTimeToZipLong(two_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  unixTimeToZipLong(two_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  unixTimeToZipLong(two_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTimeToZipLong(l);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	108	None	replace
60	[BUG]  [BUGGY]  Long  l  =  unixTimeToZipLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  Long  l  =  unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	Long  l  =  unixTimeToZipLong(l);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTimeToZipLong(l);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	108	None	replace
61	[BUG]  [BUGGY]  short  l  =  unixTimeToZipLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  short  l  =  unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	short  l  =  unixTimeToZipLong(l);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTimeToZipLong(l);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	108	None	replace
62	[BUG]  [BUGGY]  null  l  =  unixTimeToZipLong(l);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  null  l  =  unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	null  l  =  unixTimeToZipLong(l);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTimeToZipLong(l);    	non-compiled	[CE]  not  a  statement	108	None	replace
63	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(tWO_TO_32),  l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(tWO_TO_32),  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(tWO_TO_32),  l);	  return    new    ZipLong(unixTimeToZipLong(tWO_TO_32));    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	46	None	replace
64	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(tWO_TO_32  +  l));  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(tWO_TO_32  +  l));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(tWO_TO_32  +  l));	  return    new    ZipLong(unixTimeToZipLong(tWO_TO_32));    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	46	None	replace
65	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(two_TO_32));  [CE]  cannot  find  symbol  two_TO_32  [FE]                                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(two_TO_32));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(two_TO_32));	  return    new    ZipLong(unixTimeToZipLong(tWO_TO_32));    	non-compiled	[CE]  cannot  find  symbol  two_TO_32	46	None	replace
66	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(two_to_32));  [CE]  cannot  find  symbol  two_to_32  [FE]                                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(two_to_32));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(two_to_32));	  return    new    ZipLong(unixTimeToZipLong(tWO_TO_32));    	non-compiled	[CE]  cannot  find  symbol  two_to_32	46	None	replace
67	[BUG]  [BUGGY]  lendemain(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  lendemain(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	lendemain(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "Timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	88	None	replace
68	[BUG]  [BUGGY]  hingeger  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  >  expected  [FE]                                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  hingeger  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	hingeger  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "Timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  >  expected	88	None	replace
69	[BUG]  [BUGGY]  lendemain(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  lendemain(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	lendemain(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "Timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	88	None	replace
70	[BUG]  [BUGGY]  vice(l)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  vice(l)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	vice(l)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "Timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	88	None	replace
71	[BUG]  [BUGGY]  vice(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  vice(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	vice(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	86	None	replace
72	[BUG]  [BUGGY]  aughtInvalidTimestamp( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  [CE]  cannot  find  symbol  [FE]                                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  aughtInvalidTimestamp( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	aughtInvalidTimestamp( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
73	[BUG]  [BUGGY]  bucket  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  [CE]  >  expected  [FE]                                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  bucket  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	bucket  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  >  expected	86	None	replace
74	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  ACCESS_TIME_BIT);  [CE]  no  suitable  constructor  found  for  ZipLong(long,byte)  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  ACCESS_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  ACCESS_TIME_BIT);	  return    new    ZipLong(l    +    1,    X5455Timestamp.DEFAULT_TIME_BIT);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,byte)	153	None	replace
75	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  TWO_TO_32,  X5455Timestamp.DEFAULT_TIME_BIT);  [CE]  cannot  find  symbol  X5455Timestamp  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  TWO_TO_32,  X5455Timestamp.DEFAULT_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  TWO_TO_32,  X5455Timestamp.DEFAULT_TIME_BIT);	  return    new    ZipLong(l    +    1,    X5455Timestamp.DEFAULT_TIME_BIT);    	non-compiled	[CE]  cannot  find  symbol  X5455Timestamp	153	None	replace
76	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  ACCESS_TIME_BIT,  X5455Timestamp.DEFAULT_TIME_BIT);  [CE]  cannot  find  symbol  X5455Timestamp  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  ACCESS_TIME_BIT,  X5455Timestamp.DEFAULT_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  ACCESS_TIME_BIT,  X5455Timestamp.DEFAULT_TIME_BIT);	  return    new    ZipLong(l    +    1,    X5455Timestamp.DEFAULT_TIME_BIT);    	non-compiled	[CE]  cannot  find  symbol  X5455Timestamp	153	None	replace
77	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  X5455Timestamp.DEFAULT_TIME_BIT,  ACCESS_TIME_BIT);  [CE]  cannot  find  symbol  X5455Timestamp  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  X5455Timestamp.DEFAULT_TIME_BIT,  ACCESS_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  X5455Timestamp.DEFAULT_TIME_BIT,  ACCESS_TIME_BIT);	  return    new    ZipLong(l    +    1,    X5455Timestamp.DEFAULT_TIME_BIT);    	non-compiled	[CE]  cannot  find  symbol  X5455Timestamp	153	None	replace
78	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  X5455Timestamp.DEFAULT_TIME_BIT,  TWO_TO_32);  [CE]  cannot  find  symbol  X5455Timestamp  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  X5455Timestamp.DEFAULT_TIME_BIT,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  X5455Timestamp.DEFAULT_TIME_BIT,  TWO_TO_32);	  return    new    ZipLong(l    +    1,    X5455Timestamp.DEFAULT_TIME_BIT);    	non-compiled	[CE]  cannot  find  symbol  X5455Timestamp	153	None	replace
79	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  ACCESS_TIME_BIT.DEFAULT_TIME_BIT);  [CE]  byte  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  ACCESS_TIME_BIT.DEFAULT_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  ACCESS_TIME_BIT.DEFAULT_TIME_BIT);	  return    new    ZipLong(l    +    1,    X5455Timestamp.DEFAULT_TIME_BIT);    	non-compiled	[CE]  byte  cannot  be  dereferenced	153	None	replace
80	[BUG]  [BUGGY]  return  new  ZipLong(l,  unixTime);  [CE]  cannot  find  symbol  unixTime  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  unixTime);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  unixTime);	  return    new    ZipLong(l,    l);    	non-compiled	[CE]  cannot  find  symbol  unixTime	3	None	replace
81	[BUG]  [BUGGY]  return  new  ZipLong(l,  ACCESS_TIME_BIT);  [CE]  no  suitable  constructor  found  for  ZipLong(long,byte)  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  ACCESS_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  ACCESS_TIME_BIT);	  return    new    ZipLong(l,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,byte)	3	None	replace
82	[BUG]  [BUGGY]  return  new  ZipLong(l,  X5455_ExtendedTimestamp);  [CE]  cannot  find  symbol  X5455_ExtendedTimestamp  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  X5455_ExtendedTimestamp);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  X5455_ExtendedTimestamp);	  return    new    ZipLong(l,    l);    	non-compiled	[CE]  cannot  find  symbol  X5455_ExtendedTimestamp	3	None	replace
83	[BUG]  [BUGGY]  return  new  ZipLong(l,  accessTime);  [CE]  non-static  variable  accessTime  cannot  be  referenced  from  a  static  context  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  accessTime);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  accessTime);	  return    new    ZipLong(l,    l);    	non-compiled	[CE]  non-static  variable  accessTime  cannot  be  referenced  from  a  static  context	3	None	replace
84	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  TWO_TO_32);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  TWO_TO_32);	  return    new    ZipLong(unixTimeToZipLong(l);    	non-compiled	[CE]  ')'  expected	125	None	replace
85	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  0);  [CE]  no  suitable  constructor  found  for  ZipLong(ZipLong,int)  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  0);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  0);	  return    new    ZipLong(unixTimeToZipLong(l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(ZipLong,int)	125	None	replace
86	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(tWO_TO_32,  l);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(tWO_TO_32,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(tWO_TO_32,  l);	  return    new    ZipLong(unixTimeToZipLong(l);    	non-compiled	[CE]  ')'  expected	125	None	replace
87	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  18);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  18);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  18);	  return    new    ZipLong(l    +    18);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	35	None	replace
88	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  16);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  +  16);	  return    new    ZipLong(l    +    18);    	compilable	  [FE]  AssertionError  	35	2	replace
89	[BUG]  [BUGGY]  return  new  ZipLong(l  +  16);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  16);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  16);	  return    new    ZipLong(l    +    18);    	compilable	  [FE]  AssertionError  	35	2	replace
90	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  32);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  32);	  return    new    ZipLong(l    +    32);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	118	None	replace
91	[BUG]  [BUGGY]  return  new  ZipLong(l  +  32,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  32,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  32,  l);	  return    new    ZipLong(l    +    32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	118	None	replace
92	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  /  32);	  return    new    ZipLong(l    +    32);    	compilable	  [FE]  AssertionError  	118	2	replace
93	[BUG]  [BUGGY]  return  new  ZipLong(l  /  32);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  /  32);	  return    new    ZipLong(l    +    32);    	compilable	  [FE]  AssertionError  	118	2	replace
94	[BUG]  [BUGGY]  L  -  TWO_TO_32;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  L  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	L  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    L    -    TWO_TO_32;    	non-compiled	[CE]  not  a  statement	62	None	replace
95	[BUG]  [BUGGY]  long  l  =  new  ZipLong(l  -  TWO_TO_32);  L  -  TWO_TO_32;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  new  ZipLong(l  -  TWO_TO_32);  L  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  new  ZipLong(l  -  TWO_TO_32);  L  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    L    -    TWO_TO_32;    	non-compiled	[CE]  not  a  statement	62	None	replace
96	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  L  -  TWO_TO_32;  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  L  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  TWO_TO_32);  L  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    L    -    TWO_TO_32;    	non-compiled	[CE]  not  a  statement	62	None	replace
97	[BUG]  [BUGGY]  L  -=  TWO_TO_32;  [CE]  cannot  find  symbol  L  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  L  -=  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	L  -=  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    L    -    TWO_TO_32;    	non-compiled	[CE]  cannot  find  symbol  L	62	None	replace
98	[BUG]  [BUGGY]  long  l  =  l  -  TWO_TO_32;  L  -  TWO_TO_32;  [CE]  not  a  statement  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  l  -  TWO_TO_32;  L  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  l  -  TWO_TO_32;  L  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    L    -    TWO_TO_32;    	non-compiled	[CE]  not  a  statement	62	None	replace
99	[BUG]  [BUGGY]  long  l  =  Long.parseLong(tWO_TO_32);  L  -  TWO_TO_32;  [CE]  not  a  statement  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  Long.parseLong(tWO_TO_32);  L  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  Long.parseLong(tWO_TO_32);  L  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    L    -    TWO_TO_32;    	non-compiled	[CE]  not  a  statement	62	None	replace
100	[BUG]  [BUGGY]  long  l  =  unixTime(l  +  TWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  unixTime(l  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  unixTime(l  +  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTime(l    +    TWO_TO_32);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	54	None	replace
101	[BUG]  [BUGGY]  Long  l  =  unixTime(l  +  TWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  Long  l  =  unixTime(l  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	Long  l  =  unixTime(l  +  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTime(l    +    TWO_TO_32);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	54	None	replace
102	[BUG]  [BUGGY]  short  l  =  unixTime(l  +  TWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  short  l  =  unixTime(l  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	short  l  =  unixTime(l  +  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTime(l    +    TWO_TO_32);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	54	None	replace
103	[BUG]  [BUGGY]  null  l  =  unixTime(l  +  TWO_TO_32);  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  null  l  =  unixTime(l  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	null  l  =  unixTime(l  +  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTime(l    +    TWO_TO_32);    	non-compiled	[CE]  not  a  statement	54	None	replace
104	[BUG]  [BUGGY]  int  l  =  unixTime(l  +  TWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  int  l  =  unixTime(l  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	int  l  =  unixTime(l  +  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTime(l    +    TWO_TO_32);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	54	None	replace
105	[BUG]  [BUGGY]  l  =  unixTime(l  +  TWO_TO_32);  [CE]  cannot  find  symbol  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  l  =  unixTime(l  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	l  =  unixTime(l  +  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTime(l    +    TWO_TO_32);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
106	[BUG]  [BUGGY]  long  l  =  getTime();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  getTime();	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    =    getTime();    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	129	None	replace
107	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  =  getTime();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  TWO_TO_32);  long  l  =  getTime();	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    =    getTime();    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	129	None	replace
108	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l);  long  l  =  getTime();  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l);  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32,  l);  long  l  =  getTime();	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    =    getTime();    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	129	None	replace
109	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  long  l  =  getTime();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  /  TWO_TO_32);  long  l  =  getTime();	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    =    getTime();    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	129	None	replace
110	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  getTime());  long  l  =  getTime();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  getTime());  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32,  getTime());  long  l  =  getTime();	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    =    getTime();    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
111	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  /  TWO_TO_32,  l);	  return    new    ZipLong(l    /    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	31	None	replace
112	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  /  TWO_TO_32  +  1);	  return    new    ZipLong(l    /    TWO_TO_32);    	compilable	  [FE]  AssertionError  	31	2	replace
113	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32  +  1);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  /  TWO_TO_32  +  1);	  return    new    ZipLong(l    /    TWO_TO_32);    	compilable	  [FE]  AssertionError  	31	2	replace
114	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32)+  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32)+  1;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  /  TWO_TO_32)+  1;	  return    new    ZipLong(l    /    TWO_TO_32);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	31	None	replace
115	[BUG]  [BUGGY]  return  new  ZipLong(l  /  DateTimeConstants.MILLIS_PER_SECOND);  [CE]  cannot  find  symbol  DateTimeConstants  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  DateTimeConstants.MILLIS_PER_SECOND);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  /  DateTimeConstants.MILLIS_PER_SECOND);	  return    new    ZipLong(l    /    TWO_TO_32);    	non-compiled	[CE]  cannot  find  symbol  DateTimeConstants	31	None	replace
116	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  missing  return  statement  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  missing  return  statement	17	None	replace
117	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	compilable	  [FE]  IllegalArgumentException  	17	4	replace
118	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  [FE]  IllegalArgumentException  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	compilable	  [FE]  IllegalArgumentException  	17	4	replace
119	[BUG]  [BUGGY]  result  =  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  cannot  find  symbol  result  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  result  =  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	result  =  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol  result	17	None	replace
120	[BUG]  [BUGGY]  while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer:  [CE]  unclosed  string  literal  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer:  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer:	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  unclosed  string  literal	17	None	replace
121	[BUG]  [BUGGY]  while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer:   "  +  l);  }  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer:   "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer:   "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
122	[BUG]  [BUGGY]  while(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer:  [CE]  unclosed  string  literal  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer:  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer:	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  unclosed  string  literal	17	None	replace
123	[BUG]  [BUGGY]  new  ZipLong(l  +  TWO_TO_32);  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  new  ZipLong(l  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	new  ZipLong(l  +  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    new    ZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  missing  return  statement	47	None	replace
124	[BUG]  [BUGGY]  new  ZipLong(l  +  10  +  TWO_TO_32);  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  new  ZipLong(l  +  10  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	new  ZipLong(l  +  10  +  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    new    ZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  missing  return  statement	47	None	replace
125	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l);  new  ZipLong(l  +  TWO_TO_32);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l);  new  ZipLong(l  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32,  l);  new  ZipLong(l  +  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    new    ZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	47	None	replace
126	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  new  ZipLong(l  +  TWO_TO_32,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  new  ZipLong(l  +  TWO_TO_32,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32);  new  ZipLong(l  +  TWO_TO_32,  l);	  return    new    ZipLong(l    +    TWO_TO_32);    new    ZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	47	None	replace
127	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l  +  TWO_TO_32);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32,  l  +  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    new    ZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	47	None	replace
128	[BUG]  [BUGGY]  new  ZipLong(l  +  TWO_TO_32,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  new  ZipLong(l  +  TWO_TO_32,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	new  ZipLong(l  +  TWO_TO_32,  l);	  return    new    ZipLong(l    +    TWO_TO_32);    new    ZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	47	None	replace
129	[BUG]  [BUGGY]  hingeger  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  >  expected  [FE]                                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  hingeger  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	hingeger  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  >  expected	87	None	replace
130	[BUG]  [BUGGY]  vice(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  vice(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	vice(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	87	None	replace
131	[BUG]  [BUGGY]  hingeger  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [CE]  >  expected  [FE]                                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  hingeger  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	hingeger  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  >  expected	87	None	replace
132	[BUG]  [BUGGY]  hingeger  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: ",  +  l);  }  [CE]  >  expected  [FE]                                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  hingeger  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: ",  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	hingeger  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: ",  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  >  expected	87	None	replace
133	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reportError( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [CE]  cannot  find  symbol  [FE]                                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  Thread.currentThread().getContextClassLoader().reportError( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	Thread.currentThread().getContextClassLoader().reportError( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
134	[BUG]  [BUGGY]  hingeger  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "Y5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  >  expected  [FE]                                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  hingeger  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "Y5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	hingeger  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "Y5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  >  expected	87	None	replace
135	[BUG]  [BUGGY]  long  l  -  TWO_TO_32;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    Long    l    -    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	59	None	replace
136	[BUG]  [BUGGY]  long  l  -=  TWO_TO_32;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  -=  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  -=  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    Long    l    -    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	59	None	replace
137	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -=  TWO_TO_32;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -=  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -=  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    Long    l    -    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	59	None	replace
138	[BUG]  [BUGGY]  Long  l  -=  TWO_TO_32;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  Long  l  -=  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	Long  l  -=  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    Long    l    -    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	59	None	replace
139	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  Long  l  -  TWO_TO_32;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  Long  l  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32  +  1);  Long  l  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    Long    l    -    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	59	None	replace
140	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l  -  TWO_TO_32;  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32,  l  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    Long    l    -    TWO_TO_32;    	non-compiled	[CE]  ')'  expected	59	None	replace
141	[BUG]  [BUGGY]  return  new  ZipLong(t.longValue(),  l);  [CE]  cannot  find  symbol  t  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(t.longValue(),  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(t.longValue(),  l);	  return    new    ZipLong(t.longValue());    	non-compiled	[CE]  cannot  find  symbol  t	23	None	replace
142	[BUG]  [BUGGY]  return  new  ZipLong(Timestamp.longValue());  [CE]  cannot  find  symbol  Timestamp  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(Timestamp.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(Timestamp.longValue());	  return    new    ZipLong(t.longValue());    	non-compiled	[CE]  cannot  find  symbol  Timestamp	23	None	replace
143	[BUG]  [BUGGY]  return  new  ZipLong(t.longValue(),  TWO_TO_32);  [CE]  cannot  find  symbol  t  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(t.longValue(),  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(t.longValue(),  TWO_TO_32);	  return    new    ZipLong(t.longValue());    	non-compiled	[CE]  cannot  find  symbol  t	23	None	replace
144	[BUG]  [BUGGY]  long  -  TWO_TO_32;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    long    -    TWO_TO_32);    	non-compiled	[CE]  not  a  statement	130	None	replace
145	[BUG]  [BUGGY]  long  -  TWO_TO_32);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  -  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  -  TWO_TO_32);	  return    new    ZipLong(l    -    TWO_TO_32);    long    -    TWO_TO_32);    	non-compiled	[CE]  not  a  statement	130	None	replace
146	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l  -  TWO_TO_32);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l  -  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32,  l  -  TWO_TO_32);	  return    new    ZipLong(l    -    TWO_TO_32);    long    -    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	130	None	replace
147	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  -  TWO_TO_32;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32);  long  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    long    -    TWO_TO_32);    	non-compiled	[CE]  not  a  statement	130	None	replace
148	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  -  TWO_TO_32;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  TWO_TO_32);  long  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    long    -    TWO_TO_32);    	non-compiled	[CE]  not  a  statement	130	None	replace
149	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  long  -=  TWO_TO_32;  [CE]  unexpected  type  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  long  -=  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32);  long  -=  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    long    -    TWO_TO_32);    	non-compiled	[CE]  unexpected  type	130	None	replace
150	[BUG]  [BUGGY]  long  l  =  getTime(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  getTime(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  getTime(l);	  return    new    ZipLong(l    +    1);    long    l    =    getTime(l);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	73	None	replace
151	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1);  long  l  =  getTime(l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1);  long  l  =  getTime(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  1);  long  l  =  getTime(l);	  return    new    ZipLong(l    +    1);    long    l    =    getTime(l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	73	None	replace
152	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  +  1);  long  l  =  getTime(l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  +  1);  long  l  =  getTime(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32,  l  +  1);  long  l  =  getTime(l);	  return    new    ZipLong(l    +    1);    long    l    =    getTime(l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	73	None	replace
153	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32);  long  l  =  getTime(l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32);  long  l  =  getTime(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32);  long  l  =  getTime(l);	  return    new    ZipLong(l    +    1);    long    l    =    getTime(l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	73	None	replace
154	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  getTime(tWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  getTime(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1);  long  l  =  getTime(tWO_TO_32);	  return    new    ZipLong(l    +    1);    long    l    =    getTime(l);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	73	None	replace
155	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  getTime(two_to_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  getTime(two_to_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1);  long  l  =  getTime(two_to_32);	  return    new    ZipLong(l    +    1);    long    l    =    getTime(l);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	73	None	replace
156	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  getTime(two_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  getTime(two_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1);  long  l  =  getTime(two_TO_32);	  return    new    ZipLong(l    +    1);    long    l    =    getTime(l);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	73	None	replace
157	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.HEADER_ID));  [CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.HEADER_ID));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.HEADER_ID));	  return    new    ZipLong(unixTimeToZipLong(l,    X5455_ExtendedTimestamp.DEFAULT_TIME_BIT));    	non-compiled	[CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;	119	None	replace
158	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DECEMBER_TIME_BIT));  [CE]  cannot  find  symbol  DECEMBER_TIME_BIT  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DECEMBER_TIME_BIT));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DECEMBER_TIME_BIT));	  return    new    ZipLong(unixTimeToZipLong(l,    X5455_ExtendedTimestamp.DEFAULT_TIME_BIT));    	non-compiled	[CE]  cannot  find  symbol  DECEMBER_TIME_BIT	119	None	replace
159	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.CENTER_TIME_BIT));  [CE]  cannot  find  symbol  CENTER_TIME_BIT  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.CENTER_TIME_BIT));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.CENTER_TIME_BIT));	  return    new    ZipLong(unixTimeToZipLong(l,    X5455_ExtendedTimestamp.DEFAULT_TIME_BIT));    	non-compiled	[CE]  cannot  find  symbol  CENTER_TIME_BIT	119	None	replace
160	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT),  ACCESS_TIME_BIT);  [CE]  cannot  find  symbol  DEFAULT_TIME_BIT  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT),  ACCESS_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT),  ACCESS_TIME_BIT);	  return    new    ZipLong(unixTimeToZipLong(l,    X5455_ExtendedTimestamp.DEFAULT_TIME_BIT));    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_TIME_BIT	119	None	replace
161	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.BIT));  [CE]  cannot  find  symbol  BIT  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.BIT));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.BIT));	  return    new    ZipLong(unixTimeToZipLong(l,    X5455_ExtendedTimestamp.DEFAULT_TIME_BIT));    	non-compiled	[CE]  cannot  find  symbol  BIT	119	None	replace
162	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32,  l.longValue());  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32,  l.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32,  l.longValue());	  return    new    ZipLong(tWO_TO_32.longValue());    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	25	None	replace
163	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32.longValue(),  l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32.longValue(),  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32.longValue(),  l);	  return    new    ZipLong(tWO_TO_32.longValue());    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	25	None	replace
164	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  l.longValue());  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  l.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  l.longValue());	  return    new    ZipLong(tWO_TO_32.longValue());    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	25	None	replace
165	[BUG]  [BUGGY]  return  new  ZipLong(two_TO_32.longValue());  [CE]  cannot  find  symbol  two_TO_32  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_TO_32.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_TO_32.longValue());	  return    new    ZipLong(tWO_TO_32.longValue());    	non-compiled	[CE]  cannot  find  symbol  two_TO_32	25	None	replace
166	[BUG]  [BUGGY]  return  new  ZipLong(tw_TO_32.longValue());  [CE]  cannot  find  symbol  tw_TO_32  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tw_TO_32.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tw_TO_32.longValue());	  return    new    ZipLong(tWO_TO_32.longValue());    	non-compiled	[CE]  cannot  find  symbol  tw_TO_32	25	None	replace
167	[BUG]  [BUGGY]  return  new  ZipLong(accessTime,  l);  [CE]  non-static  variable  accessTime  cannot  be  referenced  from  a  static  context  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(accessTime,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(accessTime,  l);	  return    new    ZipLong(unixTime,    l);    	non-compiled	[CE]  non-static  variable  accessTime  cannot  be  referenced  from  a  static  context	4	None	replace
168	[BUG]  [BUGGY]  return  new  ZipLong(toZipLong(l,  l);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(toZipLong(l,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(toZipLong(l,  l);	  return    new    ZipLong(unixTime,    l);    	non-compiled	[CE]  ')'  expected	4	None	replace
169	[BUG]  [BUGGY]  return  new  ZipLong(toZipLong(l,  l));  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(toZipLong(l,  l));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(toZipLong(l,  l));	  return    new    ZipLong(unixTime,    l);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
170	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -=  TWO_TO_32;  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -=  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32);  long  l  -=  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    -    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	56	None	replace
171	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  long  l  -  TWO_TO_32;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  long  l  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32  +  1);  long  l  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    -    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	56	None	replace
172	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32)+  1;  long  l  -  TWO_TO_32;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32)+  1;  long  l  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32)+  1;  long  l  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    -    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	56	None	replace
173	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  TWO_TO_32,  l);	  return    new    ZipLong(l    *    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	29	None	replace
174	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  *  TWO_TO_32  +  1);	  return    new    ZipLong(l    *    TWO_TO_32);    	compilable	  [FE]  AssertionError  	29	2	replace
175	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32  +  1);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  TWO_TO_32  +  1);	  return    new    ZipLong(l    *    TWO_TO_32);    	compilable	  [FE]  AssertionError  	29	2	replace
176	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32  +  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  *  TWO_TO_32  +  2);	  return    new    ZipLong(l    *    TWO_TO_32);    	compilable	  [FE]  AssertionError  	29	2	replace
177	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32  +  2);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32  +  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  TWO_TO_32  +  2);	  return    new    ZipLong(l    *    TWO_TO_32);    	compilable	  [FE]  AssertionError  	29	2	replace
178	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32)+  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32)+  1;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  TWO_TO_32)+  1;	  return    new    ZipLong(l    *    TWO_TO_32);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	29	None	replace
179	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  l  -=  TWO_TO_32;  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  l  -=  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32);  l  -=  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    l    -    TWO_TO_32;    	non-compiled	[CE]  unreachable  statement	58	None	replace
180	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  l  *  TWO_TO_32;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  l  *  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  TWO_TO_32);  l  *  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    l    -    TWO_TO_32;    	non-compiled	[CE]  not  a  statement	58	None	replace
181	[BUG]  [BUGGY]  l  -=  TWO_TO_32;  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  l  -=  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	l  -=  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    l    -    TWO_TO_32;    	non-compiled	[CE]  missing  return  statement	58	None	replace
182	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  l  -  TWO_TO_32;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  l  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  /  TWO_TO_32);  l  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    l    -    TWO_TO_32;    	non-compiled	[CE]  not  a  statement	58	None	replace
183	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  l  -  TWO_TO_32;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  l  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32);  l  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    l    -    TWO_TO_32;    	non-compiled	[CE]  not  a  statement	58	None	replace
184	[BUG]  [BUGGY]  long  l  =  getTime().longValue();  return  new  ZipLong(l  +  1);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  getTime().longValue();  return  new  ZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  getTime().longValue();  return  new  ZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    long    l    =    getTime().longValue();    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	135	None	replace
185	[BUG]  [BUGGY]  long  l  =  getTime().longValue();  return  new  ZipLong(l  +  2);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  getTime().longValue();  return  new  ZipLong(l  +  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  getTime().longValue();  return  new  ZipLong(l  +  2);	  return    new    ZipLong(l    +    1);    long    l    =    getTime().longValue();    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	135	None	replace
186	[BUG]  [BUGGY]  long  l  =  getTime().longValue();  return  new  ZipLong(l  +  1,  l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  getTime().longValue();  return  new  ZipLong(l  +  1,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  getTime().longValue();  return  new  ZipLong(l  +  1,  l);	  return    new    ZipLong(l    +    1);    long    l    =    getTime().longValue();    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	135	None	replace
187	[BUG]  [BUGGY]  final  long  l  =  getTime().longValue();  return  new  ZipLong(l  +  1);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  final  long  l  =  getTime().longValue();  return  new  ZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	final  long  l  =  getTime().longValue();  return  new  ZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    long    l    =    getTime().longValue();    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	135	None	replace
188	[BUG]  [BUGGY]  l  =  getTime().longValue();  return  new  ZipLong(l  +  1);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  l  =  getTime().longValue();  return  new  ZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	l  =  getTime().longValue();  return  new  ZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    long    l    =    getTime().longValue();    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
189	[BUG]  [BUGGY]  long  l  =  getTime().longValue();  return  new  ZipLong(l  +  3);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  getTime().longValue();  return  new  ZipLong(l  +  3);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  getTime().longValue();  return  new  ZipLong(l  +  3);	  return    new    ZipLong(l    +    1);    long    l    =    getTime().longValue();    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	135	None	replace
190	[BUG]  [BUGGY]  null  l  =  getTime().longValue();  return  new  ZipLong(l  +  1);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  null  l  =  getTime().longValue();  return  new  ZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	null  l  =  getTime().longValue();  return  new  ZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    long    l    =    getTime().longValue();    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  not  a  statement	135	None	replace
191	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  l,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  l,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  l,  l);	  return    new    ZipLong(l    +    1,    unixTime,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)	91	None	replace
192	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  createTime,  l);  [CE]  non-static  variable  createTime  cannot  be  referenced  from  a  static  context  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  createTime,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  createTime,  l);	  return    new    ZipLong(l    +    1,    unixTime,    l);    	non-compiled	[CE]  non-static  variable  createTime  cannot  be  referenced  from  a  static  context	91	None	replace
193	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  accessTime,  l);  [CE]  non-static  variable  accessTime  cannot  be  referenced  from  a  static  context  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  accessTime,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  accessTime,  l);	  return    new    ZipLong(l    +    1,    unixTime,    l);    	non-compiled	[CE]  non-static  variable  accessTime  cannot  be  referenced  from  a  static  context	91	None	replace
194	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  getTime(),  l);  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  getTime(),  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  getTime(),  l);	  return    new    ZipLong(l    +    1,    unixTime,    l);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
195	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  X5455_Timestamp,  l);  [CE]  cannot  find  symbol  X5455_Timestamp  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  X5455_Timestamp,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  X5455_Timestamp,  l);	  return    new    ZipLong(l    +    1,    unixTime,    l);    	non-compiled	[CE]  cannot  find  symbol  X5455_Timestamp	91	None	replace
196	[BUG]  [BUGGY]  while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  missing  return  statement  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  missing  return  statement	85	None	replace
197	[BUG]  [BUGGY]  hingeger  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  >  expected  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  hingeger  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	hingeger  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  >  expected	85	None	replace
198	[BUG]  [BUGGY]  while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [CE]  ';'  expected  [FE]                                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);	  if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	85	None	replace
199	[BUG]  [BUGGY]  hingeger  <  TWO_TO_32  ||  l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  >  expected  [FE]                                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  hingeger  <  TWO_TO_32  ||  l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	hingeger  <  TWO_TO_32  ||  l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  >  expected	85	None	replace
200	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32  -  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  *  TWO_TO_32  -  1);	  return    new    ZipLong(tWO_TO_32    -    1);    	compilable	  [FE]  AssertionError  	143	2	replace
201	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32  -  1);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32  -  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  TWO_TO_32  -  1);	  return    new    ZipLong(tWO_TO_32    -    1);    	compilable	  [FE]  AssertionError  	143	2	replace
202	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  -  2);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  -  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  -  2);	  return    new    ZipLong(tWO_TO_32    -    1);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	143	None	replace
203	[BUG]  [BUGGY]  return  new  ZipLong(two_TO_32  -  1);  [CE]  cannot  find  symbol  two_TO_32  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_TO_32  -  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_TO_32  -  1);	  return    new    ZipLong(tWO_TO_32    -    1);    	non-compiled	[CE]  cannot  find  symbol  two_TO_32	143	None	replace
204	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1);  long  l  =  getTime();  [CE]  cannot  find  symbol  tWO_TO_32  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1);  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  1);  long  l  =  getTime();	  return    new    ZipLong(l    +    1);    long    l    =    getTime();    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	68	None	replace
205	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  +  1);  long  l  =  getTime();  [CE]  cannot  find  symbol  tWO_TO_32  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  +  1);  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32,  l  +  1);  long  l  =  getTime();	  return    new    ZipLong(l    +    1);    long    l    =    getTime();    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	68	None	replace
206	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32);  long  l  =  getTime();  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32);  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32);  long  l  =  getTime();	  return    new    ZipLong(l    +    1);    long    l    =    getTime();    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	68	None	replace
207	[BUG]  [BUGGY]  return  new  ZipLong(two_to_32  +  1);  long  l  =  getTime();  [CE]  cannot  find  symbol  two_to_32  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_to_32  +  1);  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_to_32  +  1);  long  l  =  getTime();	  return    new    ZipLong(l    +    1);    long    l    =    getTime();    	non-compiled	[CE]  cannot  find  symbol  two_to_32	68	None	replace
208	[BUG]  [BUGGY]  return  new  ZipLong(two_to_32,  l  +  1);  long  l  =  getTime();  [CE]  cannot  find  symbol  two_to_32  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_to_32,  l  +  1);  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_to_32,  l  +  1);  long  l  =  getTime();	  return    new    ZipLong(l    +    1);    long    l    =    getTime();    	non-compiled	[CE]  cannot  find  symbol  two_to_32	68	None	replace
209	[BUG]  [BUGGY]  return  new  ZipLong(tempTime,  l);  [CE]  cannot  find  symbol  tempTime  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tempTime,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tempTime,  l);	  return    new    ZipLong(t,    l);    	non-compiled	[CE]  cannot  find  symbol  tempTime	6	None	replace
210	[BUG]  [BUGGY]  return  new  ZipLong(toZipLong(l,  t));  [CE]  cannot  find  symbol  t  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(toZipLong(l,  t));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(toZipLong(l,  t));	  return    new    ZipLong(t,    l);    	non-compiled	[CE]  cannot  find  symbol  t	6	None	replace
211	[BUG]  [BUGGY]  return  new  ZipLong(t,  l  +  TWO_TO_32);  [CE]  cannot  find  symbol  t  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(t,  l  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(t,  l  +  TWO_TO_32);	  return    new    ZipLong(t,    l);    	non-compiled	[CE]  cannot  find  symbol  t	6	None	replace
212	[BUG]  [BUGGY]  return  new  ZipLong(toZipLong(l),  l);  [CE]  cannot  find  symbol  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(toZipLong(l),  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(toZipLong(l),  l);	  return    new    ZipLong(t,    l);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
213	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	compilable	  [FE]  IllegalArgumentException  	12	4	replace
214	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  [FE]  IllegalArgumentException  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	compilable	  [FE]  IllegalArgumentException  	12	4	replace
215	[BUG]  [BUGGY]  result  =  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  cannot  find  symbol  result  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  result  =  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	result  =  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol  result	12	None	replace
216	[BUG]  [BUGGY]  while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:  [CE]  unclosed  string  literal  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  unclosed  string  literal	12	None	replace
217	[BUG]  [BUGGY]  while(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:  [CE]  unclosed  string  literal  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  unclosed  string  literal	12	None	replace
218	[BUG]  [BUGGY]  while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:   "  +  l);  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:   "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:   "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	12	None	replace
219	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l  +  1);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32,  l  +  1);	  return    new    ZipLong(l    -    TWO_TO_32    +    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	78	None	replace
220	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  -  TWO_TO_32  +  2);	  return    new    ZipLong(l    -    TWO_TO_32    +    1);    	compilable	  [FE]  AssertionError  	78	2	replace
221	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  2);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32  +  2);	  return    new    ZipLong(l    -    TWO_TO_32    +    1);    	compilable	  [FE]  AssertionError  	78	2	replace
222	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32)+  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32)+  1;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32)+  1;	  return    new    ZipLong(l    -    TWO_TO_32    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	78	None	replace
223	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  incompatible  types	156	None	replace
224	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  incompatible  types	156	None	replace
225	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_createTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_createTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_createTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  incompatible  types	156	None	replace
226	[BUG]  [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	156	None	replace
227	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit2_createTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit2_createTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit2_createTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  incompatible  types	156	None	replace
228	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  incompatible  types	156	None	replace
229	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  ACCESS_TIME_BIT,  TWO_TO_32));  [CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  ACCESS_TIME_BIT,  TWO_TO_32));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  ACCESS_TIME_BIT,  TWO_TO_32));	  return    new    ZipLong(unixTimeToZipLong(l,    TWO_TO_32));    	non-compiled	[CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;	20	None	replace
230	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  l,  TWO_TO_32));  [CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  l,  TWO_TO_32));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  l,  TWO_TO_32));	  return    new    ZipLong(unixTimeToZipLong(l,    TWO_TO_32));    	non-compiled	[CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;	20	None	replace
231	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  ACTIVE_TIME_BIT,  TWO_TO_32));  [CE]  cannot  find  symbol  ACTIVE_TIME_BIT  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  ACTIVE_TIME_BIT,  TWO_TO_32));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  ACTIVE_TIME_BIT,  TWO_TO_32));	  return    new    ZipLong(unixTimeToZipLong(l,    TWO_TO_32));    	non-compiled	[CE]  cannot  find  symbol  ACTIVE_TIME_BIT	20	None	replace
232	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  l),  TWO_TO_32);  [CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  l),  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  l),  TWO_TO_32);	  return    new    ZipLong(unixTimeToZipLong(l,    TWO_TO_32));    	non-compiled	[CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;	20	None	replace
233	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  TWO_TO_32),  l);  [CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  TWO_TO_32),  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  TWO_TO_32),  l);	  return    new    ZipLong(unixTimeToZipLong(l,    TWO_TO_32));    	non-compiled	[CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;	20	None	replace
234	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  TWO_TO_32,  l));  [CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  TWO_TO_32,  l));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  TWO_TO_32,  l));	  return    new    ZipLong(unixTimeToZipLong(l,    TWO_TO_32));    	non-compiled	[CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;	20	None	replace
235	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_createTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_createTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_createTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  incompatible  types	154	None	replace
236	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  incompatible  types	154	None	replace
237	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit2_createTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit2_createTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit2_createTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  incompatible  types	154	None	replace
238	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  new  ZipLong(l  -  TWO_TO_32  +  1);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  new  ZipLong(l  -  TWO_TO_32  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32    +    1);    new  ZipLong(l  -  TWO_TO_32  +  1);	  	non-compiled	[CE]  unreachable  statement	77	None	add
239	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  l  -  TWO_TO_32  +  1);  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  l  -  TWO_TO_32  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32    +    1);    l  -  TWO_TO_32  +  1);	  	non-compiled	[CE]  not  a  statement	77	None	add
240	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  long  l  -  TWO_TO_32  +  1);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  long  l  -  TWO_TO_32  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32    +    1);    long  l  -  TWO_TO_32  +  1);	  	non-compiled	[CE]  ';'  expected	77	None	add
241	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  long  l  -  TWO_TO_32  +  1;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  long  l  -  TWO_TO_32  +  1;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32    +    1);    long  l  -  TWO_TO_32  +  1;	  	non-compiled	[CE]  ';'  expected	77	None	add
242	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  l  -  TWO_TO_32  +  1;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  l  -  TWO_TO_32  +  1;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32    +    1);    l  -  TWO_TO_32  +  1;	  	non-compiled	[CE]  not  a  statement	77	None	add
243	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  L  -  TWO_TO_32  +  1);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  L  -  TWO_TO_32  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32    +    1);    L  -  TWO_TO_32  +  1);	  	non-compiled	[CE]  not  a  statement	77	None	add
244	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  long  -  TWO_TO_32  +  1);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  long  -  TWO_TO_32  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32    +    1);    long  -  TWO_TO_32  +  1);	  	non-compiled	[CE]  not  a  statement	77	None	add
245	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  long  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32    +    1);    long  l  =  getTime().longValue();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	77	None	add
246	[BUG]  [BUGGY]  return  new  ZipLong(tw_TO_32);  [CE]  cannot  find  symbol  tw_TO_32  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tw_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tw_TO_32);	  return    new    ZipLong(tWO);    	non-compiled	[CE]  cannot  find  symbol  tw_TO_32	103	None	replace
247	[BUG]  [BUGGY]  return  new  ZipLong(ZipShort.valueOf(l));  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(ZipShort.valueOf(l));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(ZipShort.valueOf(l));	  return    new    ZipLong(tWO);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
248	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp,  l);  [CE]  cannot  find  symbol  X5455_ExtendedTimestamp  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp,  l);	  return    new    ZipLong(unixTimeToZipLong(l),    l);    	non-compiled	[CE]  cannot  find  symbol  X5455_ExtendedTimestamp	42	None	replace
249	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  TWO_TO_32);  [CE]  no  suitable  constructor  found  for  ZipLong(ZipLong,long)  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  TWO_TO_32);	  return    new    ZipLong(unixTimeToZipLong(l),    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(ZipLong,long)	42	None	replace
250	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  l,  TWO_TO_32);  [CE]  no  suitable  constructor  found  for  ZipLong(ZipLong,long,long)  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  l,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  l,  TWO_TO_32);	  return    new    ZipLong(unixTimeToZipLong(l),    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(ZipLong,long,long)	42	None	replace
251	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  TWO_TO_32,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(ZipLong,long,long)  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  TWO_TO_32,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  TWO_TO_32,  l);	  return    new    ZipLong(unixTimeToZipLong(l),    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(ZipLong,long,long)	42	None	replace
252	[BUG]  [BUGGY]  return  new  ZipLong(l  +  tWO_TO_32);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  tWO_TO_32);	  return    new    ZipLong(tWO_TO_32    +    l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	19	None	replace
253	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong  +  l);  [CE]  cannot  find  symbol  unixTimeToZipLong  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong  +  l);	  return    new    ZipLong(tWO_TO_32    +    l);    	non-compiled	[CE]  cannot  find  symbol  unixTimeToZipLong	19	None	replace
254	[BUG]  [BUGGY]  return  new  ZipLong(toZipLong(l  +  tWO_TO_32);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(toZipLong(l  +  tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(toZipLong(l  +  tWO_TO_32);	  return    new    ZipLong(tWO_TO_32    +    l);    	non-compiled	[CE]  ')'  expected	19	None	replace
255	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  l,  l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  l,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  l,  l);	  return    new    ZipLong(tWO_TO_32    +    l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	19	None	replace
256	[BUG]  [BUGGY]  return  new  ZipLong(l  +  tw_TO_32);  [CE]  cannot  find  symbol  tw_TO_32  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  tw_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  tw_TO_32);	  return    new    ZipLong(tWO_TO_32    +    l);    	non-compiled	[CE]  cannot  find  symbol  tw_TO_32	19	None	replace
257	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong.longValue());  [CE]  cannot  find  symbol  unixTimeToZipLong  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong.longValue());	  return    new    ZipLong(two_toZipLong.longValue());    	non-compiled	[CE]  cannot  find  symbol  unixTimeToZipLong	98	None	replace
258	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	100	None	replace
259	[BUG]  [BUGGY]  if(l  <  =  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  =  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  =  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
260	[BUG]  [BUGGY]  while(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	100	None	replace
261	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	100	None	replace
262	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	100	None	replace
263	[BUG]  [BUGGY]  long  l  =  unixTimeToZipLong(l  +  1);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  unixTimeToZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  unixTimeToZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    long    l    =    unixTimeToZipLong(l    +    1);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	69	None	replace
264	[BUG]  [BUGGY]  long  l  =  unixTimeToZipLong(l  +  1,  TWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  unixTimeToZipLong(l  +  1,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  unixTimeToZipLong(l  +  1,  TWO_TO_32);	  return    new    ZipLong(l    +    1);    long    l    =    unixTimeToZipLong(l    +    1);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	69	None	replace
265	[BUG]  [BUGGY]  Long  l  =  unixTimeToZipLong(l  +  1);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  Long  l  =  unixTimeToZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	Long  l  =  unixTimeToZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    long    l    =    unixTimeToZipLong(l    +    1);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	69	None	replace
266	[BUG]  [BUGGY]  long  l  =  unixTimeToZipLong(l,  TWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  unixTimeToZipLong(l,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  unixTimeToZipLong(l,  TWO_TO_32);	  return    new    ZipLong(l    +    1);    long    l    =    unixTimeToZipLong(l    +    1);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	69	None	replace
267	[BUG]  [BUGGY]  short  l  =  unixTimeToZipLong(l  +  1);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  short  l  =  unixTimeToZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	short  l  =  unixTimeToZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    long    l    =    unixTimeToZipLong(l    +    1);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	69	None	replace
268	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  new  ZipLong(l  +  10  +  TWO_TO_32);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  new  ZipLong(l  +  10  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10    +    TWO_TO_32);    new  ZipLong(l  +  10  +  TWO_TO_32);	  	non-compiled	[CE]  unreachable  statement	144	None	add
269	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  long  l  =  Long.parseLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  long  l  =  Long.parseLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10    +    TWO_TO_32);    long  l  =  Long.parseLong(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	144	None	add
270	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  l  +  10  +  TWO_TO_32;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  l  +  10  +  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10    +    TWO_TO_32);    l  +  10  +  TWO_TO_32;	  	non-compiled	[CE]  not  a  statement	144	None	add
271	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  l  +  10  +  TWO_TO_32);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  l  +  10  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10    +    TWO_TO_32);    l  +  10  +  TWO_TO_32);	  	non-compiled	[CE]  not  a  statement	144	None	add
272	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  long  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]            AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10    +    TWO_TO_32);    long  l  =  getTime().longValue();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	144	None	add
273	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  long  l  =  Long.parseLong(tWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]              AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  long  l  =  Long.parseLong(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10    +    TWO_TO_32);    long  l  =  Long.parseLong(tWO_TO_32);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	144	None	add
274	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  long  l  =  getTime();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10    +    TWO_TO_32);    long  l  =  getTime();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	144	None	add
275	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  long  l  =  getTime(l).longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  long  l  =  getTime(l).longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10    +    TWO_TO_32);    long  l  =  getTime(l).longValue();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	144	None	add
276	[BUG]  [BUGGY]  return  new  ZipLong(l);  new  ZipLong(TWO_TO_32);  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l);  new  ZipLong(TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l);  new  ZipLong(TWO_TO_32);	  return    new    ZipLong(TWO_TO_32);    new    ZipLong(TWO_TO_32);    	non-compiled	[CE]  unreachable  statement	10	None	replace
277	[BUG]  [BUGGY]  new  ZipLong(l);  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  new  ZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	new  ZipLong(l);	  return    new    ZipLong(TWO_TO_32);    new    ZipLong(TWO_TO_32);    	non-compiled	[CE]  missing  return  statement	10	None	replace
278	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    new    ZipLong(TWO_TO_32);    	compilable	  [FE]  AssertionError  	10	2	replace
279	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    new    ZipLong(TWO_TO_32);    	compilable	  [FE]  AssertionError  	10	2	replace
280	[BUG]  [BUGGY]  while(l  >=  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  >=  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  >=  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	149	None	replace
281	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	compilable	  [FE]  IllegalArgumentException  	149	4	replace
282	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [FE]  IllegalArgumentException  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	compilable	  [FE]  IllegalArgumentException  	149	4	replace
283	[BUG]  [BUGGY]  while(l  >=  TWO_TO_32)  {  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  >=  TWO_TO_32)  {  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  >=  TWO_TO_32)  {  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	149	None	replace
284	[BUG]  [BUGGY]  if(bit1_accessTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit1_accessTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit1_accessTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	149	None	replace
285	[BUG]  [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	149	None	replace
286	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    else    {    return    new    ZipLong(TWO_TO_32);    }    	compilable	  [FE]  IllegalArgumentException  	101	4	replace
287	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO_TO_32);  }  [FE]  IllegalArgumentException  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    else    {    return    new    ZipLong(TWO_TO_32);    }    	compilable	  [FE]  IllegalArgumentException  	101	4	replace
288	[BUG]  [BUGGY]  while(l  <  TWO_TO_32)  {  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32)  {  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32)  {  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    else    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  ';'  expected	101	None	replace
289	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    else    {    return    new    ZipLong(TWO_TO_32);    }    	compilable	  [FE]  IllegalArgumentException  	101	4	replace
290	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO_TO_32);  }  [FE]  IllegalArgumentException  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    else    {    return    new    ZipLong(TWO_TO_32);    }    	compilable	  [FE]  IllegalArgumentException  	101	4	replace
291	[BUG]  [BUGGY]  while(l  <  TWO_TO_32)  {  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO  [CE]  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32)  {  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32)  {  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    else    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  	101	None	replace
292	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  tWO_TO_32);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  tWO_TO_32);	  return    new    ZipLong(tWO_TO_32    +    1,    l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	90	None	replace
293	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  t);  [CE]  cannot  find  symbol  t  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  t);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  t);	  return    new    ZipLong(tWO_TO_32    +    1,    l);    	non-compiled	[CE]  cannot  find  symbol  t	90	None	replace
294	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  tw_TO_32);  [CE]  cannot  find  symbol  tw_TO_32  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  tw_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  tw_TO_32);	  return    new    ZipLong(tWO_TO_32    +    1,    l);    	non-compiled	[CE]  cannot  find  symbol  tw_TO_32	90	None	replace
295	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong  +  1,  l);  [CE]  cannot  find  symbol  unixTimeToZipLong  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong  +  1,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong  +  1,  l);	  return    new    ZipLong(tWO_TO_32    +    1,    l);    	non-compiled	[CE]  cannot  find  symbol  unixTimeToZipLong	90	None	replace
296	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1,  l,  l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1,  l,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  1,  l,  l);	  return    new    ZipLong(tWO_TO_32    +    1,    l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	90	None	replace
297	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  /  1,  l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  /  1,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  /  1,  l);	  return    new    ZipLong(tWO_TO_32    +    1,    l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	90	None	replace
298	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l  -  TWO_TO_32);  long  -  TWO_TO_32;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l  -  TWO_TO_32);  long  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32,  l  -  TWO_TO_32);  long  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    long    -    TWO_TO_32;    	non-compiled	[CE]  not  a  statement	60	None	replace
299	[BUG]  [BUGGY]  Long  l  =  new  ZipLong(l  -  TWO_TO_32);  long  -  TWO_TO_32;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  Long  l  =  new  ZipLong(l  -  TWO_TO_32);  long  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	Long  l  =  new  ZipLong(l  -  TWO_TO_32);  long  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    long    -    TWO_TO_32;    	non-compiled	[CE]  not  a  statement	60	None	replace
300	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l);  long  -  TWO_TO_32;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l);  long  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32,  l);  long  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    long    -    TWO_TO_32;    	non-compiled	[CE]  not  a  statement	60	None	replace
301	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  long  -  TWO_TO_32;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  long  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32  +  1);  long  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    long    -    TWO_TO_32;    	non-compiled	[CE]  not  a  statement	60	None	replace
302	[BUG]  [BUGGY]  result  =  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  cannot  find  symbol  result  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  result  =  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	result  =  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "Timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol  result	16	None	replace
303	[BUG]  [BUGGY]  result  =  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  cannot  find  symbol  result  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  result  =  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	result  =  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "Timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol  result	16	None	replace
304	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "Timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	compilable	  [FE]  IllegalArgumentException  	16	4	replace
305	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  [FE]  IllegalArgumentException  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "Timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	compilable	  [FE]  IllegalArgumentException  	16	4	replace
306	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	102	None	replace
307	[BUG]  [BUGGY]  if(l  <  =  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  =  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  =  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
308	[BUG]  [BUGGY]  while(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	102	None	replace
309	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	102	None	replace
310	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	102	None	replace
311	[BUG]  [BUGGY]  ((  ZipLong)l).longValue();  [CE]  inconvertible  types  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  ((  ZipLong)l).longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	((  ZipLong)l).longValue();	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    	non-compiled	[CE]  inconvertible  types	136	None	replace
312	[BUG]  [BUGGY]  long  l  =  new  ZipLong(l  +  1);  ((  ZipLong)l).longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  new  ZipLong(l  +  1);  ((  ZipLong)l).longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  new  ZipLong(l  +  1);  ((  ZipLong)l).longValue();	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	136	None	replace
313	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1);  ((  ZipLong)l).longValue();  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1);  ((  ZipLong)l).longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  1);  ((  ZipLong)l).longValue();	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	136	None	replace
314	[BUG]  [BUGGY]  l  =  new  ZipLong(l  +  1);  ((  ZipLong)l).longValue();  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  l  =  new  ZipLong(l  +  1);  ((  ZipLong)l).longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	l  =  new  ZipLong(l  +  1);  ((  ZipLong)l).longValue();	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    	non-compiled	[CE]  incompatible  types	136	None	replace
315	[BUG]  [BUGGY]  return  new  ZipLong(l,  tWO_TO_32  +  1);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  tWO_TO_32  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  tWO_TO_32  +  1);	  return    new    ZipLong(tWO_TO_32,    l    +    1);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	41	None	replace
316	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong,  l  +  1);  [CE]  cannot  find  symbol  unixTimeToZipLong  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong,  l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong,  l  +  1);	  return    new    ZipLong(tWO_TO_32,    l    +    1);    	non-compiled	[CE]  cannot  find  symbol  unixTimeToZipLong	41	None	replace
317	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  +  2);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  +  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32,  l  +  2);	  return    new    ZipLong(tWO_TO_32,    l    +    1);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	41	None	replace
318	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  +  3);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  +  3);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32,  l  +  3);	  return    new    ZipLong(tWO_TO_32,    l    +    1);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	41	None	replace
319	[BUG]  [BUGGY]  return  new  ZipLong(l  /  1);  new  ZipLong(l  /  1);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  1);  new  ZipLong(l  /  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    1);    new  ZipLong(l  /  1);	  	non-compiled	[CE]  unreachable  statement	132	None	add
320	[BUG]  [BUGGY]  return  new  ZipLong(l  /  1);  long  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  1);  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    1);    long  l  =  getTime().longValue();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	132	None	add
321	[BUG]  [BUGGY]  return  new  ZipLong(l  /  1);  long  l  =  Long.parseLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  1);  long  l  =  Long.parseLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    1);    long  l  =  Long.parseLong(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	132	None	add
322	[BUG]  [BUGGY]  return  new  ZipLong(l  /  1);  ((  ZipLong)l  /  1).longValue();  [CE]  inconvertible  types  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  1);  ((  ZipLong)l  /  1).longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    1);    ((  ZipLong)l  /  1).longValue();	  	non-compiled	[CE]  inconvertible  types	132	None	add
323	[BUG]  [BUGGY]  return  new  ZipLong(l  /  1);  ((  ZipLong)l).longValue();  [CE]  inconvertible  types  [FE]            AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  1);  ((  ZipLong)l).longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    1);    ((  ZipLong)l).longValue();	  	non-compiled	[CE]  inconvertible  types	132	None	add
324	[BUG]  [BUGGY]  return  new  ZipLong(l  /  1);  Long  l  /  1  =  new  ZipLong(l  /  2);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  1);  Long  l  /  1  =  new  ZipLong(l  /  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    1);    Long  l  /  1  =  new  ZipLong(l  /  2);	  	non-compiled	[CE]  ';'  expected	132	None	add
325	[BUG]  [BUGGY]  return  new  ZipLong(l  /  1);  long  l  =  getTime();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  1);  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    1);    long  l  =  getTime();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	132	None	add
326	[BUG]  [BUGGY]  return  new  ZipLong(l  /  1);  ((  ZipLong)l  /  2).longValue();  [CE]  inconvertible  types  [FE]                  AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  1);  ((  ZipLong)l  /  2).longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    1);    ((  ZipLong)l  /  2).longValue();	  	non-compiled	[CE]  inconvertible  types	132	None	add
327	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_Timestamp);  [CE]  cannot  find  symbol  X5455_Timestamp  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_Timestamp);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_Timestamp);	  return    new    ZipLong(unixTimeToZipLong(l),    X5455_ExtendedTimestamp);    	non-compiled	[CE]  cannot  find  symbol  X5455_Timestamp	43	None	replace
328	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_TIME_BIT);  [CE]  cannot  find  symbol  X5455_TIME_BIT  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_TIME_BIT);	  return    new    ZipLong(unixTimeToZipLong(l),    X5455_ExtendedTimestamp);    	non-compiled	[CE]  cannot  find  symbol  X5455_TIME_BIT	43	None	replace
329	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_DateTimestamp);  [CE]  cannot  find  symbol  X5455_DateTimestamp  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_DateTimestamp);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_DateTimestamp);	  return    new    ZipLong(unixTimeToZipLong(l),    X5455_ExtendedTimestamp);    	non-compiled	[CE]  cannot  find  symbol  X5455_DateTimestamp	43	None	replace
330	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455Short);  [CE]  cannot  find  symbol  X5455Short  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455Short);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455Short);	  return    new    ZipLong(unixTimeToZipLong(l),    X5455_ExtendedTimestamp);    	non-compiled	[CE]  cannot  find  symbol  X5455Short	43	None	replace
331	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp,  TWO_TO_32);  [CE]  cannot  find  symbol  X5455_ExtendedTimestamp  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp,  TWO_TO_32);	  return    new    ZipLong(unixTimeToZipLong(l),    X5455_ExtendedTimestamp);    	non-compiled	[CE]  cannot  find  symbol  X5455_ExtendedTimestamp	43	None	replace
332	[BUG]  [BUGGY]  ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  1);  [CE]  inconvertible  types  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	((  ZipLong)l).longValue();  return  new  ZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  inconvertible  types	137	None	replace
333	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  missing  return  statement	137	None	replace
334	[BUG]  [BUGGY]  ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  2);  [CE]  inconvertible  types  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	((  ZipLong)l).longValue();  return  new  ZipLong(l  +  2);	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  inconvertible  types	137	None	replace
335	[BUG]  [BUGGY]  long  l  =  new  ZipLong(l  +  1);  ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  1);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  new  ZipLong(l  +  1);  ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  new  ZipLong(l  +  1);  ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	137	None	replace
336	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  return  new  ZipLong(l  +  1);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  return  new  ZipLong(l  +  1);  }	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    return    new    ZipLong(l    +    1);    	compilable	  [FE]  AssertionError  	137	2	replace
337	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  return  new  ZipLong(l  +  1);  }  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  return  new  ZipLong(l  +  1);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  return  new  ZipLong(l  +  1);  }	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    return    new    ZipLong(l    +    1);    	compilable	  [FE]  AssertionError  	137	2	replace
338	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    return    new    ZipLong(l    +    1);    	compilable	  [FE]  AssertionError  	137	2	replace
339	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    return    new    ZipLong(l    +    1);    	compilable	  [FE]  AssertionError  	137	2	replace
340	[BUG]  [BUGGY]  ((  ZipLong)l).longValue();  return  new  ZipLong(tWO_TO_32  +  1);  [CE]  inconvertible  types  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  ((  ZipLong)l).longValue();  return  new  ZipLong(tWO_TO_32  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	((  ZipLong)l).longValue();  return  new  ZipLong(tWO_TO_32  +  1);	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  inconvertible  types	137	None	replace
341	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10);  new  ZipLong(l  +  10);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10);  new  ZipLong(l  +  10);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10);    new  ZipLong(l  +  10);	  	non-compiled	[CE]  unreachable  statement	122	None	add
342	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10);  final  ZipLong  l  =  new  ZipLong(l  +  10);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10);  final  ZipLong  l  =  new  ZipLong(l  +  10);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10);    final  ZipLong  l  =  new  ZipLong(l  +  10);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	122	None	add
343	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10);  long  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10);  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10);    long  l  =  getTime().longValue();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	122	None	add
344	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10);  long  l  =  Long.parseLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10);  long  l  =  Long.parseLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10);    long  l  =  Long.parseLong(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	122	None	add
345	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10);  long  l  =  getTime();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]            AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10);  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10);    long  l  =  getTime();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	122	None	add
346	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10);  long  l  =  Long.parseLong(tWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]              AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10);  long  l  =  Long.parseLong(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10);    long  l  =  Long.parseLong(tWO_TO_32);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	122	None	add
347	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10);  long  l  =  getTime(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10);  long  l  =  getTime(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10);    long  l  =  getTime(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	122	None	add
348	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10);  long  l  =  createTime(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10);  long  l  =  createTime(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10);    long  l  =  createTime(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	122	None	add
349	[BUG]  [BUGGY]  return  new  ZipLong(l  +  2);  new  ZipLong(l  +  2);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  2);  new  ZipLong(l  +  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    2);    new  ZipLong(l  +  2);	  	non-compiled	[CE]  unreachable  statement	32	None	add
350	[BUG]  [BUGGY]  return  new  ZipLong(l  +  2);  long  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  2);  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    2);    long  l  =  getTime().longValue();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	32	None	add
351	[BUG]  [BUGGY]  return  new  ZipLong(l  +  2);  long  l  =  Long.parseLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  2);  long  l  =  Long.parseLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    2);    long  l  =  Long.parseLong(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	32	None	add
352	[BUG]  [BUGGY]  return  new  ZipLong(l  +  2);  long  l  =  getTime();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  2);  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    2);    long  l  =  getTime();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	32	None	add
353	[BUG]  [BUGGY]  return  new  ZipLong(l  +  2);  long  l  =  Long.parseLong(tWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]            AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  2);  long  l  =  Long.parseLong(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    2);    long  l  =  Long.parseLong(tWO_TO_32);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	32	None	add
354	[BUG]  [BUGGY]  return  new  ZipLong(l  +  2);  ((  ZipLong)l).longValue();  [CE]  inconvertible  types  [FE]              AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  2);  ((  ZipLong)l).longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    2);    ((  ZipLong)l).longValue();	  	non-compiled	[CE]  inconvertible  types	32	None	add
355	[BUG]  [BUGGY]  return  new  ZipLong(l  +  2);  ((  ZipLong)l).setLong(l  +  2);  [CE]  inconvertible  types  [FE]                AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  2);  ((  ZipLong)l).setLong(l  +  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    2);    ((  ZipLong)l).setLong(l  +  2);	  	non-compiled	[CE]  inconvertible  types	32	None	add
356	[BUG]  [BUGGY]  return  new  ZipLong(l  +  2);  long  l  =  getTime(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  2);  long  l  =  getTime(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    2);    long  l  =  getTime(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	32	None	add
357	[BUG]  [BUGGY]  return  new  ZipLong(l,  tWO_TO_32);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  tWO_TO_32);	  return    new    ZipLong(tWO_TO_32,    l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	1	None	replace
358	[BUG]  [BUGGY]  return  new  ZipLong(toZipLong(l,  tWO_TO_32);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(toZipLong(l,  tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(toZipLong(l,  tWO_TO_32);	  return    new    ZipLong(tWO_TO_32,    l);    	non-compiled	[CE]  ')'  expected	1	None	replace
359	[BUG]  [BUGGY]  return  new  ZipLong(toZipLong(l),  tWO_TO_32);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(toZipLong(l),  tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(toZipLong(l),  tWO_TO_32);	  return    new    ZipLong(tWO_TO_32,    l);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
360	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  10);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  10);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  10);	  return    new    ZipLong(l    +    10);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	123	None	replace
361	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  10);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  /  10);	  return    new    ZipLong(l    +    10);    	compilable	  [FE]  AssertionError  	123	2	replace
362	[BUG]  [BUGGY]  return  new  ZipLong(l  /  10);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  10);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  /  10);	  return    new    ZipLong(l    +    10);    	compilable	  [FE]  AssertionError  	123	2	replace
363	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  10);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  *  10);	  return    new    ZipLong(l    +    10);    	compilable	  [FE]  AssertionError  	123	2	replace
364	[BUG]  [BUGGY]  return  new  ZipLong(l  *  10);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  10);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  10);	  return    new    ZipLong(l    +    10);    	compilable	  [FE]  AssertionError  	123	2	replace
365	[BUG]  [BUGGY]  new  ZipLong(l  -  TWO_TO_32);  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  new  ZipLong(l  -  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	new  ZipLong(l  -  TWO_TO_32);	  return    new    ZipLong(l    -    TWO_TO_32);    new    ZipLong(l    -    TWO_TO_32);    	non-compiled	[CE]  missing  return  statement	55	None	replace
366	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l);  new  ZipLong(l  -  TWO_TO_32);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l);  new  ZipLong(l  -  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32,  l);  new  ZipLong(l  -  TWO_TO_32);	  return    new    ZipLong(l    -    TWO_TO_32);    new    ZipLong(l    -    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	55	None	replace
367	[BUG]  [BUGGY]  new  ZipLong(l  -  TWO_TO_32,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  new  ZipLong(l  -  TWO_TO_32,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	new  ZipLong(l  -  TWO_TO_32,  l);	  return    new    ZipLong(l    -    TWO_TO_32);    new    ZipLong(l    -    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	55	None	replace
368	[BUG]  [BUGGY]  new  ZipLong(l  *  TWO_TO_32);  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  new  ZipLong(l  *  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	new  ZipLong(l  *  TWO_TO_32);	  return    new    ZipLong(l    -    TWO_TO_32);    new    ZipLong(l    -    TWO_TO_32);    	non-compiled	[CE]  missing  return  statement	55	None	replace
369	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  new  ZipLong(l  -  TWO_TO_32);  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  new  ZipLong(l  -  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32  +  1);  new  ZipLong(l  -  TWO_TO_32);	  return    new    ZipLong(l    -    TWO_TO_32);    new    ZipLong(l    -    TWO_TO_32);    	non-compiled	[CE]  unreachable  statement	55	None	replace
370	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  new  ZipLong(l  /  TWO_TO_32);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  new  ZipLong(l  /  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    TWO_TO_32);    new  ZipLong(l  /  TWO_TO_32);	  	non-compiled	[CE]  unreachable  statement	30	None	add
371	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  long  l  /  TWO_TO_32;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  long  l  /  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    TWO_TO_32);    long  l  /  TWO_TO_32;	  	non-compiled	[CE]  ';'  expected	30	None	add
372	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  Long  l  /  TWO_TO_32;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  Long  l  /  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    TWO_TO_32);    Long  l  /  TWO_TO_32;	  	non-compiled	[CE]  ';'  expected	30	None	add
373	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  ((  ZipLong)l  /  TWO_TO_32).longValue();  [CE]  inconvertible  types  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  ((  ZipLong)l  /  TWO_TO_32).longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    TWO_TO_32);    ((  ZipLong)l  /  TWO_TO_32).longValue();	  	non-compiled	[CE]  inconvertible  types	30	None	add
374	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  l  /  TWO_TO_32;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  l  /  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    TWO_TO_32);    l  /  TWO_TO_32;	  	non-compiled	[CE]  not  a  statement	30	None	add
375	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  ((  ZipLong)l  /  TWO_TO_32).doubleValue();  [CE]  inconvertible  types  [FE]              AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  ((  ZipLong)l  /  TWO_TO_32).doubleValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    TWO_TO_32);    ((  ZipLong)l  /  TWO_TO_32).doubleValue();	  	non-compiled	[CE]  inconvertible  types	30	None	add
376	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  ((  ZipLong)l  /  TWO_TO_32).setLength(0);  [CE]  inconvertible  types  [FE]                AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  ((  ZipLong)l  /  TWO_TO_32).setLength(0);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    TWO_TO_32);    ((  ZipLong)l  /  TWO_TO_32).setLength(0);	  	non-compiled	[CE]  inconvertible  types	30	None	add
377	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  ((  ZipLong)l  /  TWO_TO_32).longValue());  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  ((  ZipLong)l  /  TWO_TO_32).longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    TWO_TO_32);    ((  ZipLong)l  /  TWO_TO_32).longValue());	  	non-compiled	[CE]  ';'  expected	30	None	add
378	[BUG]  [BUGGY]  Long  l  =  Long.parseLong(tWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  Long  l  =  Long.parseLong(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	Long  l  =  Long.parseLong(tWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    Long.parseLong(tWO_TO_32);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	51	None	replace
379	[BUG]  [BUGGY]  short  l  =  Long.parseLong(tWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  short  l  =  Long.parseLong(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	short  l  =  Long.parseLong(tWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    Long.parseLong(tWO_TO_32);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	51	None	replace
380	[BUG]  [BUGGY]  null  l  =  Long.parseLong(tWO_TO_32);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  null  l  =  Long.parseLong(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	null  l  =  Long.parseLong(tWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    Long.parseLong(tWO_TO_32);    	non-compiled	[CE]  not  a  statement	51	None	replace
381	[BUG]  [BUGGY]  l  =  Long.parseLong(tWO_TO_32);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  l  =  Long.parseLong(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	l  =  Long.parseLong(tWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    Long.parseLong(tWO_TO_32);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	51	None	replace
382	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  l.longValue());  [CE]  long  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  l.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  l.longValue());	  return    new    ZipLong(l    +    1,    l.intValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	152	None	replace
383	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1,  l.intValue());  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1,  l.intValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  1,  l.intValue());	  return    new    ZipLong(l    +    1,    l.intValue());    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	152	None	replace
384	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  X5455_Timestamp.intValue());  [CE]  cannot  find  symbol  X5455_Timestamp  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  X5455_Timestamp.intValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  X5455_Timestamp.intValue());	  return    new    ZipLong(l    +    1,    l.intValue());    	non-compiled	[CE]  cannot  find  symbol  X5455_Timestamp	152	None	replace
385	[BUG]  [BUGGY]  return  new  ZipLong(two_to_32  +  1,  l.intValue());  [CE]  cannot  find  symbol  two_to_32  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_to_32  +  1,  l.intValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_to_32  +  1,  l.intValue());	  return    new    ZipLong(l    +    1,    l.intValue());    	non-compiled	[CE]  cannot  find  symbol  two_to_32	152	None	replace
386	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  TWO_TO_32.intValue());  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  TWO_TO_32.intValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  TWO_TO_32.intValue());	  return    new    ZipLong(l    +    1,    l.intValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	152	None	replace
387	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  l.intValue(),  TWO_TO_32);  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  l.intValue(),  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  l.intValue(),  TWO_TO_32);	  return    new    ZipLong(l    +    1,    l.intValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	152	None	replace
388	[BUG]  [BUGGY]  return  new  ZipLong(L,  TWO_TO_32);  [CE]  cannot  find  symbol  L  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(L,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(L,  TWO_TO_32);	  return    new    ZipLong(TWO_TO_32,    l);    	non-compiled	[CE]  cannot  find  symbol  L	65	None	replace
389	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32,  l,  l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32,  l,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32,  l,  l);	  return    new    ZipLong(TWO_TO_32,    l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	65	None	replace
390	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32,  l,  unixTime);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32,  l,  unixTime);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32,  l,  unixTime);	  return    new    ZipLong(TWO_TO_32,    l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	65	None	replace
391	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32,  l,  unixTime);  [CE]  cannot  find  symbol  unixTime  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32,  l,  unixTime);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(TWO_TO_32,  l,  unixTime);	  return    new    ZipLong(TWO_TO_32,    l);    	non-compiled	[CE]  cannot  find  symbol  unixTime	65	None	replace
392	[BUG]  [BUGGY]  return  new  ZipLong(l  +  3);  new  ZipLong(l  +  3);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  3);  new  ZipLong(l  +  3);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    3);    new  ZipLong(l  +  3);	  	non-compiled	[CE]  unreachable  statement	37	None	add
393	[BUG]  [BUGGY]  return  new  ZipLong(l  +  3);  final  ZipLong  l  =  new  ZipLong(l  +  3);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  3);  final  ZipLong  l  =  new  ZipLong(l  +  3);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    3);    final  ZipLong  l  =  new  ZipLong(l  +  3);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	37	None	add
394	[BUG]  [BUGGY]  return  new  ZipLong(l  +  3);  long  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  3);  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    3);    long  l  =  getTime().longValue();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	37	None	add
395	[BUG]  [BUGGY]  return  new  ZipLong(l  +  3);  long  l  =  getTime();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  3);  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    3);    long  l  =  getTime();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	37	None	add
396	[BUG]  [BUGGY]  return  new  ZipLong(l  +  3);  ((  ZipLong)l).longValue();  [CE]  inconvertible  types  [FE]            AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  3);  ((  ZipLong)l).longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    3);    ((  ZipLong)l).longValue();	  	non-compiled	[CE]  inconvertible  types	37	None	add
397	[BUG]  [BUGGY]  return  new  ZipLong(l  +  3);  ((  ZipLong)l).setLong(l  +  3);  [CE]  inconvertible  types  [FE]              AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  3);  ((  ZipLong)l).setLong(l  +  3);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    3);    ((  ZipLong)l).setLong(l  +  3);	  	non-compiled	[CE]  inconvertible  types	37	None	add
398	[BUG]  [BUGGY]  return  new  ZipLong(l  +  3);  long  l  =  createTime(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  3);  long  l  =  createTime(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    3);    long  l  =  createTime(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	37	None	add
399	[BUG]  [BUGGY]  return  new  ZipLong(l  +  3);  long  l  =  getTime(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  3);  long  l  =  getTime(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    3);    long  l  =  getTime(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	37	None	add
400	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(TWO_TO_32  +  l);	  return    new    ZipLong(TWO_TO_32    +    1);    	compilable	  [FE]  AssertionError  	40	1	replace
401	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32  +  l);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(TWO_TO_32  +  l);	  return    new    ZipLong(TWO_TO_32    +    1);    	compilable	  [FE]  AssertionError  	40	1	replace
402	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32,  l  +  1);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32,  l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(TWO_TO_32,  l  +  1);	  return    new    ZipLong(TWO_TO_32    +    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	40	None	replace
403	[BUG]  [BUGGY]  return  new  ZipLong(ZipLong.longValue());  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(ZipLong.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(ZipLong.longValue());	  return    new    ZipLong(two_to_32.longValue());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
404	[BUG]  [BUGGY]  long  l  =  getTime(l);  return  new  ZipLong(l  +  1);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  getTime(l);  return  new  ZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  getTime(l);  return  new  ZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    long    l    =    getTime(l);    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	138	None	replace
405	[BUG]  [BUGGY]  long  l  =  getTime(l);  return  new  ZipLong(l  +  2);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  getTime(l);  return  new  ZipLong(l  +  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  getTime(l);  return  new  ZipLong(l  +  2);	  return    new    ZipLong(l    +    1);    long    l    =    getTime(l);    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	138	None	replace
406	[BUG]  [BUGGY]  null  l  =  getTime(l);  return  new  ZipLong(l  +  1);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  null  l  =  getTime(l);  return  new  ZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	null  l  =  getTime(l);  return  new  ZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    long    l    =    getTime(l);    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  not  a  statement	138	None	replace
407	[BUG]  [BUGGY]  final  long  l  =  getTime(l);  return  new  ZipLong(l  +  1);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  final  long  l  =  getTime(l);  return  new  ZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	final  long  l  =  getTime(l);  return  new  ZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    long    l    =    getTime(l);    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	138	None	replace
408	[BUG]  [BUGGY]  l  =  getTime(l);  return  new  ZipLong(l  +  1);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  l  =  getTime(l);  return  new  ZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	l  =  getTime(l);  return  new  ZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    long    l    =    getTime(l);    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
409	[BUG]  [BUGGY]  Long  l  =  getTime(l);  return  new  ZipLong(l  +  1);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  Long  l  =  getTime(l);  return  new  ZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	Long  l  =  getTime(l);  return  new  ZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    long    l    =    getTime(l);    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	138	None	replace
410	[BUG]  [BUGGY]  short  l  =  getTime(l);  return  new  ZipLong(l  +  1);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  short  l  =  getTime(l);  return  new  ZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	short  l  =  getTime(l);  return  new  ZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    long    l    =    getTime(l);    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	138	None	replace
411	[BUG]  [BUGGY]  bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  not  a  statement  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  not  a  statement	142	None	replace
412	[BUG]  [BUGGY]  bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  not  a  statement  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  not  a  statement	142	None	replace
413	[BUG]  [BUGGY]  nisip_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  not  a  statement  [FE]                                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  nisip_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	nisip_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  not  a  statement	142	None	replace
414	[BUG]  [BUGGY]  bit0_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  not  a  statement  [FE]                                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  bit0_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	bit0_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  not  a  statement	142	None	replace
415	[BUG]  [BUGGY]  attern( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [CE]  cannot  find  symbol  [FE]                                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  attern( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	attern( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);	  if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
416	[BUG]  [BUGGY]  aughtInvalidTimePresent( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [CE]  cannot  find  symbol  [FE]                                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  aughtInvalidTimePresent( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	aughtInvalidTimePresent( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);	  if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
417	[BUG]  [BUGGY]  return  new  ZipLong(l  -  1,  unixTime,  l);  [CE]  cannot  find  symbol  unixTime  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  1,  unixTime,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  1,  unixTime,  l);	  return    new    ZipLong(l    -    1,    l);    	non-compiled	[CE]  cannot  find  symbol  unixTime	127	None	replace
418	[BUG]  [BUGGY]  return  new  ZipLong(l  -  1,  TWO_TO_32,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  1,  TWO_TO_32,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  1,  TWO_TO_32,  l);	  return    new    ZipLong(l    -    1,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)	127	None	replace
419	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  -  1,  l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  -  1,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32,  l  -  1,  l);	  return    new    ZipLong(l    -    1,    l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	127	None	replace
420	[BUG]  [BUGGY]  return  new  ZipLong(l  -  1,  TWO_TO_32);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  1,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  1,  TWO_TO_32);	  return    new    ZipLong(l    -    1,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	127	None	replace
421	[BUG]  [BUGGY]  return  new  ZipLong(l,  l  -  1,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  l  -  1,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  l  -  1,  l);	  return    new    ZipLong(l    -    1,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)	127	None	replace
422	[BUG]  [BUGGY]  return  new  ZipLong(l  -  1,  unixTime);  [CE]  cannot  find  symbol  unixTime  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  1,  unixTime);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  1,  unixTime);	  return    new    ZipLong(l    -    1,    l);    	non-compiled	[CE]  cannot  find  symbol  unixTime	127	None	replace
423	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  l,  TWO_TO_32);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  l,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  l,  TWO_TO_32);	  return    new    ZipLong(l    +    1,    TWO_TO_32,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)	89	None	replace
424	[BUG]  [BUGGY]  return  new  ZipLong(l,  l  +  1,  TWO_TO_32,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long,long,long)  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  l  +  1,  TWO_TO_32,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  l  +  1,  TWO_TO_32,  l);	  return    new    ZipLong(l    +    1,    TWO_TO_32,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long,long,long)	89	None	replace
425	[BUG]  [BUGGY]  return  new  ZipLong(two_to_32  +  1,  l,  TWO_TO_32);  [CE]  cannot  find  symbol  two_to_32  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_to_32  +  1,  l,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_to_32  +  1,  l,  TWO_TO_32);	  return    new    ZipLong(l    +    1,    TWO_TO_32,    l);    	non-compiled	[CE]  cannot  find  symbol  two_to_32	89	None	replace
426	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  TWO_TO_32,  unixTime,  l);  [CE]  cannot  find  symbol  unixTime  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  TWO_TO_32,  unixTime,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  TWO_TO_32,  unixTime,  l);	  return    new    ZipLong(l    +    1,    TWO_TO_32,    l);    	non-compiled	[CE]  cannot  find  symbol  unixTime	89	None	replace
427	[BUG]  [BUGGY]  return  new  ZipLong(two_to_32  +  1,  l  +  1,  TWO_TO_32);  [CE]  cannot  find  symbol  two_to_32  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_to_32  +  1,  l  +  1,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_to_32  +  1,  l  +  1,  TWO_TO_32);	  return    new    ZipLong(l    +    1,    TWO_TO_32,    l);    	non-compiled	[CE]  cannot  find  symbol  two_to_32	89	None	replace
428	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  +  10  +  l);	  return    new    ZipLong(l    +    10    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	145	2	replace
429	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  +  l);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  10  +  l);	  return    new    ZipLong(l    +    10    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	145	2	replace
430	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  10  +  TWO_TO_32,  l);	  return    new    ZipLong(l    +    10    +    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	145	None	replace
431	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  *  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  +  10  *  TWO_TO_32);	  return    new    ZipLong(l    +    10    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	145	1	replace
432	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  *  TWO_TO_32);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  *  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  10  *  TWO_TO_32);	  return    new    ZipLong(l    +    10    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	145	1	replace
433	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  10  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  *  10  +  TWO_TO_32);	  return    new    ZipLong(l    +    10    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	145	2	replace
434	[BUG]  [BUGGY]  return  new  ZipLong(l  *  10  +  TWO_TO_32);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  10  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  10  +  TWO_TO_32);	  return    new    ZipLong(l    +    10    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	145	2	replace
435	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  10  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  /  10  +  TWO_TO_32);	  return    new    ZipLong(l    +    10    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	145	2	replace
436	[BUG]  [BUGGY]  return  new  ZipLong(l  /  10  +  TWO_TO_32);  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  10  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  /  10  +  TWO_TO_32);	  return    new    ZipLong(l    +    10    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	145	2	replace
437	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32  -  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  +  10  +  TWO_TO_32  -  1);	  return    new    ZipLong(l    +    10    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	145	2	replace
438	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32  -  1);  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32  -  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  10  +  TWO_TO_32  -  1);	  return    new    ZipLong(l    +    10    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	145	2	replace
439	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  l,  accessTime);  [CE]  non-static  variable  accessTime  cannot  be  referenced  from  a  static  context  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  l,  accessTime);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  l,  accessTime);	  return    new    ZipLong(l    +    1,    l,    unixTime);    	non-compiled	[CE]  non-static  variable  accessTime  cannot  be  referenced  from  a  static  context	93	None	replace
440	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  l,  createTime);  [CE]  non-static  variable  createTime  cannot  be  referenced  from  a  static  context  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  l,  createTime);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  l,  createTime);	  return    new    ZipLong(l    +    1,    l,    unixTime);    	non-compiled	[CE]  non-static  variable  createTime  cannot  be  referenced  from  a  static  context	93	None	replace
441	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  l,  HEADER_ID);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long,ZipShort)  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  l,  HEADER_ID);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  l,  HEADER_ID);	  return    new    ZipLong(l    +    1,    l,    unixTime);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long,ZipShort)	93	None	replace
442	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  l,  this.accessTime);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  l,  this.accessTime);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  l,  this.accessTime);	  return    new    ZipLong(l    +    1,    l,    unixTime);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	93	None	replace
443	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  l,  DATE_TIME_BIT);  [CE]  cannot  find  symbol  DATE_TIME_BIT  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  l,  DATE_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  l,  DATE_TIME_BIT);	  return    new    ZipLong(l    +    1,    l,    unixTime);    	non-compiled	[CE]  cannot  find  symbol  DATE_TIME_BIT	93	None	replace
444	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  missing  return  statement	150	None	replace
445	[BUG]  [BUGGY]  while(l  <  TWO_TO_32)  {  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32)  {  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32)  {  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  ';'  expected	150	None	replace
446	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    return    new    ZipLong(TWO_TO_32);    }    	compilable	  [FE]  AssertionError  	150	2	replace
447	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    return    new    ZipLong(TWO_TO_32);    }    	compilable	  [FE]  AssertionError  	150	2	replace
448	[BUG]  [BUGGY]  return  new  ZipLong(l  +  18);  long  l  +  18;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  18);  long  l  +  18;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    18);    long  l  +  18;	  	non-compiled	[CE]  ';'  expected	34	None	add
449	[BUG]  [BUGGY]  return  new  ZipLong(l  +  18);  new  ZipLong(l  +  18);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  18);  new  ZipLong(l  +  18);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    18);    new  ZipLong(l  +  18);	  	non-compiled	[CE]  unreachable  statement	34	None	add
450	[BUG]  [BUGGY]  return  new  ZipLong(l  +  18);  ((  ZipLong)l).longValue();  [CE]  inconvertible  types  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  18);  ((  ZipLong)l).longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    18);    ((  ZipLong)l).longValue();	  	non-compiled	[CE]  inconvertible  types	34	None	add
451	[BUG]  [BUGGY]  return  new  ZipLong(l  +  18);  long  l  =  Long.parseLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  18);  long  l  =  Long.parseLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    18);    long  l  =  Long.parseLong(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	34	None	add
452	[BUG]  [BUGGY]  return  new  ZipLong(l  +  18);  Long  l  +  18;  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  18);  Long  l  +  18;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    18);    Long  l  +  18;	  	non-compiled	[CE]  ';'  expected	34	None	add
453	[BUG]  [BUGGY]  return  new  ZipLong(l  +  18);  ((  ZipLong)l  +  18).unixTimeToZipLong(l);  [CE]  inconvertible  types  [FE]              AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  18);  ((  ZipLong)l  +  18).unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    18);    ((  ZipLong)l  +  18).unixTimeToZipLong(l);	  	non-compiled	[CE]  inconvertible  types	34	None	add
454	[BUG]  [BUGGY]  return  new  ZipLong(l  +  18);  long  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  18);  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    18);    long  l  =  getTime().longValue();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	34	None	add
455	[BUG]  [BUGGY]  return  new  ZipLong(l  +  18);  long  l  =  Long.parseLong(tWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  18);  long  l  =  Long.parseLong(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    18);    long  l  =  Long.parseLong(tWO_TO_32);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	34	None	add
456	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  new  ZipLong(l  *  TWO_TO_32);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  new  ZipLong(l  *  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    *    TWO_TO_32);    new  ZipLong(l  *  TWO_TO_32);	  	non-compiled	[CE]  unreachable  statement	28	None	add
457	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  *  TWO_TO_32;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  *  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    *    TWO_TO_32);    long  l  *  TWO_TO_32;	  	non-compiled	[CE]  ';'  expected	28	None	add
458	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  =  Long.parseLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  =  Long.parseLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    *    TWO_TO_32);    long  l  =  Long.parseLong(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	28	None	add
459	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    *    TWO_TO_32);    long  l  =  getTime().longValue();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	28	None	add
460	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  =  Long.parseLong(tWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]            AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  =  Long.parseLong(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    *    TWO_TO_32);    long  l  =  Long.parseLong(tWO_TO_32);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	28	None	add
461	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  =  getTime(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]              AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  =  getTime(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    *    TWO_TO_32);    long  l  =  getTime(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	28	None	add
462	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }	  return    new    ZipLong(l    +    1);    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  missing  return  statement	134	None	replace
463	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    ZipLong(l    +    1);    return    new    ZipLong(l    +    1);    	compilable	  [FE]  AssertionError  	134	2	replace
464	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    ZipLong(l    +    1);    return    new    ZipLong(l    +    1);    	compilable	  [FE]  AssertionError  	134	2	replace
465	[BUG]  [BUGGY]  return  new  ZipLong(toZipLong(tWO_TO_32),  l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(toZipLong(tWO_TO_32),  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(toZipLong(tWO_TO_32),  l);	  return    new    ZipLong(toZipLong(tWO_TO_32));    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	8	None	replace
466	[BUG]  [BUGGY]  return  new  ZipLong(toZipLong(tWO_TO_32,  l));  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(toZipLong(tWO_TO_32,  l));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(toZipLong(tWO_TO_32,  l));	  return    new    ZipLong(toZipLong(tWO_TO_32));    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	8	None	replace
467	[BUG]  [BUGGY]  return  new  ZipLong(toZipLong(tWO_TO_32  +  l));  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(toZipLong(tWO_TO_32  +  l));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(toZipLong(tWO_TO_32  +  l));	  return    new    ZipLong(toZipLong(tWO_TO_32));    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	8	None	replace
468	[BUG]  [BUGGY]  long  l  +=  TWO_TO_32;  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  +=  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  +=  TWO_TO_32;	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    +    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	48	None	replace
469	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  +=  TWO_TO_32;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  +=  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32);  long  l  +=  TWO_TO_32;	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    +    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	48	None	replace
470	[BUG]  [BUGGY]  long  l  =  l  +  TWO_TO_32;  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  l  +  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  l  +  TWO_TO_32;	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    +    TWO_TO_32;    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	48	None	replace
471	[BUG]  [BUGGY]  long  l  =  TWO_TO_32;  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  TWO_TO_32;	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    +    TWO_TO_32;    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	48	None	replace
472	[BUG]  [BUGGY]  final  long  l  +=  TWO_TO_32;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  final  long  l  +=  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	final  long  l  +=  TWO_TO_32;	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    +    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	48	None	replace
473	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l  +  TWO_TO_32;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l  +  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32,  l  +  TWO_TO_32;	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    +    TWO_TO_32;    	non-compiled	[CE]  ')'  expected	48	None	replace
474	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  (ZipLong)unixTimeToZipLong(l);  [CE]  not  a  statement  [FE]    StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  (ZipLong)unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l);    (ZipLong)unixTimeToZipLong(l);	  	non-compiled	[CE]  not  a  statement	112	None	add
475	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  long  l  =  unixTimeToZipLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]      StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  long  l  =  unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l);    long  l  =  unixTimeToZipLong(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	112	None	add
476	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  long  l  =  unixTimeToZipLong(l);  return(ZipLong)unixTimeToZipLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]        StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  long  l  =  unixTimeToZipLong(l);  return(ZipLong)unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l);    long  l  =  unixTimeToZipLong(l);  return(ZipLong)unixTimeToZipLong(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	112	None	add
477	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  (ZipLong)unixTimeToZipLong(l);  return(ZipLong)unixTimeToZipLong(l);  [CE]  not  a  statement  [FE]          StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  (ZipLong)unixTimeToZipLong(l);  return(ZipLong)unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l);    (ZipLong)unixTimeToZipLong(l);  return(ZipLong)unixTimeToZipLong(l);	  	non-compiled	[CE]  not  a  statement	112	None	add
478	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  long  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]            StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l);    long  l  =  getTime().longValue();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	112	None	add
479	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  (ZipLong)unixTimeToZipLong(l);  unixTimeToZipLong(l);  [CE]  not  a  statement  [FE]              StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  (ZipLong)unixTimeToZipLong(l);  unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l);    (ZipLong)unixTimeToZipLong(l);  unixTimeToZipLong(l);	  	non-compiled	[CE]  not  a  statement	112	None	add
480	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  long  l  =  unixTimeToZipLong(l.longValue());  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  long  l  =  unixTimeToZipLong(l.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l);    long  l  =  unixTimeToZipLong(l.longValue());	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	112	None	add
481	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  incompatible  types	159	None	replace
482	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_createTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_createTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_createTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  incompatible  types	159	None	replace
483	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit2_createTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit2_createTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit2_createTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  incompatible  types	159	None	replace
484	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  incompatible  types  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  incompatible  types	159	None	replace
485	[BUG]  [BUGGY]  while(l  <  TWO_TO_32)  {  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32)  {  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32)  {  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
486	[BUG]  [BUGGY]  result  =  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  cannot  find  symbol  result  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  result  =  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	result  =  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol  result	13	None	replace
487	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  2);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  2);	  return    new    ZipLong(l    +    2);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	33	None	replace
488	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  2  *  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  +  2  *  TWO_TO_32);	  return    new    ZipLong(l    +    2);    	compilable	  [FE]  AssertionError  	33	1	replace
489	[BUG]  [BUGGY]  return  new  ZipLong(l  +  2  *  TWO_TO_32);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  2  *  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  2  *  TWO_TO_32);	  return    new    ZipLong(l    +    2);    	compilable	  [FE]  AssertionError  	33	1	replace
490	[BUG]  [BUGGY]  return  new  ZipLong(two_to_32  -  1);  [CE]  cannot  find  symbol  two_to_32  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_to_32  -  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_to_32  -  1);	  return    new    ZipLong(l    -    1);    	non-compiled	[CE]  cannot  find  symbol  two_to_32	75	None	replace
491	[BUG]  [BUGGY]  return  new  ZipLong(tWorstTime,  l);  [CE]  cannot  find  symbol  tWorstTime  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWorstTime,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWorstTime,  l);	  return    new    ZipLong(tWorstTime);    	non-compiled	[CE]  cannot  find  symbol  tWorstTime	96	None	replace
492	[BUG]  [BUGGY]  return  new  ZipLong(tWorstTime.longValue());  [CE]  cannot  find  symbol  tWorstTime  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWorstTime.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWorstTime.longValue());	  return    new    ZipLong(tWorstTime);    	non-compiled	[CE]  cannot  find  symbol  tWorstTime	96	None	replace
493	[BUG]  [BUGGY]  long  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  getTime().longValue();	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    getTime().longValue();    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	49	None	replace
494	[BUG]  [BUGGY]  Long  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  Long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	Long  l  =  getTime().longValue();	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    getTime().longValue();    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	49	None	replace
495	[BUG]  [BUGGY]  final  long  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  final  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	final  long  l  =  getTime().longValue();	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    getTime().longValue();    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	49	None	replace
496	[BUG]  [BUGGY]  short  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  short  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	short  l  =  getTime().longValue();	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    getTime().longValue();    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	49	None	replace
497	[BUG]  [BUGGY]  int  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  int  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	int  l  =  getTime().longValue();	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    getTime().longValue();    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	49	None	replace
498	[BUG]  [BUGGY]  l  =  getTime().longValue();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	l  =  getTime().longValue();	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    getTime().longValue();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
499	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  incompatible  types	155	None	replace
500	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  new  ZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  new  ZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  new  ZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  incompatible  types	155	None	replace
501	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit2_createTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit2_createTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit2_createTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  incompatible  types	155	None	replace
502	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  unixTime(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  unixTime(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  unixTime(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
503	[BUG]  [BUGGY]  if(bit1_accessTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  non-static  variable  bit1_accessTimePresent  cannot  be  referenced  from  a  static  context  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit1_accessTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit1_accessTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  non-static  variable  bit1_accessTimePresent  cannot  be  referenced  from  a  static  context	155	None	replace
504	[BUG]  [BUGGY]  while(l  <  TWO_TO_32)  {  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32)  {  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32)  {  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
505	[BUG]  [BUGGY]  result  =  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  cannot  find  symbol  result  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  result  =  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	result  =  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol  result	14	None	replace
506	[BUG]  [BUGGY]  return  new  ZipLong(l,  X5455_Timestamp);  [CE]  cannot  find  symbol  X5455_Timestamp  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  X5455_Timestamp);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  X5455_Timestamp);	  return    new    ZipLong(l,    t);    	non-compiled	[CE]  cannot  find  symbol  X5455_Timestamp	2	None	replace
507	[BUG]  [BUGGY]  return  new  ZipLong(l,  c);  [CE]  cannot  find  symbol  c  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  c);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  c);	  return    new    ZipLong(l,    t);    	non-compiled	[CE]  cannot  find  symbol  c	2	None	replace
508	[BUG]  [BUGGY]  return  new  ZipLong(unixTime.longValue(),  l);  [CE]  cannot  find  symbol  unixTime  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTime.longValue(),  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTime.longValue(),  l);	  return    new    ZipLong(unixTime.longValue());    	non-compiled	[CE]  cannot  find  symbol  unixTime	26	None	replace
509	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  unixTime);  [CE]  cannot  find  symbol  unixTime  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  unixTime);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32,  unixTime);	  return    new    ZipLong(l    -    TWO_TO_32,    l);    	non-compiled	[CE]  cannot  find  symbol  unixTime	76	None	replace
510	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  unixTime,  l);  [CE]  cannot  find  symbol  unixTime  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  unixTime,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32,  unixTime,  l);	  return    new    ZipLong(l    -    TWO_TO_32,    l);    	non-compiled	[CE]  cannot  find  symbol  unixTime	76	None	replace
511	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l,  unixTime);  [CE]  cannot  find  symbol  unixTime  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l,  unixTime);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32,  l,  unixTime);	  return    new    ZipLong(l    -    TWO_TO_32,    l);    	non-compiled	[CE]  cannot  find  symbol  unixTime	76	None	replace
512	[BUG]  [BUGGY]  return  new  ZipLong(l,  l  -  TWO_TO_32);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  l  -  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  l  -  TWO_TO_32);	  return    new    ZipLong(l    -    TWO_TO_32,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	76	None	replace
513	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l,  this.accessTime);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l,  this.accessTime);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32,  l,  this.accessTime);	  return    new    ZipLong(l    -    TWO_TO_32,    l);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	76	None	replace
514	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
515	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
516	[BUG]  [BUGGY]  if(l  <  =  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  =  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  =  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
517	[BUG]  [BUGGY]  if(l  ==  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  ==  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  ==  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
518	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  if(bit1_accessTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  if(bit1_accessTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  if(bit1_accessTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
519	[BUG]  [BUGGY]  if(bit0_accessTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  cannot  find  symbol  bit0_accessTimePresent  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit0_accessTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_accessTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  cannot  find  symbol  bit0_accessTimePresent	99	None	replace
520	[BUG]  [BUGGY]  lendemain(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  lendemain(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	lendemain(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	82	None	replace
521	[BUG]  [BUGGY]  while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  missing  return  statement  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  missing  return  statement	82	None	replace
522	[BUG]  [BUGGY]  hingeger  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  >  expected  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  hingeger  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	hingeger  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  >  expected	82	None	replace
523	[BUG]  [BUGGY]  while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  [CE]  ';'  expected  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);	  if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	82	None	replace
524	[BUG]  [BUGGY]  while(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  missing  return  statement  [FE]                                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  missing  return  statement	82	None	replace
525	[BUG]  [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    else    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	158	None	replace
526	[BUG]  [BUGGY]  if(bit1_accessTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  non-static  variable  bit1_accessTimePresent  cannot  be  referenced  from  a  static  context  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit1_accessTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit1_accessTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    else    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  non-static  variable  bit1_accessTimePresent  cannot  be  referenced  from  a  static  context	158	None	replace
527	[BUG]  [BUGGY]  if(bit0_accessTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  cannot  find  symbol  bit0_accessTimePresent  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit0_accessTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_accessTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    else    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  cannot  find  symbol  bit0_accessTimePresent	158	None	replace
528	[BUG]  [BUGGY]  if(bit0_accessTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  cannot  find  symbol  bit0_accessTimePresent  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit0_accessTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_accessTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    else    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  cannot  find  symbol  bit0_accessTimePresent	158	None	replace
529	[BUG]  [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  unixTimeToZipLong(l  +  TWO_TO_32);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  unixTimeToZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  unixTimeToZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    else    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	158	None	replace
530	[BUG]  [BUGGY]  return  new  ZipLong(l  +  32);  new  ZipLong(l  +  32);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  32);  new  ZipLong(l  +  32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    32);    new  ZipLong(l  +  32);	  	non-compiled	[CE]  unreachable  statement	117	None	add
531	[BUG]  [BUGGY]  return  new  ZipLong(l  +  32);  long  l  =  System.currentTimeMillis();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  32);  long  l  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    32);    long  l  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	117	None	add
532	[BUG]  [BUGGY]  return  new  ZipLong(l  +  32);  long  l  =  Long.parseLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  32);  long  l  =  Long.parseLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    32);    long  l  =  Long.parseLong(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	117	None	add
533	[BUG]  [BUGGY]  return  new  ZipLong(l  +  32);  long  l  +  32;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  32);  long  l  +  32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    32);    long  l  +  32;	  	non-compiled	[CE]  ';'  expected	117	None	add
534	[BUG]  [BUGGY]  return  new  ZipLong(l  +  32);  long  l  =  Long.parseLong(tWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]            AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  32);  long  l  =  Long.parseLong(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    32);    long  l  =  Long.parseLong(tWO_TO_32);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	117	None	add
535	[BUG]  [BUGGY]  return  new  ZipLong(l  +  32);  long  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]              AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  32);  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    32);    long  l  =  getTime().longValue();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	117	None	add
536	[BUG]  [BUGGY]  return  new  ZipLong(l  +  32);  long  l  =  getTime();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  32);  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    32);    long  l  =  getTime();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	117	None	add
537	[BUG]  [BUGGY]  return  new  ZipLong(l  +  32);  long  l  =  Long.parseLong(l);  return  new  ZipLong(l  +  32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  32);  long  l  =  Long.parseLong(l);  return  new  ZipLong(l  +  32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    32);    long  l  =  Long.parseLong(l);  return  new  ZipLong(l  +  32);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	117	None	add
538	[BUG]  [BUGGY]  pendingThan  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  pendingThan  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	pendingThan  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    =    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
539	[BUG]  [BUGGY]  hingeger  <  TWO_TO_32  ||  l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  >  expected  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  hingeger  <  TWO_TO_32  ||  l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	hingeger  <  TWO_TO_32  ||  l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    =    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  >  expected	141	None	replace
540	[BUG]  [BUGGY]  hingeger  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [CE]  >  expected  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  hingeger  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	hingeger  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);	  if(l    <    =    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  >  expected	141	None	replace
541	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1);  long  l  =  unixTimeToZipLong(l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1);  long  l  =  unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  1);  long  l  =  unixTimeToZipLong(l);	  return    new    ZipLong(l    +    1);    long    l    =    unixTimeToZipLong(l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	70	None	replace
542	[BUG]  [BUGGY]  new  ZipLong(l  +  1);  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  new  ZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	new  ZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    new    ZipLong(l    +    1);    	non-compiled	[CE]  missing  return  statement	66	None	replace
543	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32);  new  ZipLong(l  +  1);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32);  new  ZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32);  new  ZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    new    ZipLong(l    +    1);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	66	None	replace
544	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  unixTimeToZipLong(l  +  1);  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  unixTimeToZipLong(l  +  1);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  unixTimeToZipLong(l  +  1);  }	  return    new    ZipLong(l    +    1);    new    ZipLong(l    +    1);    	non-compiled	[CE]  missing  return  statement	66	None	replace
545	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  unixTimeToZipLong(l  +  1);  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  unixTimeToZipLong(l  +  1);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  unixTimeToZipLong(l  +  1);  }	  return    new    ZipLong(l    +    1);    new    ZipLong(l    +    1);    	non-compiled	[CE]  missing  return  statement	66	None	replace
546	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  return  new  ZipLong(l  +  1);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  return  new  ZipLong(l  +  1);  }	  return    new    ZipLong(l    +    1);    new    ZipLong(l    +    1);    	compilable	  [FE]  AssertionError  	66	2	replace
547	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  return  new  ZipLong(l  +  1);  }  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  return  new  ZipLong(l  +  1);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  return  new  ZipLong(l  +  1);  }	  return    new    ZipLong(l    +    1);    new    ZipLong(l    +    1);    	compilable	  [FE]  AssertionError  	66	2	replace
548	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1);  long  l  =  getTime().longValue();  [CE]  cannot  find  symbol  tWO_TO_32  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1);  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  1);  long  l  =  getTime().longValue();	  return    new    ZipLong(l    +    1);    long    l    =    getTime().longValue();    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	67	None	replace
549	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32);  long  l  =  getTime().longValue();  [CE]  cannot  find  symbol  tWO_TO_32  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32);  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32);  long  l  =  getTime().longValue();	  return    new    ZipLong(l    +    1);    long    l    =    getTime().longValue();    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	67	None	replace
550	[BUG]  [BUGGY]  null  l  =  getTime().longValue();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  null  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	null  l  =  getTime().longValue();	  return    new    ZipLong(l    +    1);    long    l    =    getTime().longValue();    	non-compiled	[CE]  not  a  statement	67	None	replace
551	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1);  int  l  =  getTime().longValue();  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1);  int  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  1);  int  l  =  getTime().longValue();	  return    new    ZipLong(l    +    1);    long    l    =    getTime().longValue();    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	67	None	replace
552	[BUG]  [BUGGY]  bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  not  a  statement	139	None	replace
553	[BUG]  [BUGGY]  bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  not  a  statement	139	None	replace
554	[BUG]  [BUGGY]  nisip_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  not  a  statement  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  nisip_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	nisip_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  not  a  statement	139	None	replace
555	[BUG]  [BUGGY]  bit0_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  not  a  statement  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  bit0_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	bit0_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  not  a  statement	139	None	replace
556	[BUG]  [BUGGY]  aughtInvalidTimePresent( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  [CE]  cannot  find  symbol  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  aughtInvalidTimePresent( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	aughtInvalidTimePresent( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);	  if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
557	[BUG]  [BUGGY]  attern( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  [CE]  cannot  find  symbol  [FE]                                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  attern( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	attern( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);	  if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
558	[BUG]  [BUGGY]  hingeger  <  TWO_TO_32  ||  l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  >  expected  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  hingeger  <  TWO_TO_32  ||  l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	hingeger  <  TWO_TO_32  ||  l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    =    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  >  expected	140	None	replace
559	[BUG]  [BUGGY]  hingeger  <  TWO_TO_32  ||  l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  [CE]  >  expected  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  hingeger  <  TWO_TO_32  ||  l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	hingeger  <  TWO_TO_32  ||  l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);	  if(l    <    =    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  >  expected	140	None	replace
560	[BUG]  [BUGGY]  hingeger  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  [CE]  >  expected  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  hingeger  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	hingeger  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);	  if(l    <    =    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  >  expected	140	None	replace
561	[BUG]  [BUGGY]  return  Long.valueOf(tWO_TO_32);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  Long.valueOf(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  Long.valueOf(tWO_TO_32);	  return    Long.valueOf(l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	116	None	replace
562	[BUG]  [BUGGY]  return  Long.valueOf(two_TO_32);  [CE]  cannot  find  symbol  two_TO_32  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  Long.valueOf(two_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  Long.valueOf(two_TO_32);	  return    Long.valueOf(l);    	non-compiled	[CE]  cannot  find  symbol  two_TO_32	116	None	replace
563	[BUG]  [BUGGY]  return  Long.valueOf(l  -  TWO_TO_32);  [CE]  incompatible  types  [FE]                                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  Long.valueOf(l  -  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  Long.valueOf(l  -  TWO_TO_32);	  return    Long.valueOf(l);    	non-compiled	[CE]  incompatible  types	116	None	replace
564	[BUG]  [BUGGY]  return  Long.valueOf(l  +  TWO_TO_32);  [CE]  incompatible  types  [FE]                                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  Long.valueOf(l  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  Long.valueOf(l  +  TWO_TO_32);	  return    Long.valueOf(l);    	non-compiled	[CE]  incompatible  types	116	None	replace
565	[BUG]  [BUGGY]  return  Long.valueOf(Long.valueOf(tWO_TO_32));  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  Long.valueOf(Long.valueOf(tWO_TO_32));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  Long.valueOf(Long.valueOf(tWO_TO_32));	  return    Long.valueOf(l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	116	None	replace
566	[BUG]  [BUGGY]  return  Long.valueOf(l,  X5455_ExtendedTimestamp.class);  [CE]  no  suitable  method  found  for  valueOf(long,Class<X5455_ExtendedTimestamp>)  [FE]                                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  Long.valueOf(l,  X5455_ExtendedTimestamp.class);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  Long.valueOf(l,  X5455_ExtendedTimestamp.class);	  return    Long.valueOf(l);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(long,Class<X5455_ExtendedTimestamp>)	116	None	replace
567	[BUG]  [BUGGY]  return  Long.valueOf(l,  TWO_TO_32);  [CE]  no  suitable  method  found  for  valueOf(long,long)  [FE]                                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  Long.valueOf(l,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  Long.valueOf(l,  TWO_TO_32);	  return    Long.valueOf(l);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(long,long)	116	None	replace
568	[BUG]  [BUGGY]  return  new  ZipLong(l  +  2,  unixTime,  l);  [CE]  cannot  find  symbol  unixTime  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  2,  unixTime,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  2,  unixTime,  l);	  return    new    ZipLong(l    +    2,    l);    	non-compiled	[CE]  cannot  find  symbol  unixTime	105	None	replace
569	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  +  2,  l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  +  2,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32,  l  +  2,  l);	  return    new    ZipLong(l    +    2,    l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	105	None	replace
570	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  2,  l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  2,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  2,  l);	  return    new    ZipLong(l    +    2,    l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	105	None	replace
571	[BUG]  [BUGGY]  return  new  ZipLong(l  +  3,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  3,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  3,  l);	  return    new    ZipLong(l    +    2,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	105	None	replace
572	[BUG]  [BUGGY]  return  new  ZipLong(l,  l  +  2,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  l  +  2,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  l  +  2,  l);	  return    new    ZipLong(l    +    2,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)	105	None	replace
573	[BUG]  [BUGGY]  return  new  ZipLong(l  +  2,  l,  unixTime);  [CE]  cannot  find  symbol  unixTime  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  2,  l,  unixTime);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  2,  l,  unixTime);	  return    new    ZipLong(l    +    2,    l);    	non-compiled	[CE]  cannot  find  symbol  unixTime	105	None	replace
574	[BUG]  [BUGGY]  return  new  ZipLong(l,  tWO_TO_32  +  1,  l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  tWO_TO_32  +  1,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  tWO_TO_32  +  1,  l);	  return    new    ZipLong(tWO_TO_32,    l    +    1,    l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	92	None	replace
575	[BUG]  [BUGGY]  return  new  ZipLong(l,  l  +  1,  t);  [CE]  cannot  find  symbol  t  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  l  +  1,  t);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  l  +  1,  t);	  return    new    ZipLong(tWO_TO_32,    l    +    1,    l);    	non-compiled	[CE]  cannot  find  symbol  t	92	None	replace
576	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong,  l  +  1,  l);  [CE]  cannot  find  symbol  unixTimeToZipLong  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong,  l  +  1,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong,  l  +  1,  l);	  return    new    ZipLong(tWO_TO_32,    l    +    1,    l);    	non-compiled	[CE]  cannot  find  symbol  unixTimeToZipLong	92	None	replace
577	[BUG]  [BUGGY]  return  new  ZipLong(l,  l  +  1,  tWO_TO_32);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  l  +  1,  tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  l  +  1,  tWO_TO_32);	  return    new    ZipLong(tWO_TO_32,    l    +    1,    l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	92	None	replace
578	[BUG]  [BUGGY]  return  new  ZipLong(l,  l  +  1,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  l  +  1,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  l  +  1,  l);	  return    new    ZipLong(tWO_TO_32,    l    +    1,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)	92	None	replace
579	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  missing  return  statement	157	None	replace
580	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  ';'  expected	157	None	replace
581	[BUG]  [BUGGY]  if(l  ==  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  ==  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  ==  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  missing  return  statement	157	None	replace
582	[BUG]  [BUGGY]  if(l  >=  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  >=  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  >=  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  missing  return  statement	157	None	replace
583	[BUG]  [BUGGY]  if(l  <  =  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  =  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  =  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
584	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.class));  [CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.class));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.class));	  return    new    ZipLong(unixTimeToZipLong(l,    l));    	non-compiled	[CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;	45	None	replace
585	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp));  [CE]  cannot  find  symbol  X5455_ExtendedTimestamp  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp));	  return    new    ZipLong(unixTimeToZipLong(l,    l));    	non-compiled	[CE]  cannot  find  symbol  X5455_ExtendedTimestamp	45	None	replace
586	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  l),  X5455_ExtendedTimestamp);  [CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  l),  X5455_ExtendedTimestamp);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  l),  X5455_ExtendedTimestamp);	  return    new    ZipLong(unixTimeToZipLong(l,    l));    	non-compiled	[CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;	45	None	replace
587	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT),  l);  [CE]  cannot  find  symbol  DEFAULT_TIME_BIT  [FE]                                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT),  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT),  l);	  return    new    ZipLong(unixTimeToZipLong(l,    l));    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_TIME_BIT	45	None	replace
588	[BUG]  [BUGGY]  return  new  ZipLong(toZipLong,  l);  [CE]  cannot  find  symbol  toZipLong  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(toZipLong,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(toZipLong,  l);	  return    new    ZipLong(unixTimeToZipLong,    l);    	non-compiled	[CE]  cannot  find  symbol  toZipLong	5	None	replace
589	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  tWO_TO_32));  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  tWO_TO_32));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  tWO_TO_32));	  return    new    ZipLong(unixTimeToZipLong(tWO_TO_32,    l));    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	44	None	replace
590	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  t));  [CE]  cannot  find  symbol  t  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  t));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  t));	  return    new    ZipLong(unixTimeToZipLong(tWO_TO_32,    l));    	non-compiled	[CE]  cannot  find  symbol  t	44	None	replace
591	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  tw_TO_32));  [CE]  cannot  find  symbol  tw_TO_32  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  tw_TO_32));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  tw_TO_32));	  return    new    ZipLong(unixTimeToZipLong(tWO_TO_32,    l));    	non-compiled	[CE]  cannot  find  symbol  tw_TO_32	44	None	replace
592	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(two_TO_32,  l));  [CE]  cannot  find  symbol  two_TO_32  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(two_TO_32,  l));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(two_TO_32,  l));	  return    new    ZipLong(unixTimeToZipLong(tWO_TO_32,    l));    	non-compiled	[CE]  cannot  find  symbol  two_TO_32	44	None	replace
593	[BUG]  [BUGGY]  long  l  -  TWO_TO_32);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  -  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  -  TWO_TO_32);	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    -    TWO_TO_32);    	non-compiled	[CE]  ';'  expected	57	None	replace
594	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32,  l.longValue());  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32,  l.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(TWO_TO_32,  l.longValue());	  return    new    ZipLong(TWO_TO_32.longValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	24	None	replace
595	[BUG]  [BUGGY]  return  new  ZipLong(l,  TWO_TO_32.longValue());  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  TWO_TO_32.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  TWO_TO_32.longValue());	  return    new    ZipLong(TWO_TO_32.longValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	24	None	replace
596	[BUG]  [BUGGY]  return  new  ZipLong(Long.longValue());  [CE]  non-static  method  longValue()  cannot  be  referenced  from  a  static  context  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(Long.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(Long.longValue());	  return    new    ZipLong(TWO_TO_32.longValue());    	non-compiled	[CE]  non-static  method  longValue()  cannot  be  referenced  from  a  static  context	24	None	replace
597	[BUG]  [BUGGY]  return  new  ZipLong(unixTimePresent);  [CE]  cannot  find  symbol  unixTimePresent  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimePresent);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimePresent);	  return    new    ZipLong(bit0_modifyTimePresent);    	non-compiled	[CE]  cannot  find  symbol  unixTimePresent	97	None	replace
598	[BUG]  [BUGGY]  return  new  ZipLong(two_accessTimePresent);  [CE]  cannot  find  symbol  two_accessTimePresent  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_accessTimePresent);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_accessTimePresent);	  return    new    ZipLong(bit0_modifyTimePresent);    	non-compiled	[CE]  cannot  find  symbol  two_accessTimePresent	97	None	replace
599	[BUG]  [BUGGY]  return  new  ZipLong(t0_accessTimePresent);  [CE]  cannot  find  symbol  t0_accessTimePresent  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(t0_accessTimePresent);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(t0_accessTimePresent);	  return    new    ZipLong(bit0_modifyTimePresent);    	non-compiled	[CE]  cannot  find  symbol  t0_accessTimePresent	97	None	replace
600	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  l.length,  l.length);  [CE]  long  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  l.length,  l.length);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  l.length,  l.length);	  return    new    ZipLong(l    +    1,    l.length);    	non-compiled	[CE]  long  cannot  be  dereferenced	95	None	replace
601	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1,  l.length);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1,  l.length);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  1,  l.length);	  return    new    ZipLong(l    +    1,    l.length);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	95	None	replace
602	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  l,  l.length);  [CE]  long  cannot  be  dereferenced  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  l,  l.length);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  l,  l.length);	  return    new    ZipLong(l    +    1,    l.length);    	non-compiled	[CE]  long  cannot  be  dereferenced	95	None	replace
603	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  TWO_TO_32,  l.length);  [CE]  long  cannot  be  dereferenced  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  TWO_TO_32,  l.length);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  TWO_TO_32,  l.length);	  return    new    ZipLong(l    +    1,    l.length);    	non-compiled	[CE]  long  cannot  be  dereferenced	95	None	replace
604	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  l.length,  TWO_TO_32);  [CE]  long  cannot  be  dereferenced  [FE]                                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  l.length,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  l.length,  TWO_TO_32);	  return    new    ZipLong(l    +    1,    l.length);    	non-compiled	[CE]  long  cannot  be  dereferenced	95	None	replace
605	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  l.length  -  1);  [CE]  long  cannot  be  dereferenced  [FE]                                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  l.length  -  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  l.length  -  1);	  return    new    ZipLong(l    +    1,    l.length);    	non-compiled	[CE]  long  cannot  be  dereferenced	95	None	replace
606	[BUG]  [BUGGY]  return  unixTimeToZipLong(l);  unixTimeToZipLong(l);  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l);  unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    unixTimeToZipLong(l);    unixTimeToZipLong(l);	  	non-compiled	[CE]  unreachable  statement	83	None	add
607	[BUG]  [BUGGY]  return  unixTimeToZipLong(l);  long  l  =  unixTimeToZipLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]      StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l);  long  l  =  unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    unixTimeToZipLong(l);    long  l  =  unixTimeToZipLong(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	83	None	add
608	[BUG]  [BUGGY]  return  unixTimeToZipLong(l);  long  l  =  System.currentTimeMillis();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]        StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l);  long  l  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    unixTimeToZipLong(l);    long  l  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	83	None	add
609	[BUG]  [BUGGY]  return  unixTimeToZipLong(l);  long  l  =  getTime();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]          StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l);  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    unixTimeToZipLong(l);    long  l  =  getTime();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	83	None	add
610	[BUG]  [BUGGY]  return  unixTimeToZipLong(l);  long  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]            StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l);  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    unixTimeToZipLong(l);    long  l  =  getTime().longValue();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	83	None	add
611	[BUG]  [BUGGY]  return  unixTimeToZipLong(l);  long  l  =  getTime(l).longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]              StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l);  long  l  =  getTime(l).longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    unixTimeToZipLong(l);    long  l  =  getTime(l).longValue();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	83	None	add
612	[BUG]  [BUGGY]  return  unixTimeToZipLong(l);  long  l  =  getLocalMillis();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l);  long  l  =  getLocalMillis();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    unixTimeToZipLong(l);    long  l  =  getLocalMillis();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	83	None	add
613	[BUG]  [BUGGY]  return  unixTimeToZipLong(l);  long  l  =  getTime(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l);  long  l  =  getTime(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    unixTimeToZipLong(l);    long  l  =  getTime(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	83	None	add
614	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    return    new    ZipLong(l    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	107	1	replace
615	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    return    new    ZipLong(l    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	107	1	replace
616	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    return    new    ZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  missing  return  statement	107	None	replace
617	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)return  new  ZipLong(l  +  TWO_TO_32);  if(l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)return  new  ZipLong(l  +  TWO_TO_32);  if(l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)return  new  ZipLong(l  +  TWO_TO_32);  if(l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    return    new    ZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  missing  return  statement	107	None	replace
618	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    ZipLong(l    +    TWO_TO_32);    return    new    ZipLong(l    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	107	1	replace
619	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    ZipLong(l    +    TWO_TO_32);    return    new    ZipLong(l    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	107	1	replace
620	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    return    new    ZipLong(l    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	107	1	replace
621	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    return    new    ZipLong(l    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	107	1	replace
622	[BUG]  [BUGGY]  return  new  ZipLong(l,  ACCESS_TIME_BIT,  TWO_TO_32);  [CE]  no  suitable  constructor  found  for  ZipLong(long,byte,long)  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  ACCESS_TIME_BIT,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  ACCESS_TIME_BIT,  TWO_TO_32);	  return    new    ZipLong(l,    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,byte,long)	18	None	replace
623	[BUG]  [BUGGY]  return  new  ZipLong(l,  unixTime,  TWO_TO_32);  [CE]  cannot  find  symbol  unixTime  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  unixTime,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  unixTime,  TWO_TO_32);	  return    new    ZipLong(l,    TWO_TO_32);    	non-compiled	[CE]  cannot  find  symbol  unixTime	18	None	replace
624	[BUG]  [BUGGY]  return  new  ZipLong(l,  TWO_TO_32,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  TWO_TO_32,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  TWO_TO_32,  l);	  return    new    ZipLong(l,    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)	18	None	replace
625	[BUG]  [BUGGY]  return  new  ZipLong(unixTime,  l,  TWO_TO_32);  [CE]  cannot  find  symbol  unixTime  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTime,  l,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTime,  l,  TWO_TO_32);	  return    new    ZipLong(l,    TWO_TO_32);    	non-compiled	[CE]  cannot  find  symbol  unixTime	18	None	replace
626	[BUG]  [BUGGY]  return  unixTimeToZipLong(l,  l.longValue());  [CE]  long  cannot  be  dereferenced  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l,  l.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  unixTimeToZipLong(l,  l.longValue());	  return    unixTimeToZipLong(l.longValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	115	None	replace
627	[BUG]  [BUGGY]  return  unixTimeToZipLong(l.longValue(),  l);  [CE]  long  cannot  be  dereferenced  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l.longValue(),  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  unixTimeToZipLong(l.longValue(),  l);	  return    unixTimeToZipLong(l.longValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	115	None	replace
628	[BUG]  [BUGGY]  return  unixTimeToZipLong(l.longValue(),  TWO_TO_32);  [CE]  long  cannot  be  dereferenced  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l.longValue(),  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  unixTimeToZipLong(l.longValue(),  TWO_TO_32);	  return    unixTimeToZipLong(l.longValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	115	None	replace
629	[BUG]  [BUGGY]  return  unixTimeToZipLong(l,  TWO_TO_32.longValue());  [CE]  long  cannot  be  dereferenced  [FE]                                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l,  TWO_TO_32.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  unixTimeToZipLong(l,  TWO_TO_32.longValue());	  return    unixTimeToZipLong(l.longValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	115	None	replace
630	[BUG]  [BUGGY]  return  unixTimeToZipLong(two_to_32,  l.longValue());  [CE]  cannot  find  symbol  two_to_32  [FE]                                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(two_to_32,  l.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  unixTimeToZipLong(two_to_32,  l.longValue());	  return    unixTimeToZipLong(l.longValue());    	non-compiled	[CE]  cannot  find  symbol  two_to_32	115	None	replace
631	[BUG]  [BUGGY]  return  unixTimeToZipLong(two_TO_32,  l.longValue());  [CE]  cannot  find  symbol  two_TO_32  [FE]                                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(two_TO_32,  l.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  unixTimeToZipLong(two_TO_32,  l.longValue());	  return    unixTimeToZipLong(l.longValue());    	non-compiled	[CE]  cannot  find  symbol  two_TO_32	115	None	replace
632	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  getTime().longValue());  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  getTime().longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32,  getTime().longValue());	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    =    getTime().longValue();    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
633	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l);  long  l  =  getTime().longValue();  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l);  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32,  l);  long  l  =  getTime().longValue();	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    =    getTime().longValue();    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	111	None	replace
634	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l);  long  l  =  getTime();  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l);  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32,  l);  long  l  =  getTime();	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    getTime();    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	53	None	replace
635	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  l);  long  l  =  getTime();  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  l);  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  l);  long  l  =  getTime();	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    getTime();    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	53	None	replace
636	[BUG]  [BUGGY]  if(bit1_accessTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  non-static  variable  bit1_accessTimePresent  cannot  be  referenced  from  a  static  context  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit1_accessTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit1_accessTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  non-static  variable  bit1_accessTimePresent  cannot  be  referenced  from  a  static  context	148	None	replace
637	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  new  ZipLong(TWO_TO_32);  if(bit1_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  new  ZipLong(TWO_TO_32);  if(bit1_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  new  ZipLong(TWO_TO_32);  if(bit1_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  incompatible  types	148	None	replace
638	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l);  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  unixTimeToZipLong(l);	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  incompatible  types	148	None	replace
639	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  new  ZipLong(TWO_TO_32);  if(bit2_createTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  new  ZipLong(TWO_TO_32);  if(bit2_createTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  new  ZipLong(TWO_TO_32);  if(bit2_createTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  incompatible  types	148	None	replace
640	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  new  ZipLong(TWO_TO_32);  if(bit1_accessTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  new  ZipLong(TWO_TO_32);  if(bit1_accessTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  new  ZipLong(TWO_TO_32);  if(bit1_accessTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  incompatible  types	148	None	replace
641	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  new  ZipLong(TWO_TO_32);  if(bit1_createTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  new  ZipLong(TWO_TO_32);  if(bit1_createTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  new  ZipLong(TWO_TO_32);  if(bit1_createTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  incompatible  types	148	None	replace
642	[BUG]  [BUGGY]  while(l  >=  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  >=  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  >=  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	147	None	replace
643	[BUG]  [BUGGY]  while(l  >=  TWO_TO_32)  {  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  >=  TWO_TO_32)  {  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  >=  TWO_TO_32)  {  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	147	None	replace
644	[BUG]  [BUGGY]  while(l  >=  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  >=  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  >=  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	147	None	replace
645	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  accessTime);  [CE]  non-static  variable  accessTime  cannot  be  referenced  from  a  static  context  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  accessTime);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  accessTime);	  return    new    ZipLong(l    +    1,    unixTime);    	non-compiled	[CE]  non-static  variable  accessTime  cannot  be  referenced  from  a  static  context	106	None	replace
646	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  this.accessTime);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  this.accessTime);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  this.accessTime);	  return    new    ZipLong(l    +    1,    unixTime);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	106	None	replace
647	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  tw_to_32);  [CE]  cannot  find  symbol  tw_to_32  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  tw_to_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  tw_to_32);	  return    new    ZipLong(l    +    1,    unixTime);    	non-compiled	[CE]  cannot  find  symbol  tw_to_32	106	None	replace
648	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  ACCESS_TIME_BIT,  TWO_TO_32);  [CE]  no  suitable  constructor  found  for  ZipLong(long,byte,long)  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  ACCESS_TIME_BIT,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  ACCESS_TIME_BIT,  TWO_TO_32);	  return    new    ZipLong(l    +    1,    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,byte,long)	94	None	replace
649	[BUG]  [BUGGY]  return  new  ZipLong(l,  l  +  1,  TWO_TO_32);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  l  +  1,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  l  +  1,  TWO_TO_32);	  return    new    ZipLong(l    +    1,    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)	94	None	replace
650	[BUG]  [BUGGY]  return  new  ZipLong(two_to_32  +  1,  l);  [CE]  cannot  find  symbol  two_to_32  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_to_32  +  1,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_to_32  +  1,  l);	  return    new    ZipLong(l    +    1,    TWO_TO_32);    	non-compiled	[CE]  cannot  find  symbol  two_to_32	94	None	replace
651	[BUG]  [BUGGY]  long  l  =  unixTime.longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  unixTime.longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  unixTime.longValue();	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTime.longValue();    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	52	None	replace
652	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l);  long  l  =  unixTime.longValue();  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l);  long  l  =  unixTime.longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32,  l);  long  l  =  unixTime.longValue();	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTime.longValue();    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	52	None	replace
653	[BUG]  [BUGGY]  Long  l  =  unixTime.longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  Long  l  =  unixTime.longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	Long  l  =  unixTime.longValue();	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTime.longValue();    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	52	None	replace
654	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  0);  long  l  =  unixTime.longValue();  [CE]  no  suitable  constructor  found  for  ZipLong(long,int)  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  0);  long  l  =  unixTime.longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32,  0);  long  l  =  unixTime.longValue();	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTime.longValue();    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,int)	52	None	replace
655	[BUG]  [BUGGY]  final  long  l  =  unixTime.longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  final  long  l  =  unixTime.longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	final  long  l  =  unixTime.longValue();	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTime.longValue();    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	52	None	replace
656	[BUG]  [BUGGY]  return  new  ZipLong(toZipLong);  [CE]  cannot  find  symbol  toZipLong  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(toZipLong);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(toZipLong);	  return    new    ZipLong(two_toZipLong);    	non-compiled	[CE]  cannot  find  symbol  toZipLong	110	None	replace
657	[BUG]  [BUGGY]  return  unixTimeToZipLong(tWO_TO_32);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]    StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  unixTimeToZipLong(tWO_TO_32);	  return    unixTimeToZipLong(l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	84	None	replace
658	[BUG]  [BUGGY]  return  unixTimeToZipLong(l,  0);  [CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l,  0);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  unixTimeToZipLong(l,  0);	  return    unixTimeToZipLong(l);    	non-compiled	[CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;	84	None	replace
659	[BUG]  [BUGGY]  return  unixTimeToZipLong(l,  X5455_ExtendedTimestamp);  [CE]  cannot  find  symbol  X5455_ExtendedTimestamp  [FE]        StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l,  X5455_ExtendedTimestamp);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  unixTimeToZipLong(l,  X5455_ExtendedTimestamp);	  return    unixTimeToZipLong(l);    	non-compiled	[CE]  cannot  find  symbol  X5455_ExtendedTimestamp	84	None	replace
660	[BUG]  [BUGGY]  return  unixTimeToZipLong(l,  TWO_TO_32);  [CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;  [FE]          StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  unixTimeToZipLong(l,  TWO_TO_32);	  return    unixTimeToZipLong(l);    	non-compiled	[CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;	84	None	replace
661	[BUG]  [BUGGY]  return  unixTimeToZipLong(l,  l);  [CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;  [FE]            StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  unixTimeToZipLong(l,  l);	  return    unixTimeToZipLong(l);    	non-compiled	[CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;	84	None	replace
662	[BUG]  [BUGGY]  return  createTimeToZipLong(l);  [CE]  cannot  find  symbol  [FE]              StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  createTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  createTimeToZipLong(l);	  return    unixTimeToZipLong(l);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
663	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1);  long  l  =  Long.parseLong(l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1);  long  l  =  Long.parseLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  1);  long  l  =  Long.parseLong(l);	  return    new    ZipLong(l    +    1);    long    l    =    Long.parseLong(l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	71	None	replace
664	[BUG]  [BUGGY]  long  l  =  Long.parseLong(l  +  1);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  Long.parseLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  Long.parseLong(l  +  1);	  return    new    ZipLong(l    +    1);    long    l    =    Long.parseLong(l);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	71	None	replace
665	[BUG]  [BUGGY]  null  l  =  Long.parseLong(l);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  null  l  =  Long.parseLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	null  l  =  Long.parseLong(l);	  return    new    ZipLong(l    +    1);    long    l    =    Long.parseLong(l);    	non-compiled	[CE]  not  a  statement	71	None	replace
666	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.UTF8),  l);  [CE]  cannot  find  symbol  UTF8  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.UTF8),  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.UTF8),  l);	  return    new    ZipLong(unixTimeToZipLong(l,    X5455_ExtendedTimestamp.UTF8));    	non-compiled	[CE]  cannot  find  symbol  UTF8	121	None	replace
667	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.TWO_TO_32));  [CE]  cannot  find  symbol  TWO_TO_32  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.TWO_TO_32));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.TWO_TO_32));	  return    new    ZipLong(unixTimeToZipLong(l,    X5455_ExtendedTimestamp.UTF8));    	non-compiled	[CE]  cannot  find  symbol  TWO_TO_32	121	None	replace
668	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.US));  [CE]  cannot  find  symbol  US  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.US));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.US));	  return    new    ZipLong(unixTimeToZipLong(l,    X5455_ExtendedTimestamp.UTF8));    	non-compiled	[CE]  cannot  find  symbol  US	121	None	replace
669	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.LEFT));  [CE]  cannot  find  symbol  LEFT  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.LEFT));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.LEFT));	  return    new    ZipLong(unixTimeToZipLong(l,    X5455_ExtendedTimestamp.UTF8));    	non-compiled	[CE]  cannot  find  symbol  LEFT	121	None	replace
670	[BUG]  [BUGGY]  return  new  ZipLong(toZipLong(l)+  TWO_TO_32);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(toZipLong(l)+  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(toZipLong(l)+  TWO_TO_32);	  return    new    ZipLong(toZipLong(l));    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
671	[BUG]  [BUGGY]  return  new  ZipLong(toZipLong(l),  X5455_ExtendedTimestamp);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(toZipLong(l),  X5455_ExtendedTimestamp);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(toZipLong(l),  X5455_ExtendedTimestamp);	  return    new    ZipLong(toZipLong(l));    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
672	[BUG]  [BUGGY]  return  new  ZipLong(toZipLong(l),  TWO_TO_32);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(toZipLong(l),  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(toZipLong(l),  TWO_TO_32);	  return    new    ZipLong(toZipLong(l));    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
673	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  new  ZipLong(TWO_TO_32  +  1);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  new  ZipLong(TWO_TO_32  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32    +    1);    new  ZipLong(TWO_TO_32  +  1);	  	non-compiled	[CE]  unreachable  statement	39	None	add
674	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  ((  ZipLong)l).longValue();  return  new  ZipLong(TWO_TO_32  +  1);  [CE]  inconvertible  types  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  ((  ZipLong)l).longValue();  return  new  ZipLong(TWO_TO_32  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32    +    1);    ((  ZipLong)l).longValue();  return  new  ZipLong(TWO_TO_32  +  1);	  	non-compiled	[CE]  inconvertible  types	39	None	add
675	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  long  l  =  getTime().longValue();  return  new  ZipLong(TWO_TO_32  +  1);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  long  l  =  getTime().longValue();  return  new  ZipLong(TWO_TO_32  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32    +    1);    long  l  =  getTime().longValue();  return  new  ZipLong(TWO_TO_32  +  1);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	39	None	add
676	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  long  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32    +    1);    long  l  =  getTime().longValue();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	39	None	add
677	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  long  l  =  Long.parseLong(tWO_TO_32);  return  new  ZipLong(TWO_TO_32  +  1);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]            AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  long  l  =  Long.parseLong(tWO_TO_32);  return  new  ZipLong(TWO_TO_32  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32    +    1);    long  l  =  Long.parseLong(tWO_TO_32);  return  new  ZipLong(TWO_TO_32  +  1);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	39	None	add
678	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  long  l  =  Long.parseLong(tWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]              AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  long  l  =  Long.parseLong(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32    +    1);    long  l  =  Long.parseLong(tWO_TO_32);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	39	None	add
679	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  long  l  =  getTime();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32    +    1);    long  l  =  getTime();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	39	None	add
680	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  ((  ZipLong)l).longValue();  [CE]  inconvertible  types  [FE]                  AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  ((  ZipLong)l).longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32    +    1);    ((  ZipLong)l).longValue();	  	non-compiled	[CE]  inconvertible  types	39	None	add
681	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  3);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  3);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  3);	  return    new    ZipLong(l    +    3);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	38	None	replace
682	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  3);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  /  3);	  return    new    ZipLong(l    +    3);    	compilable	  [FE]  AssertionError  	38	2	replace
683	[BUG]  [BUGGY]  return  new  ZipLong(l  /  3);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  3);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  /  3);	  return    new    ZipLong(l    +    3);    	compilable	  [FE]  AssertionError  	38	2	replace
684	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT,  TWO_TO_32);  [CE]  cannot  find  symbol  DEFAULT_TIME_BIT  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT,  TWO_TO_32);	  return    new    ZipLong(unixTimeToZipLong(l),    X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_TIME_BIT	120	None	replace
685	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.HEADER_ID);  [CE]  no  suitable  constructor  found  for  ZipLong(ZipLong,ZipShort)  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.HEADER_ID);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.HEADER_ID);	  return    new    ZipLong(unixTimeToZipLong(l),    X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(ZipLong,ZipShort)	120	None	replace
686	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT,  ACCESS_TIME_BIT);  [CE]  cannot  find  symbol  DEFAULT_TIME_BIT  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT,  ACCESS_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT,  ACCESS_TIME_BIT);	  return    new    ZipLong(unixTimeToZipLong(l),    X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_TIME_BIT	120	None	replace
687	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.DECEMBER_TIME_BIT);  [CE]  cannot  find  symbol  DECEMBER_TIME_BIT  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.DECEMBER_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.DECEMBER_TIME_BIT);	  return    new    ZipLong(unixTimeToZipLong(l),    X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);    	non-compiled	[CE]  cannot  find  symbol  DECEMBER_TIME_BIT	120	None	replace
688	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.CENTER_TIME_BIT);  [CE]  cannot  find  symbol  CENTER_TIME_BIT  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.CENTER_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.CENTER_TIME_BIT);	  return    new    ZipLong(unixTimeToZipLong(l),    X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);    	non-compiled	[CE]  cannot  find  symbol  CENTER_TIME_BIT	120	None	replace
689	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.VALUE_TIME_BIT);  [CE]  cannot  find  symbol  VALUE_TIME_BIT  [FE]                                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.VALUE_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.VALUE_TIME_BIT);	  return    new    ZipLong(unixTimeToZipLong(l),    X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);    	non-compiled	[CE]  cannot  find  symbol  VALUE_TIME_BIT	120	None	replace
690	[BUG]  [BUGGY]  return  new  ZipLong(l  -  1);  new  ZipLong(l  -  1);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  1);  new  ZipLong(l  -  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    1);    new  ZipLong(l  -  1);	  	non-compiled	[CE]  unreachable  statement	74	None	add
691	[BUG]  [BUGGY]  return  new  ZipLong(l  -  1);  long  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  1);  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    1);    long  l  =  getTime().longValue();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	74	None	add
692	[BUG]  [BUGGY]  return  new  ZipLong(l  -  1);  long  l  =  getTime();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  1);  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    1);    long  l  =  getTime();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	74	None	add
693	[BUG]  [BUGGY]  return  new  ZipLong(l  -  1);  long  l  =  getLongValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  1);  long  l  =  getLongValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    1);    long  l  =  getLongValue();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	74	None	add
694	[BUG]  [BUGGY]  return  new  ZipLong(l  -  1);  long  l  =  getLocalMillis();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]            AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  1);  long  l  =  getLocalMillis();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    1);    long  l  =  getLocalMillis();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	74	None	add
695	[BUG]  [BUGGY]  return  new  ZipLong(l  -  1);  l  -  1;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  1);  l  -  1;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    1);    l  -  1;	  	non-compiled	[CE]  not  a  statement	74	None	add
696	[BUG]  [BUGGY]  return  new  ZipLong(l  -  1);  long  l  -  1;  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  1);  long  l  -  1;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    1);    long  l  -  1;	  	non-compiled	[CE]  ';'  expected	74	None	add
697	[BUG]  [BUGGY]  return  new  ZipLong(l  -  1);  long  l  =  createTime(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  1);  long  l  =  createTime(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    1);    long  l  =  createTime(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	74	None	add
698	[BUG]  [BUGGY]  long  l  =  unixTimeToZipLong(l  +  TWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  unixTimeToZipLong(l  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  unixTimeToZipLong(l  +  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTimeToZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	109	None	replace
699	[BUG]  [BUGGY]  Long  l  =  unixTimeToZipLong(l  +  TWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  Long  l  =  unixTimeToZipLong(l  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	Long  l  =  unixTimeToZipLong(l  +  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTimeToZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	109	None	replace
700	[BUG]  [BUGGY]  long  l  =  unixTimeToZipLong(l  +  2);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  unixTimeToZipLong(l  +  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  unixTimeToZipLong(l  +  2);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTimeToZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	109	None	replace
701	[BUG]  [BUGGY]  long  l  =  unixTimeToZipLong(l  +  100.0);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  unixTimeToZipLong(l  +  100.0);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  unixTimeToZipLong(l  +  100.0);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTimeToZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	109	None	replace
702	[BUG]  [BUGGY]  long  l  =  unixTimeToZipLong(l  +  18);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  unixTimeToZipLong(l  +  18);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  unixTimeToZipLong(l  +  18);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTimeToZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	109	None	replace
703	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  Long  l  -  TWO_TO_32;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  Long  l  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  TWO_TO_32);  Long  l  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    Long    l    -    TWO_TO_32);    	non-compiled	[CE]  ';'  expected	61	None	replace
704	[BUG]  [BUGGY]  return  new  ZipLong(l.longValue(),  TWO_TO_32);  [CE]  long  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l.longValue(),  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l.longValue(),  TWO_TO_32);	  return    new    ZipLong(l.longValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	21	None	replace
705	[BUG]  [BUGGY]  return  new  ZipLong(l,  unixTime.longValue());  [CE]  cannot  find  symbol  unixTime  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  unixTime.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  unixTime.longValue());	  return    new    ZipLong(l.longValue());    	non-compiled	[CE]  cannot  find  symbol  unixTime	21	None	replace
706	[BUG]  [BUGGY]  return  new  ZipLong(two_to_32,  l.longValue());  [CE]  cannot  find  symbol  two_to_32  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_to_32,  l.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_to_32,  l.longValue());	  return    new    ZipLong(l.longValue());    	non-compiled	[CE]  cannot  find  symbol  two_to_32	21	None	replace
707	[BUG]  [BUGGY]  return  new  ZipLong(l.longValue(),  l);  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l.longValue(),  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l.longValue(),  l);	  return    new    ZipLong(l.longValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	21	None	replace
708	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  unixTime,  l);  [CE]  cannot  find  symbol  unixTime  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  unixTime,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32,  unixTime,  l);	  return    new    ZipLong(l    +    TWO_TO_32,    l);    	non-compiled	[CE]  cannot  find  symbol  unixTime	27	None	replace
709	[BUG]  [BUGGY]  return  new  ZipLong(l  +  6,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  6,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  6,  l);	  return    new    ZipLong(l    +    TWO_TO_32,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	27	None	replace
710	[BUG]  [BUGGY]  return  new  ZipLong(l  +  18,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  18,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  18,  l);	  return    new    ZipLong(l    +    TWO_TO_32,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	27	None	replace
711	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l,  unixTime);  [CE]  cannot  find  symbol  unixTime  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l,  unixTime);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32,  l,  unixTime);	  return    new    ZipLong(l    +    TWO_TO_32,    l);    	non-compiled	[CE]  cannot  find  symbol  unixTime	27	None	replace
712	[BUG]  [BUGGY]  return  new  ZipLong(l  +  8,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  8,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  8,  l);	  return    new    ZipLong(l    +    TWO_TO_32,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	27	None	replace
713	[BUG]  [BUGGY]  result  =  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  cannot  find  symbol  result  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  result  =  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	result  =  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol  result	15	None	replace
714	[BUG]  [BUGGY]  result  =  new  ZipLong(TWO_TO_32);  l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  result  =  new  ZipLong(TWO_TO_32);  l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	result  =  new  ZipLong(TWO_TO_32);  l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  >  expected	15	None	replace
715	[BUG]  [BUGGY]  while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer:  [CE]  unclosed  string  literal  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer:  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer:	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  unclosed  string  literal	15	None	replace
716	[BUG]  [BUGGY]  while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  [CE]  unclosed  string  literal  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32  &&  l  >  TWO_TO_32)  {  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  unclosed  string  literal	15	None	replace
717	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l,  TWO_TO_32);  [CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(l,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l,  TWO_TO_32);	  return(ZipLong)unixTimeToZipLong(l);    	non-compiled	[CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;	113	None	replace
718	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l,  X5455_ExtendedTimestamp);  [CE]  cannot  find  symbol  X5455_ExtendedTimestamp  [FE]      StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(l,  X5455_ExtendedTimestamp);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l,  X5455_ExtendedTimestamp);	  return(ZipLong)unixTimeToZipLong(l);    	non-compiled	[CE]  cannot  find  symbol  X5455_ExtendedTimestamp	113	None	replace
719	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(tWO_TO_32);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]        StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(tWO_TO_32);	  return(ZipLong)unixTimeToZipLong(l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	113	None	replace
720	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l,  0);  [CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;  [FE]          StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(l,  0);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l,  0);	  return(ZipLong)unixTimeToZipLong(l);    	non-compiled	[CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;	113	None	replace
721	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);  [CE]  cannot  find  symbol  DEFAULT_TIME_BIT  [FE]            StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);	  return(ZipLong)unixTimeToZipLong(l);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_TIME_BIT	113	None	replace
722	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l.longValue());  [CE]  long  cannot  be  dereferenced  [FE]              StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(l.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l.longValue());	  return(ZipLong)unixTimeToZipLong(l);    	non-compiled	[CE]  long  cannot  be  dereferenced	113	None	replace
723	[BUG]  [BUGGY]  return  new  ZipLong(tWEEK_TO_32,  l);  [CE]  cannot  find  symbol  tWEEK_TO_32  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWEEK_TO_32,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWEEK_TO_32,  l);	  return    new    ZipLong(tWEEK_TO_32);    	non-compiled	[CE]  cannot  find  symbol  tWEEK_TO_32	104	None	replace
724	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -  TWO_TO_32;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -  TWO_TO_32;  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -  TWO_TO_32;  }	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    -    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	56	None	replace
725	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  -  TWO_TO_32;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  TWO_TO_32);  long  l  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    -    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	56	None	replace
726	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -  TWO_TO_32;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -  TWO_TO_32;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -  TWO_TO_32;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    -    TWO_TO_32;    	non-compiled	[CE]  	56	None	replace
727	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -  TWO_TO_32;  }  else  {  unixTimeToZipLong(l);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -  TWO_TO_32;  }  else  {  unixTimeToZipLong(l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -  TWO_TO_32;  }  else  {  unixTimeToZipLong(l);  }	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    -    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	56	None	replace
728	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  -  TWO_TO_32;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32);  long  l  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    -    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	56	None	replace
729	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(tWO_TO_32);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(tWO_TO_32);	  return    new    ZipLong(unixTimeToZipLong(l);    	non-compiled	[CE]  ')'  expected	125	None	replace
730	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  this);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  this);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  this);	  return    new    ZipLong(unixTimeToZipLong(l);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	125	None	replace
731	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l)+  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l)+  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l)+  1);	  return    new    ZipLong(unixTimeToZipLong(l);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	125	None	replace
732	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32);  long  l  =  Long.parseLong(l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32);  long  l  =  Long.parseLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32);  long  l  =  Long.parseLong(l);	  return    new    ZipLong(l    +    1);    long    l    =    Long.parseLong(l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	71	None	replace
733	[BUG]  [BUGGY]  l  =  Long.parseLong(l);  [CE]  no  suitable  method  found  for  parseLong(long)  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  l  =  Long.parseLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	l  =  Long.parseLong(l);	  return    new    ZipLong(l    +    1);    long    l    =    Long.parseLong(l);    	non-compiled	[CE]  no  suitable  method  found  for  parseLong(long)	71	None	replace
734	[BUG]  [BUGGY]  if(l  <  =  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  =  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  =  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
735	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1);  new  ZipLong(l  +  1);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1);  new  ZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  1);  new  ZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    new    ZipLong(l    +    1);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	66	None	replace
736	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32);  new  ZipLong(l  +  2);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32);  new  ZipLong(l  +  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32);  new  ZipLong(l  +  2);	  return    new    ZipLong(l    +    1);    new    ZipLong(l    +    1);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	66	None	replace
737	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  unixTime.intValue());  [CE]  cannot  find  symbol  unixTime  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  unixTime.intValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  unixTime.intValue());	  return    new    ZipLong(l    +    1,    l.intValue());    	non-compiled	[CE]  cannot  find  symbol  unixTime	152	None	replace
738	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  this.timeToZipLong.intValue());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  this.timeToZipLong.intValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  this.timeToZipLong.intValue());	  return    new    ZipLong(l    +    1,    l.intValue());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	152	None	replace
739	[BUG]  [BUGGY]  while(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  missing  return  statement  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  missing  return  statement	17	None	replace
740	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: ",  +  l);  }  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,long)  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: ",  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: ",  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,long)	17	None	replace
741	[BUG]  [BUGGY]  while(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
742	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.SHORT_TIME_BIT));  [CE]  cannot  find  symbol  SHORT_TIME_BIT  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.SHORT_TIME_BIT));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.SHORT_TIME_BIT));	  return    new    ZipLong(unixTimeToZipLong(l,    X5455_ExtendedTimestamp.DEFAULT_TIME_BIT));    	non-compiled	[CE]  cannot  find  symbol  SHORT_TIME_BIT	119	None	replace
743	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.INTEGER_TIME_BIT));  [CE]  cannot  find  symbol  INTEGER_TIME_BIT  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.INTEGER_TIME_BIT));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.INTEGER_TIME_BIT));	  return    new    ZipLong(unixTimeToZipLong(l,    X5455_ExtendedTimestamp.DEFAULT_TIME_BIT));    	non-compiled	[CE]  cannot  find  symbol  INTEGER_TIME_BIT	119	None	replace
744	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.MINUTE_TIME_BIT));  [CE]  cannot  find  symbol  MINUTE_TIME_BIT  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.MINUTE_TIME_BIT));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.MINUTE_TIME_BIT));	  return    new    ZipLong(unixTimeToZipLong(l,    X5455_ExtendedTimestamp.DEFAULT_TIME_BIT));    	non-compiled	[CE]  cannot  find  symbol  MINUTE_TIME_BIT	119	None	replace
745	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.VALUE_TIME_BIT));  [CE]  cannot  find  symbol  VALUE_TIME_BIT  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.VALUE_TIME_BIT));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.VALUE_TIME_BIT));	  return    new    ZipLong(unixTimeToZipLong(l,    X5455_ExtendedTimestamp.DEFAULT_TIME_BIT));    	non-compiled	[CE]  cannot  find  symbol  VALUE_TIME_BIT	119	None	replace
746	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: ",  +  l);  }  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,long)  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: ",  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: ",  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,long)	15	None	replace
747	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  not  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  not  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  not  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  missing  return  statement	15	None	replace
748	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: ".  +  l);  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: ".  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: ".  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
749	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: ",  +  l);  }  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,long)  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: ",  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: ",  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,long)	13	None	replace
750	[BUG]  [BUGGY]  while(l  <  TWO_TO_32)  {  l  =  l.longValue();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32)  {  l  =  l.longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32)  {  l  =  l.longValue();	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
751	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  -  TWO_TO_32);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  -  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  TWO_TO_32);  long  -  TWO_TO_32);	  return    new    ZipLong(l    -    TWO_TO_32);    long    -    TWO_TO_32);    	non-compiled	[CE]  not  a  statement	130	None	replace
752	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l  -  TWO_TO_32);  long  -  TWO_TO_32);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l  -  TWO_TO_32);  long  -  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32,  l  -  TWO_TO_32);  long  -  TWO_TO_32);	  return    new    ZipLong(l    -    TWO_TO_32);    long    -    TWO_TO_32);    	non-compiled	[CE]  not  a  statement	130	None	replace
753	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  cannot  find  symbol  tWO_TO_32  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	147	None	replace
754	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  cannot  find  symbol  tWO_TO_32  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	147	None	replace
755	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  cannot  find  symbol  tWO_TO_32  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	147	None	replace
756	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l);  long  l  =  getTime().longValue();  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l);  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32,  l);  long  l  =  getTime().longValue();	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    getTime().longValue();    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	49	None	replace
757	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  getTime().longValue());  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  getTime().longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32,  getTime().longValue());	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    getTime().longValue();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
758	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32  -  1);  long  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32  -  1);  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32  -  1);  long  l  =  getTime().longValue();	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    getTime().longValue();    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	49	None	replace
759	[BUG]  [BUGGY]  safeThan  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  safeThan  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	safeThan  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    =    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
760	[BUG]  [BUGGY]  safeAdd(l,  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  safeAdd(l,  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	safeAdd(l,  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    =    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	141	None	replace
761	[BUG]  [BUGGY]  safeMultiply(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  safeMultiply(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	safeMultiply(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    =    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	141	None	replace
762	[BUG]  [BUGGY]  safeThan  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  safeThan  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	safeThan  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);	  if(l    <    =    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
763	[BUG]  [BUGGY]  while(l  <  TWO_TO_32)  {  l  =  l  +  TWO_TO_32;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32)  {  l  =  l  +  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32)  {  l  =  l  +  TWO_TO_32;	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  ';'  expected	157	None	replace
764	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32;  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32;  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  ')'  expected	157	None	replace
765	[BUG]  [BUGGY]  return  unixTimeToZipLong(l,  createTime.longValue());  [CE]  non-static  variable  createTime  cannot  be  referenced  from  a  static  context  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l,  createTime.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  unixTimeToZipLong(l,  createTime.longValue());	  return    unixTimeToZipLong(l.longValue());    	non-compiled	[CE]  non-static  variable  createTime  cannot  be  referenced  from  a  static  context	115	None	replace
766	[BUG]  [BUGGY]  return  unixTimeToZipLong(l,  X5455_ExtendedTimestamp.class);  [CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l,  X5455_ExtendedTimestamp.class);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  unixTimeToZipLong(l,  X5455_ExtendedTimestamp.class);	  return    unixTimeToZipLong(l.longValue());    	non-compiled	[CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;	115	None	replace
767	[BUG]  [BUGGY]  return  unixTimeToZipLong(l,  x.longValue());  [CE]  cannot  find  symbol  x  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l,  x.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  unixTimeToZipLong(l,  x.longValue());	  return    unixTimeToZipLong(l.longValue());    	non-compiled	[CE]  cannot  find  symbol  x	115	None	replace
768	[BUG]  [BUGGY]  return  unixTimeToZipLong(l,  t.longValue());  [CE]  cannot  find  symbol  t  [FE]                                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l,  t.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  unixTimeToZipLong(l,  t.longValue());	  return    unixTimeToZipLong(l.longValue());    	non-compiled	[CE]  cannot  find  symbol  t	115	None	replace
769	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  cannot  find  symbol  tWO_TO_32  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	156	None	replace
770	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  TWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	156	None	replace
771	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit1_accessTimePresent  cannot  be  referenced  from  a  static  context  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  non-static  variable  bit1_accessTimePresent  cannot  be  referenced  from  a  static  context	156	None	replace
772	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  cannot  find  symbol  bit1_modifyTimePresent  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol  bit1_modifyTimePresent	156	None	replace
773	[BUG]  [BUGGY]  return  new  ZipLong(l  +  18);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  18);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  18);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	156	None	replace
774	[BUG]  [BUGGY]  return  new  ZipLong(l  +  4,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  4,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  4,  l);	  return    new    ZipLong(l    +    TWO_TO_32,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	27	None	replace
775	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l);  long  l  =  Long.parseLong(l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l);  long  l  =  Long.parseLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32,  l);  long  l  =  Long.parseLong(l);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    Long.parseLong(l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	50	None	replace
776	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  0);  long  l  =  Long.parseLong(l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,int)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  0);  long  l  =  Long.parseLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32,  0);  long  l  =  Long.parseLong(l);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    Long.parseLong(l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,int)	50	None	replace
777	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  long  l  =  getTime();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32    +    1);    long  l  =  getTime();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	77	None	add
778	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  long  l  =  unixTimeToZipLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  long  l  =  unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32    +    1);    long  l  =  unixTimeToZipLong(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	77	None	add
779	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(TWO_TO_32  +  1,  l);	  return    new    ZipLong(tWO_TO_32    +    1,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	90	None	replace
780	[BUG]  [BUGGY]  return  new  ZipLong(l,  X5455_Timestamp.DEFAULT_TIME_BIT);  [CE]  cannot  find  symbol  X5455_Timestamp  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  X5455_Timestamp.DEFAULT_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  X5455_Timestamp.DEFAULT_TIME_BIT);	  return    new    ZipLong(l,    l);    	non-compiled	[CE]  cannot  find  symbol  X5455_Timestamp	3	None	replace
781	[BUG]  [BUGGY]  return  new  ZipLong(l,  X5455_Timestamp.UTF8);  [CE]  cannot  find  symbol  X5455_Timestamp  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  X5455_Timestamp.UTF8);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  X5455_Timestamp.UTF8);	  return    new    ZipLong(l,    l);    	non-compiled	[CE]  cannot  find  symbol  X5455_Timestamp	3	None	replace
782	[BUG]  [BUGGY]  return  new  ZipLong(l,  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);  [CE]  cannot  find  symbol  DEFAULT_TIME_BIT  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);	  return    new    ZipLong(l,    l);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_TIME_BIT	3	None	replace
783	[BUG]  [BUGGY]  return  new  ZipLong(l,  X5455_ExtendedTimestamp.UTF8);  [CE]  cannot  find  symbol  UTF8  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  X5455_ExtendedTimestamp.UTF8);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  X5455_ExtendedTimestamp.UTF8);	  return    new    ZipLong(l,    l);    	non-compiled	[CE]  cannot  find  symbol  UTF8	3	None	replace
784	[BUG]  [BUGGY]  return  new  ZipLong(l  +  18);  long  l  =  getTime();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  18);  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    18);    long  l  =  getTime();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	34	None	add
785	[BUG]  [BUGGY]  return  new  ZipLong(l  +  18);  LIVE_TIME_BIT  =  ZipLong.getInstance(l  +  18);  [CE]  cannot  find  symbol  LIVE_TIME_BIT  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  18);  LIVE_TIME_BIT  =  ZipLong.getInstance(l  +  18);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    18);    LIVE_TIME_BIT  =  ZipLong.getInstance(l  +  18);	  	non-compiled	[CE]  cannot  find  symbol  LIVE_TIME_BIT	34	None	add
786	[BUG]  [BUGGY]  safeThan  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  safeThan  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	safeThan  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    =    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
787	[BUG]  [BUGGY]  lendemain(l  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  lendemain(l  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	lendemain(l  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    =    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
788	[BUG]  [BUGGY]  safeAdd(l,  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  safeAdd(l,  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	safeAdd(l,  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    =    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	140	None	replace
789	[BUG]  [BUGGY]  safeThan  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  safeThan  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	safeThan  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    =    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
790	[BUG]  [BUGGY]  return  new  ZipLong(bit1_accessTimePresent);  [CE]  non-static  variable  bit1_accessTimePresent  cannot  be  referenced  from  a  static  context  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(bit1_accessTimePresent);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(bit1_accessTimePresent);	  return    new    ZipLong(bit0_modifyTimePresent);    	non-compiled	[CE]  non-static  variable  bit1_accessTimePresent  cannot  be  referenced  from  a  static  context	97	None	replace
791	[BUG]  [BUGGY]  return  new  ZipLong(l  +  3);  ((  ZipLong)l).unixTimeToZipLong(l  +  3);  [CE]  inconvertible  types  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  3);  ((  ZipLong)l).unixTimeToZipLong(l  +  3);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    3);    ((  ZipLong)l).unixTimeToZipLong(l  +  3);	  	non-compiled	[CE]  inconvertible  types	37	None	add
792	[BUG]  [BUGGY]  return  new  ZipLong(l  +  3);  ((  ZipLong)l).unixTimeToZipLong(l);  [CE]  inconvertible  types  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  3);  ((  ZipLong)l).unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    3);    ((  ZipLong)l).unixTimeToZipLong(l);	  	non-compiled	[CE]  inconvertible  types	37	None	add
793	[BUG]  [BUGGY]  return  new  ZipLong(l  +  3);  long  l  =  Long.parseLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  3);  long  l  =  Long.parseLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    3);    long  l  =  Long.parseLong(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	37	None	add
794	[BUG]  [BUGGY]  return  new  ZipLong(l  +  3);  long  l  =  Long.parseLong(tWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  3);  long  l  =  Long.parseLong(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    3);    long  l  =  Long.parseLong(tWO_TO_32);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	37	None	add
795	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  X5455_ExtendedTimestamp,  l);  [CE]  cannot  find  symbol  X5455_ExtendedTimestamp  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  X5455_ExtendedTimestamp,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  X5455_ExtendedTimestamp,  l);	  return    new    ZipLong(l    +    1,    unixTime,    l);    	non-compiled	[CE]  cannot  find  symbol  X5455_ExtendedTimestamp	91	None	replace
796	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: ",  +  l);  }  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,long)  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: ",  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: ",  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,long)	11	None	replace
797	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32);  ((  ZipLong)l).longValue();  [CE]  cannot  find  symbol  tWO_TO_32  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32);  ((  ZipLong)l).longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32);  ((  ZipLong)l).longValue();	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	136	None	replace
798	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  l).longValue();  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  l).longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  l).longValue();	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	136	None	replace
799	[BUG]  [BUGGY]  return  new  ZipLong(l  +  2);  long  l  =  createTime(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  2);  long  l  =  createTime(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    2);    long  l  =  createTime(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	32	None	add
800	[BUG]  [BUGGY]  return  new  ZipLong(l  +  2);  long  l  =  getTime().getLongValue(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  2);  long  l  =  getTime().getLongValue(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    2);    long  l  =  getTime().getLongValue(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	32	None	add
801	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT,  TWO_TO_32));  [CE]  cannot  find  symbol  DEFAULT_TIME_BIT  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT,  TWO_TO_32));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT,  TWO_TO_32));	  return    new    ZipLong(unixTimeToZipLong(l,    TWO_TO_32));    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_TIME_BIT	20	None	replace
802	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.NUMBER_INT,  TWO_TO_32));  [CE]  cannot  find  symbol  NUMBER_INT  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.NUMBER_INT,  TWO_TO_32));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.NUMBER_INT,  TWO_TO_32));	  return    new    ZipLong(unixTimeToZipLong(l,    TWO_TO_32));    	non-compiled	[CE]  cannot  find  symbol  NUMBER_INT	20	None	replace
803	[BUG]  [BUGGY]  return  new  ZipLong(l,  tWO_TO_32.longValue());  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  tWO_TO_32.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  tWO_TO_32.longValue());	  return    new    ZipLong(tWO_TO_32.longValue());    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	25	None	replace
804	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  ((  ZipLong)l).unixTimeToZipLong(tWO_TO_32  +  1);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  ((  ZipLong)l).unixTimeToZipLong(tWO_TO_32  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32    +    1);    ((  ZipLong)l).unixTimeToZipLong(tWO_TO_32  +  1);	  	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	39	None	add
805	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  ((  ZipLong)l).unixTimeToZipLong(TWO_TO_32  +  1);  [CE]  inconvertible  types  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  ((  ZipLong)l).unixTimeToZipLong(TWO_TO_32  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32    +    1);    ((  ZipLong)l).unixTimeToZipLong(TWO_TO_32  +  1);	  	non-compiled	[CE]  inconvertible  types	39	None	add
806	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  long  l  =  System.currentTimeMillis();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  long  l  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32    +    1);    long  l  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	39	None	add
807	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  ((  ZipLong)l).unixTimeToZipLong(tWO_TO_32);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  ((  ZipLong)l).unixTimeToZipLong(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32    +    1);    ((  ZipLong)l).unixTimeToZipLong(tWO_TO_32);	  	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	39	None	add
808	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  2);  long  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  2);  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32  +  2);  long  l  =  getTime().longValue();	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    =    getTime().longValue();    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	111	None	replace
809	[BUG]  [BUGGY]  return  new  ZipLong(twoTimeToZipLong);  [CE]  cannot  find  symbol  twoTimeToZipLong  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(twoTimeToZipLong);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(twoTimeToZipLong);	  return    new    ZipLong(unixTimeToZipLong);    	non-compiled	[CE]  cannot  find  symbol  twoTimeToZipLong	63	None	replace
810	[BUG]  [BUGGY]  return  new  ZipLong(twoJavaTimeToZipLong);  [CE]  cannot  find  symbol  twoJavaTimeToZipLong  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(twoJavaTimeToZipLong);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(twoJavaTimeToZipLong);	  return    new    ZipLong(unixTimeToZipLong);    	non-compiled	[CE]  cannot  find  symbol  twoJavaTimeToZipLong	63	None	replace
811	[BUG]  [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer:  [CE]  unclosed  string  literal  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer:  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer:	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  unclosed  string  literal	102	None	replace
812	[BUG]  [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer:   "  +  l);  }  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer:   "  +  l);  }  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer:   "  +  l);  }  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	102	None	replace
813	[BUG]  [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer:   "  +  l);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer:   "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer:   "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	102	None	replace
814	[BUG]  [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  [CE]  unclosed  string  literal  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  unclosed  string  literal	102	None	replace
815	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  =  System.currentTimeMillis();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    *    TWO_TO_32);    long  l  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	28	None	add
816	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  l,  JSON_TIME_BIT);  [CE]  cannot  find  symbol  JSON_TIME_BIT  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  l,  JSON_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  l,  JSON_TIME_BIT);	  return    new    ZipLong(l    +    1,    l,    unixTime);    	non-compiled	[CE]  cannot  find  symbol  JSON_TIME_BIT	93	None	replace
817	[BUG]  [BUGGY]  return  new  ZipLong(l  /  1);  ((  ZipLong)l).unixTimeToZipLong(l  /  1);  [CE]  inconvertible  types  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  1);  ((  ZipLong)l).unixTimeToZipLong(l  /  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    1);    ((  ZipLong)l).unixTimeToZipLong(l  /  1);	  	non-compiled	[CE]  inconvertible  types	132	None	add
818	[BUG]  [BUGGY]  return  new  ZipLong(l  /  1);  ((  ZipLong)l).unixTimeToZipLong(l  /  2);  [CE]  inconvertible  types  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  1);  ((  ZipLong)l).unixTimeToZipLong(l  /  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    1);    ((  ZipLong)l).unixTimeToZipLong(l  /  2);	  	non-compiled	[CE]  inconvertible  types	132	None	add
819	[BUG]  [BUGGY]  return  new  ZipLong(l  /  1);  ((  ZipLong)l  /  2).unixTimeToZipLong();  [CE]  inconvertible  types  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  1);  ((  ZipLong)l  /  2).unixTimeToZipLong();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    1);    ((  ZipLong)l  /  2).unixTimeToZipLong();	  	non-compiled	[CE]  inconvertible  types	132	None	add
820	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  X5455_ExtendedTimestamp);  [CE]  cannot  find  symbol  X5455_ExtendedTimestamp  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  X5455_ExtendedTimestamp);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  X5455_ExtendedTimestamp);	  return    new    ZipLong(l    +    1,    unixTime);    	non-compiled	[CE]  cannot  find  symbol  X5455_ExtendedTimestamp	106	None	replace
821	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  X5455_Timestamp);  [CE]  cannot  find  symbol  X5455_Timestamp  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  X5455_Timestamp);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  X5455_Timestamp);	  return    new    ZipLong(l    +    1,    unixTime);    	non-compiled	[CE]  cannot  find  symbol  X5455_Timestamp	106	None	replace
822	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  two_toZipLong);  [CE]  cannot  find  symbol  two_toZipLong  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  two_toZipLong);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  two_toZipLong);	  return    new    ZipLong(l    +    1,    unixTime);    	non-compiled	[CE]  cannot  find  symbol  two_toZipLong	106	None	replace
823	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  unixTimeToZipLong);  [CE]  cannot  find  symbol  unixTimeToZipLong  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  unixTimeToZipLong);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  unixTimeToZipLong);	  return    new    ZipLong(l    +    1,    unixTime);    	non-compiled	[CE]  cannot  find  symbol  unixTimeToZipLong	106	None	replace
824	[BUG]  [BUGGY]  return  new  ZipLong(two_to_32  /  TWO_TO_32);  [CE]  cannot  find  symbol  two_to_32  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_to_32  /  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_to_32  /  TWO_TO_32);	  return    new    ZipLong(l    /    TWO_TO_32);    	non-compiled	[CE]  cannot  find  symbol  two_to_32	31	None	replace
825	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32,  0);  [CE]  no  suitable  constructor  found  for  ZipLong(long,int)  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32,  0);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  /  TWO_TO_32,  0);	  return    new    ZipLong(l    /    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,int)	31	None	replace
826	[BUG]  [BUGGY]  return  new  ZipLong(two_to_32  *  TWO_TO_32);  [CE]  cannot  find  symbol  two_to_32  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_to_32  *  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_to_32  *  TWO_TO_32);	  return    new    ZipLong(l    *    TWO_TO_32);    	non-compiled	[CE]  cannot  find  symbol  two_to_32	29	None	replace
827	[BUG]  [BUGGY]  return  new  ZipLong(two_to_32  *  l);  [CE]  cannot  find  symbol  two_to_32  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_to_32  *  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_to_32  *  l);	  return    new    ZipLong(l    *    TWO_TO_32);    	non-compiled	[CE]  cannot  find  symbol  two_to_32	29	None	replace
828	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  *  32);	  return    new    ZipLong(l    +    32);    	compilable	  [FE]  AssertionError  	118	2	replace
829	[BUG]  [BUGGY]  return  new  ZipLong(l  *  32);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  32);	  return    new    ZipLong(l    +    32);    	compilable	  [FE]  AssertionError  	118	2	replace
830	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  tw_to_32));  [CE]  cannot  find  symbol  tw_to_32  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  tw_to_32));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  tw_to_32));	  return    new    ZipLong(unixTimeToZipLong(tWO_TO_32,    l));    	non-compiled	[CE]  cannot  find  symbol  tw_to_32	44	None	replace
831	[BUG]  [BUGGY]  return  unixTimeToZipLong(l,  X5455Timestamp.DEFAULT_TIME_BIT);  [CE]  cannot  find  symbol  X5455Timestamp  [FE]    StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l,  X5455Timestamp.DEFAULT_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  unixTimeToZipLong(l,  X5455Timestamp.DEFAULT_TIME_BIT);	  return    unixTimeToZipLong(l);    	non-compiled	[CE]  cannot  find  symbol  X5455Timestamp	84	None	replace
832	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  long  l  =  Long.parseLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  long  l  =  Long.parseLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    TWO_TO_32);    long  l  =  Long.parseLong(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	30	None	add
833	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  ((  ZipLong)l  /  TWO_TO_32).unixTime;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  ((  ZipLong)l  /  TWO_TO_32).unixTime;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    TWO_TO_32);    ((  ZipLong)l  /  TWO_TO_32).unixTime;	  	non-compiled	[CE]  not  a  statement	30	None	add
834	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  long  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    TWO_TO_32);    long  l  =  getTime().longValue();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	30	None	add
835	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10);  ((  ZipLong)l).longValue();  [CE]  inconvertible  types  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10);  ((  ZipLong)l).longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10);    ((  ZipLong)l).longValue();	  	non-compiled	[CE]  inconvertible  types	122	None	add
836	[BUG]  [BUGGY]  return  new  ZipLong(l  +  18);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  18);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  18);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	154	None	replace
837	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  cannot  find  symbol  bit1_modifyTimePresent  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol  bit1_modifyTimePresent	154	None	replace
838	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit1_accessTimePresent  cannot  be  referenced  from  a  static  context  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  non-static  variable  bit1_accessTimePresent  cannot  be  referenced  from  a  static  context	154	None	replace
839	[BUG]  [BUGGY]  return  new  ZipLong(tWEEK_TO_32  +  l);  [CE]  cannot  find  symbol  tWEEK_TO_32  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWEEK_TO_32  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWEEK_TO_32  +  l);	  return    new    ZipLong(tWEEK_TO_32);    	non-compiled	[CE]  cannot  find  symbol  tWEEK_TO_32	104	None	replace
840	[BUG]  [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:  [CE]  unclosed  string  literal  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  unclosed  string  literal	100	None	replace
841	[BUG]  [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  [CE]  unclosed  string  literal  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  unclosed  string  literal	100	None	replace
842	[BUG]  [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:   "  +  l);  }  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:   "  +  l);  }  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:   "  +  l);  }  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	100	None	replace
843	[BUG]  [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:   "  +  l);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:   "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:   "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	100	None	replace
844	[BUG]  [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  [CE]  unclosed  string  literal  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  unclosed  string  literal	100	None	replace
845	[BUG]  [BUGGY]  return  new  ZipLong(l  -  2);  long  l  =  createTime(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  2);  long  l  =  createTime(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    2);    long  l  =  createTime(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	79	None	add
846	[BUG]  [BUGGY]  return  new  ZipLong(l  -  2);  Long  l  -  2;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  2);  Long  l  -  2;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    2);    Long  l  -  2;	  	non-compiled	[CE]  ';'  expected	79	None	add
847	[BUG]  [BUGGY]  return  new  ZipLong(TimeUtils.longValue());  [CE]  cannot  find  symbol  TimeUtils  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TimeUtils.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(TimeUtils.longValue());	  return    new    ZipLong(t.longValue());    	non-compiled	[CE]  cannot  find  symbol  TimeUtils	23	None	replace
848	[BUG]  [BUGGY]  return  new  ZipLong(t.longValue()  +  TWO_TO_32);  [CE]  cannot  find  symbol  t  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(t.longValue()  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(t.longValue()  +  TWO_TO_32);	  return    new    ZipLong(t.longValue());    	non-compiled	[CE]  cannot  find  symbol  t	23	None	replace
849	[BUG]  [BUGGY]  return  new  ZipLong(two_toZipLong  +  1);  long  l  =  getTime(l);  [CE]  cannot  find  symbol  two_toZipLong  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_toZipLong  +  1);  long  l  =  getTime(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_toZipLong  +  1);  long  l  =  getTime(l);	  return    new    ZipLong(l    +    1);    long    l    =    getTime(l);    	non-compiled	[CE]  cannot  find  symbol  two_toZipLong	73	None	replace
850	[BUG]  [BUGGY]  return  new  ZipLong(two  +  1);  long  l  =  getTime(l);  [CE]  cannot  find  symbol  two  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two  +  1);  long  l  =  getTime(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two  +  1);  long  l  =  getTime(l);	  return    new    ZipLong(l    +    1);    long    l    =    getTime(l);    	non-compiled	[CE]  cannot  find  symbol  two	73	None	replace
851	[BUG]  [BUGGY]  return  new  ZipLong(getTimeToZipLong(l));  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(getTimeToZipLong(l));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(getTimeToZipLong(l));	  return    new    ZipLong(toZipLong(l));    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
852	[BUG]  [BUGGY]  return  new  ZipLong(toZipLong(l),  X5455_Timestamp);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(toZipLong(l),  X5455_Timestamp);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(toZipLong(l),  X5455_Timestamp);	  return    new    ZipLong(toZipLong(l));    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
853	[BUG]  [BUGGY]  return  new  ZipLong(createTimeToZipLong(l));  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(createTimeToZipLong(l));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(createTimeToZipLong(l));	  return    new    ZipLong(toZipLong(l));    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
854	[BUG]  [BUGGY]  return  new  ZipLong(l,  t  +  1,  l);  [CE]  cannot  find  symbol  t  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  t  +  1,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  t  +  1,  l);	  return    new    ZipLong(tWO_TO_32,    l    +    1,    l);    	non-compiled	[CE]  cannot  find  symbol  t	92	None	replace
855	[BUG]  [BUGGY]  return  new  ZipLong(two_to_32,  l  +  1,  l);  [CE]  cannot  find  symbol  two_to_32  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_to_32,  l  +  1,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_to_32,  l  +  1,  l);	  return    new    ZipLong(tWO_TO_32,    l    +    1,    l);    	non-compiled	[CE]  cannot  find  symbol  two_to_32	92	None	replace
856	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  cannot  find  symbol  tWO_TO_32  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	149	None	replace
857	[BUG]  [BUGGY]  return  new  ZipLong(l);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	149	None	replace
858	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	149	None	replace
859	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32);  if(l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32);  if(l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32);  if(l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	149	None	replace
860	[BUG]  [BUGGY]  return  Long.valueOf(tWO);  [CE]  cannot  find  symbol  tWO  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  Long.valueOf(tWO);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  Long.valueOf(tWO);	  return    Long.valueOf(l);    	non-compiled	[CE]  cannot  find  symbol  tWO	116	None	replace
861	[BUG]  [BUGGY]  return  Long.valueOf(two_to_32);  [CE]  cannot  find  symbol  two_to_32  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  Long.valueOf(two_to_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  Long.valueOf(two_to_32);	  return    Long.valueOf(l);    	non-compiled	[CE]  cannot  find  symbol  two_to_32	116	None	replace
862	[BUG]  [BUGGY]  int  l  =  getTime(l);  return  new  ZipLong(l  +  1);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  int  l  =  getTime(l);  return  new  ZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	int  l  =  getTime(l);  return  new  ZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    long    l    =    getTime(l);    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	138	None	replace
863	[BUG]  [BUGGY]  return  ZipLong.valueOf(two_to_32);  [CE]  cannot  find  symbol  two_to_32  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  ZipLong.valueOf(two_to_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  ZipLong.valueOf(two_to_32);	  return    ZipLong.valueOf(l);    	non-compiled	[CE]  cannot  find  symbol  two_to_32	114	None	replace
864	[BUG]  [BUGGY]  return  ZipLong.valueOf(t);  [CE]  cannot  find  symbol  t  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  ZipLong.valueOf(t);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  ZipLong.valueOf(t);	  return    ZipLong.valueOf(l);    	non-compiled	[CE]  cannot  find  symbol  t	114	None	replace
865	[BUG]  [BUGGY]  return  new  ZipLong(l  *  2,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  2,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  2,  l);	  return    new    ZipLong(l    +    2,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	105	None	replace
866	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455Timestamp.UTF8);  [CE]  cannot  find  symbol  X5455Timestamp  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455Timestamp.UTF8);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455Timestamp.UTF8);	  return    new    ZipLong(unixTimeToZipLong(l),    X5455_ExtendedTimestamp);    	non-compiled	[CE]  cannot  find  symbol  X5455Timestamp	43	None	replace
867	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455Timestamp);  [CE]  cannot  find  symbol  X5455Timestamp  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455Timestamp);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455Timestamp);	  return    new    ZipLong(unixTimeToZipLong(l),    X5455_ExtendedTimestamp);    	non-compiled	[CE]  cannot  find  symbol  X5455Timestamp	43	None	replace
868	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455Timestamp.NaN);  [CE]  cannot  find  symbol  X5455Timestamp  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455Timestamp.NaN);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455Timestamp.NaN);	  return    new    ZipLong(unixTimeToZipLong(l),    X5455_ExtendedTimestamp);    	non-compiled	[CE]  cannot  find  symbol  X5455Timestamp	43	None	replace
869	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_UTF8);  [CE]  cannot  find  symbol  X5455_UTF8  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_UTF8);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_UTF8);	  return    new    ZipLong(unixTimeToZipLong(l),    X5455_ExtendedTimestamp);    	non-compiled	[CE]  cannot  find  symbol  X5455_UTF8	43	None	replace
870	[BUG]  [BUGGY]  return  unixTimeToZipLong(l);  UnsupportedTimestamp.this.unixTimeToZipLong(l);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l);  UnsupportedTimestamp.this.unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    unixTimeToZipLong(l);    UnsupportedTimestamp.this.unixTimeToZipLong(l);	  	non-compiled	[CE]  cannot  find  symbol	83	None	add
871	[BUG]  [BUGGY]  return  unixTimeToZipLong(l);  long  l  =  getTime().longValue();  unixTimeToZipLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]      StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l);  long  l  =  getTime().longValue();  unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    unixTimeToZipLong(l);    long  l  =  getTime().longValue();  unixTimeToZipLong(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	83	None	add
872	[BUG]  [BUGGY]  return  unixTimeToZipLong(l);  UnsupportedTimestamp.this.unixTimeToZipLong(l);  unixTimeToZipLong(l);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l);  UnsupportedTimestamp.this.unixTimeToZipLong(l);  unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    unixTimeToZipLong(l);    UnsupportedTimestamp.this.unixTimeToZipLong(l);  unixTimeToZipLong(l);	  	non-compiled	[CE]  cannot  find  symbol	83	None	add
873	[BUG]  [BUGGY]  return  unixTimeToZipLong(l);  UnsupportedTimestamp  l  =  getTimestamp(Long.parseLong(l));  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l);  UnsupportedTimestamp  l  =  getTimestamp(Long.parseLong(l));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    unixTimeToZipLong(l);    UnsupportedTimestamp  l  =  getTimestamp(Long.parseLong(l));	  	non-compiled	[CE]  cannot  find  symbol	83	None	add
874	[BUG]  [BUGGY]  return  unixTimeToZipLong(l);  long  l  =  getTime().longValue();  unixTimeToZipLong(l,  l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]            StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l);  long  l  =  getTime().longValue();  unixTimeToZipLong(l,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    unixTimeToZipLong(l);    long  l  =  getTime().longValue();  unixTimeToZipLong(l,  l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	83	None	add
875	[BUG]  [BUGGY]  lendemain(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  lendemain(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	lendemain(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	86	None	replace
876	[BUG]  [BUGGY]  safeMultiply(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  safeMultiply(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	safeMultiply(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	86	None	replace
877	[BUG]  [BUGGY]  safeThan  <  =  0)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  safeThan  <  =  0)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	safeThan  <  =  0)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
878	[BUG]  [BUGGY]  lendemain(Long.valueOf(l)+  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  lendemain(Long.valueOf(l)+  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	lendemain(Long.valueOf(l)+  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	86	None	replace
879	[BUG]  [BUGGY]  lendemain(Long.valueOf(l))  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  lendemain(Long.valueOf(l))  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	lendemain(Long.valueOf(l))  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	86	None	replace
880	[BUG]  [BUGGY]  nisip_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  nisip_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	nisip_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  not  a  statement	139	None	replace
881	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  -  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(TWO_TO_32  -  1);	  return    new    ZipLong(l    -    1);    	compilable	  [FE]  AssertionError  	75	2	replace
882	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32  -  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  -  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(TWO_TO_32  -  1);	  return    new    ZipLong(l    -    1);    	compilable	  [FE]  AssertionError  	75	2	replace
883	[BUG]  [BUGGY]  while(l  <  TWO_TO_32)  {  l  =  new  ZipLong(TWO_TO_32);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32)  {  l  =  new  ZipLong(TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32)  {  l  =  new  ZipLong(TWO_TO_32);	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  ';'  expected	150	None	replace
884	[BUG]  [BUGGY]  while(l  <  TWO_TO_32)  {  l  =  new  ZipLong(TWO_TO_32);  }  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32)  {  l  =  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32)  {  l  =  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  incompatible  types	150	None	replace
885	[BUG]  [BUGGY]  while(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  missing  return  statement	150	None	replace
886	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(tWO_TO_32);  }  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(tWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(tWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	150	None	replace
887	[BUG]  [BUGGY]  return  new  ZipLong(t  +  1,  l,  TWO_TO_32);  [CE]  cannot  find  symbol  t  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(t  +  1,  l,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(t  +  1,  l,  TWO_TO_32);	  return    new    ZipLong(l    +    1,    TWO_TO_32,    l);    	non-compiled	[CE]  cannot  find  symbol  t	89	None	replace
888	[BUG]  [BUGGY]  return  new  ZipLong(l  /  1,  TWO_TO_32,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  1,  TWO_TO_32,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  /  1,  TWO_TO_32,  l);	  return    new    ZipLong(l    +    1,    TWO_TO_32,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)	89	None	replace
889	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.UTF8);  [CE]  cannot  find  symbol  UTF8  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.UTF8);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.UTF8);	  return    new    ZipLong(unixTimeToZipLong(l),    l);    	non-compiled	[CE]  cannot  find  symbol  UTF8	42	None	replace
890	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.class);  [CE]  no  suitable  constructor  found  for  ZipLong(ZipLong,Class<X5455_ExtendedTimestamp>)  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.class);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.class);	  return    new    ZipLong(unixTimeToZipLong(l),    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(ZipLong,Class<X5455_ExtendedTimestamp>)	42	None	replace
891	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.NUMBER_INT);  [CE]  cannot  find  symbol  NUMBER_INT  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.NUMBER_INT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.NUMBER_INT);	  return    new    ZipLong(unixTimeToZipLong(l),    l);    	non-compiled	[CE]  cannot  find  symbol  NUMBER_INT	42	None	replace
892	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.DEFAULT);  [CE]  cannot  find  symbol  DEFAULT  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.DEFAULT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.DEFAULT);	  return    new    ZipLong(unixTimeToZipLong(l),    l);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	42	None	replace
893	[BUG]  [BUGGY]  return  new  ZipLong(l,  tw_TO_32);  [CE]  cannot  find  symbol  tw_TO_32  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  tw_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  tw_TO_32);	  return    new    ZipLong(tWO_TO_32,    l);    	non-compiled	[CE]  cannot  find  symbol  tw_TO_32	1	None	replace
894	[BUG]  [BUGGY]  return  new  ZipLong(l,  tw_to_32);  [CE]  cannot  find  symbol  tw_to_32  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  tw_to_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  tw_to_32);	  return    new    ZipLong(tWO_TO_32,    l);    	non-compiled	[CE]  cannot  find  symbol  tw_to_32	1	None	replace
895	[BUG]  [BUGGY]  long  bit0_modifyTimePresent  =  new  ZipLong(TWO_TO_32);  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit0_modifyTimePresent  =  new  ZipLong(TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit0_modifyTimePresent  =  new  ZipLong(TWO_TO_32);	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  incompatible  types	148	None	replace
896	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  new  ZipLong(TWO_TO_32);  if(bit2_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  new  ZipLong(TWO_TO_32);  if(bit2_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  new  ZipLong(TWO_TO_32);  if(bit2_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  incompatible  types	148	None	replace
897	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  new  ZipLong(TWO_TO_32);  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  new  ZipLong(TWO_TO_32);  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  new  ZipLong(TWO_TO_32);  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  incompatible  types	148	None	replace
898	[BUG]  [BUGGY]  long  l  +  TWO_TO_32;  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  +  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  +  TWO_TO_32;	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    +    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	48	None	replace
899	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  +  TWO_TO_32;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  +  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  TWO_TO_32);  long  l  +  TWO_TO_32;	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    +    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	48	None	replace
900	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  long  l  +  TWO_TO_32;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  long  l  +  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  /  TWO_TO_32);  long  l  +  TWO_TO_32;	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    +    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	48	None	replace
901	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  =  l  *  TWO_TO_32;  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  =  l  *  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  TWO_TO_32);  long  l  =  l  *  TWO_TO_32;	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    +    TWO_TO_32;    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	48	None	replace
902	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l  -  TWO_TO_32);  L  -  TWO_TO_32;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l  -  TWO_TO_32);  L  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32,  l  -  TWO_TO_32);  L  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    L    -    TWO_TO_32;    	non-compiled	[CE]  not  a  statement	62	None	replace
903	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  L  -  TWO_TO_32;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  L  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32  +  1);  L  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    L    -    TWO_TO_32;    	non-compiled	[CE]  not  a  statement	62	None	replace
904	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  new  ZipLong(l  +  TWO_TO_32);  if(bit2_createTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  new  ZipLong(l  +  TWO_TO_32);  if(bit2_createTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  new  ZipLong(l  +  TWO_TO_32);  if(bit2_createTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  incompatible  types	155	None	replace
905	[BUG]  [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit2_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit2_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit1_accessTimePresent  =  unixTimeToZipLong(l  +  TWO_TO_32);  if(bit2_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  incompatible  types	155	None	replace
906	[BUG]  [BUGGY]  long  bit0_modifyTimePresent  =  new  ZipLong(l  +  TWO_TO_32);  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit0_modifyTimePresent  =  new  ZipLong(l  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit0_modifyTimePresent  =  new  ZipLong(l  +  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  incompatible  types	155	None	replace
907	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  unixTimeToZipLong(l  +  TWO_TO_32);  }  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  unixTimeToZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  unixTimeToZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    return    new    ZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  missing  return  statement	107	None	replace
908	[BUG]  [BUGGY]  return  new  ZipLong(two_long);  [CE]  cannot  find  symbol  two_long  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_long);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_long);	  return    new    ZipLong(two_timeToZipLong);    	non-compiled	[CE]  cannot  find  symbol  two_long	151	None	replace
909	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	159	None	replace
910	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  cannot  find  symbol  bit1_modifyTimePresent  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32);  if(bit1_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol  bit1_modifyTimePresent	159	None	replace
911	[BUG]  [BUGGY]  return  new  ZipLong(l  +  18);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  18);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  18);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	159	None	replace
912	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit1_accessTimePresent  cannot  be  referenced  from  a  static  context  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32);  if(bit1_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  non-static  variable  bit1_accessTimePresent  cannot  be  referenced  from  a  static  context	159	None	replace
913	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  new  ZipLong(l  +  TWO_TO_32,  l  +  TWO_TO_32);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  new  ZipLong(l  +  TWO_TO_32,  l  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32);  new  ZipLong(l  +  TWO_TO_32,  l  +  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    new    ZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	47	None	replace
914	[BUG]  [BUGGY]  new  ZipLong(l  +  TWO_TO_32,  l  +  TWO_TO_32);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  new  ZipLong(l  +  TWO_TO_32,  l  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	new  ZipLong(l  +  TWO_TO_32,  l  +  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    new    ZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	47	None	replace
915	[BUG]  [BUGGY]  new  ZipLong(l  +  18);  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  new  ZipLong(l  +  18);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	new  ZipLong(l  +  18);	  return    new    ZipLong(l    +    TWO_TO_32);    new    ZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  missing  return  statement	47	None	replace
916	[BUG]  [BUGGY]  return  new  ZipLong(l  /  1,  TWO_TO_32);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  1,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  /  1,  TWO_TO_32);	  return    new    ZipLong(l    +    1,    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	94	None	replace
917	[BUG]  [BUGGY]  return  new  ZipLong(toZipLong(l,  TWO_TO_32);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(toZipLong(l,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(toZipLong(l,  TWO_TO_32);	  return    new    ZipLong(TWO_TO_32,    l);    	non-compiled	[CE]  ')'  expected	65	None	replace
918	[BUG]  [BUGGY]  return  new  ZipLong(l,  TYPE_TO_32);  [CE]  cannot  find  symbol  TYPE_TO_32  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  TYPE_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  TYPE_TO_32);	  return    new    ZipLong(TWO_TO_32,    l);    	non-compiled	[CE]  cannot  find  symbol  TYPE_TO_32	65	None	replace
919	[BUG]  [BUGGY]  while(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
920	[BUG]  [BUGGY]  while(l  <  TWO_TO_32  &&  bit1_accessTimePresent)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32  &&  bit1_accessTimePresent)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32  &&  bit1_accessTimePresent)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
921	[BUG]  [BUGGY]  while(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(tWO_TO_32);  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(tWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(tWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
922	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  =  unixTimeToZipLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  =  unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  TWO_TO_32);  long  l  =  unixTimeToZipLong(l);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTimeToZipLong(l);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	108	None	replace
923	[BUG]  [BUGGY]  long  l  =  unixTimeToZipLong(two_to_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  unixTimeToZipLong(two_to_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  unixTimeToZipLong(two_to_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTimeToZipLong(l);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	108	None	replace
924	[BUG]  [BUGGY]  return  new  ZipLong(two_to_32  -  TWO_TO_32,  l);  [CE]  cannot  find  symbol  two_to_32  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_to_32  -  TWO_TO_32,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_to_32  -  TWO_TO_32,  l);	  return    new    ZipLong(l    -    TWO_TO_32,    l);    	non-compiled	[CE]  cannot  find  symbol  two_to_32	76	None	replace
925	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l.longValue());  [CE]  long  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32,  l.longValue());	  return    new    ZipLong(l    -    TWO_TO_32,    l);    	non-compiled	[CE]  long  cannot  be  dereferenced	76	None	replace
926	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  long);  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  long);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32,  long);	  return    new    ZipLong(l    -    TWO_TO_32,    l);    	non-compiled	[CE]  '.class'  expected	76	None	replace
927	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l,  l);  [CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(l,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l,  l);	  return(ZipLong)unixTimeToZipLong(l);    	non-compiled	[CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;	113	None	replace
928	[BUG]  [BUGGY]  return  new  ZipLong(l);  new  ZipLong(tWO_TO_32);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l);  new  ZipLong(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l);  new  ZipLong(tWO_TO_32);	  return    new    ZipLong(TWO_TO_32);    new    ZipLong(TWO_TO_32);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	10	None	replace
929	[BUG]  [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  new  ZipLong(TWO_TO_32);  }  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    new    ZipLong(TWO_TO_32);    	non-compiled	[CE]  unreachable  statement	10	None	replace
930	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  new  ZipLong(TWO_TO_32);  }  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    new    ZipLong(TWO_TO_32);    	non-compiled	[CE]  unreachable  statement	10	None	replace
931	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  new  ZipLong(TWO_TO_32);  }  else  {  unixTimeToZipLong(l);  }  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  new  ZipLong(TWO_TO_32);  }  else  {  unixTimeToZipLong(l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  new  ZipLong(TWO_TO_32);  }  else  {  unixTimeToZipLong(l);  }	  return    new    ZipLong(TWO_TO_32);    new    ZipLong(TWO_TO_32);    	non-compiled	[CE]  unreachable  statement	10	None	replace
932	[BUG]  [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  new  ZipLong(TWO_TO_32);  }  else  {  unixTimeToZipLong(l);  }  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  new  ZipLong(TWO_TO_32);  }  else  {  unixTimeToZipLong(l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  new  ZipLong(TWO_TO_32);  }  else  {  unixTimeToZipLong(l);  }	  return    new    ZipLong(TWO_TO_32);    new    ZipLong(TWO_TO_32);    	non-compiled	[CE]  unreachable  statement	10	None	replace
933	[BUG]  [BUGGY]  return  new  ZipLong(l  *  1,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  1,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  1,  l);	  return    new    ZipLong(l    -    1,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	127	None	replace
934	[BUG]  [BUGGY]  return  new  ZipLong(l  -  2,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  2,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  2,  l);	  return    new    ZipLong(l    -    1,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	127	None	replace
935	[BUG]  [BUGGY]  return  new  ZipLong(l,  l  -  1);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  l  -  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  l  -  1);	  return    new    ZipLong(l    -    1,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	127	None	replace
936	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32);  long  l  =  unixTimeToZipLong(l  +  1);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32);  long  l  =  unixTimeToZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32);  long  l  =  unixTimeToZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    long    l    =    unixTimeToZipLong(l    +    1);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	69	None	replace
937	[BUG]  [BUGGY]  null  l  =  unixTimeToZipLong(l  +  1);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  null  l  =  unixTimeToZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	null  l  =  unixTimeToZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    long    l    =    unixTimeToZipLong(l    +    1);    	non-compiled	[CE]  not  a  statement	69	None	replace
938	[BUG]  [BUGGY]  l  =  unixTimeToZipLong(l  +  1);  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  l  =  unixTimeToZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	l  =  unixTimeToZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    long    l    =    unixTimeToZipLong(l    +    1);    	non-compiled	[CE]  incompatible  types	69	None	replace
939	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32);  long  l  =  unixTimeToZipLong(tWO_TO_32);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32);  long  l  =  unixTimeToZipLong(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32);  long  l  =  unixTimeToZipLong(tWO_TO_32);	  return    new    ZipLong(l    +    1);    long    l    =    unixTimeToZipLong(l    +    1);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	69	None	replace
940	[BUG]  [BUGGY]  null  l  =  unixTimeToZipLong(l  +  TWO_TO_32);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  null  l  =  unixTimeToZipLong(l  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	null  l  =  unixTimeToZipLong(l  +  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTimeToZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  not  a  statement	109	None	replace
941	[BUG]  [BUGGY]  short  l  =  unixTimeToZipLong(l  +  TWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  short  l  =  unixTimeToZipLong(l  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	short  l  =  unixTimeToZipLong(l  +  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTimeToZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	109	None	replace
942	[BUG]  [BUGGY]  l  =  unixTimeToZipLong(l  +  TWO_TO_32);  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  l  =  unixTimeToZipLong(l  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	l  =  unixTimeToZipLong(l  +  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTimeToZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  incompatible  types	109	None	replace
943	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.US_ASCII));  [CE]  cannot  find  symbol  US_ASCII  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.US_ASCII));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.US_ASCII));	  return    new    ZipLong(unixTimeToZipLong(l,    X5455_ExtendedTimestamp.UTF8));    	non-compiled	[CE]  cannot  find  symbol  US_ASCII	121	None	replace
944	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.UTF8)));  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.UTF8)));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.UTF8)));	  return    new    ZipLong(unixTimeToZipLong(l,    X5455_ExtendedTimestamp.UTF8));    	non-compiled	[CE]  ';'  expected	121	None	replace
945	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DEFAULT));  [CE]  cannot  find  symbol  DEFAULT  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DEFAULT));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DEFAULT));	  return    new    ZipLong(unixTimeToZipLong(l,    X5455_ExtendedTimestamp.UTF8));    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	121	None	replace
946	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32);  long  l  =  unixTimeToZipLong(l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32);  long  l  =  unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32);  long  l  =  unixTimeToZipLong(l);	  return    new    ZipLong(l    +    1);    long    l    =    unixTimeToZipLong(l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	70	None	replace
947	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  unixTimeToZipLong(tWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  unixTimeToZipLong(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1);  long  l  =  unixTimeToZipLong(tWO_TO_32);	  return    new    ZipLong(l    +    1);    long    l    =    unixTimeToZipLong(l);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	70	None	replace
948	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  X5455Timestamp.SHORT_TIME_BIT);  [CE]  cannot  find  symbol  X5455Timestamp  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  X5455Timestamp.SHORT_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  X5455Timestamp.SHORT_TIME_BIT);	  return    new    ZipLong(l    +    1,    X5455Timestamp.DEFAULT_TIME_BIT);    	non-compiled	[CE]  cannot  find  symbol  X5455Timestamp	153	None	replace
949	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  X5455Timestamp.BIT_DEFAULT_TIME_BIT);  [CE]  cannot  find  symbol  X5455Timestamp  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  X5455Timestamp.BIT_DEFAULT_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  X5455Timestamp.BIT_DEFAULT_TIME_BIT);	  return    new    ZipLong(l    +    1,    X5455Timestamp.DEFAULT_TIME_BIT);    	non-compiled	[CE]  cannot  find  symbol  X5455Timestamp	153	None	replace
950	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  X5455Timestamp.DEFAULT_TIME_BIT)+  1;  [CE]  cannot  find  symbol  X5455Timestamp  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  X5455Timestamp.DEFAULT_TIME_BIT)+  1;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  X5455Timestamp.DEFAULT_TIME_BIT)+  1;	  return    new    ZipLong(l    +    1,    X5455Timestamp.DEFAULT_TIME_BIT);    	non-compiled	[CE]  cannot  find  symbol  X5455Timestamp	153	None	replace
951	[BUG]  [BUGGY]  return  new  ZipLong(l,  l.longValue());  [CE]  long  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  l.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  l.longValue());	  return    new    ZipLong(l.longValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	21	None	replace
952	[BUG]  [BUGGY]  return  new  ZipLong(l,  createTime.longValue());  [CE]  non-static  variable  createTime  cannot  be  referenced  from  a  static  context  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  createTime.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  createTime.longValue());	  return    new    ZipLong(l.longValue());    	non-compiled	[CE]  non-static  variable  createTime  cannot  be  referenced  from  a  static  context	21	None	replace
953	[BUG]  [BUGGY]  return  new  ZipLong(two_toZipLong,  l.longValue());  [CE]  cannot  find  symbol  two_toZipLong  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_toZipLong,  l.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_toZipLong,  l.longValue());	  return    new    ZipLong(l.longValue());    	non-compiled	[CE]  cannot  find  symbol  two_toZipLong	21	None	replace
954	[BUG]  [BUGGY]  return  new  ZipLong(two_modifyTimePresent);  [CE]  cannot  find  symbol  two_modifyTimePresent  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_modifyTimePresent);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_modifyTimePresent);	  return    new    ZipLong(accessTime);    	non-compiled	[CE]  cannot  find  symbol  two_modifyTimePresent	9	None	replace
955	[BUG]  [BUGGY]  return  new  ZipLong(two_toZipLong,  l);  [CE]  cannot  find  symbol  two_toZipLong  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_toZipLong,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_toZipLong,  l);	  return    new    ZipLong(unixTimeToZipLong,    l);    	non-compiled	[CE]  cannot  find  symbol  two_toZipLong	5	None	replace
956	[BUG]  [BUGGY]  return  new  ZipLong(twoFractionTimeToZipLong,  l);  [CE]  cannot  find  symbol  twoFractionTimeToZipLong  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(twoFractionTimeToZipLong,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(twoFractionTimeToZipLong,  l);	  return    new    ZipLong(unixTimeToZipLong,    l);    	non-compiled	[CE]  cannot  find  symbol  twoFractionTimeToZipLong	5	None	replace
957	[BUG]  [BUGGY]  return  new  ZipLong(l,  ZERO);  [CE]  cannot  find  symbol  ZERO  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  ZERO);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  ZERO);	  return    new    ZipLong(l,    t);    	non-compiled	[CE]  cannot  find  symbol  ZERO	2	None	replace
958	[BUG]  [BUGGY]  safeThan  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  >  expected  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  safeThan  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	safeThan  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  >  expected	81	None	replace
959	[BUG]  [BUGGY]  safeThan  <  =  0)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  safeThan  <  =  0)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	safeThan  <  =  0)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
960	[BUG]  [BUGGY]  lendemain(Long.valueOf(l)  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  lendemain(Long.valueOf(l)  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	lendemain(Long.valueOf(l)  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	81	None	replace
961	[BUG]  [BUGGY]  lendemain(Long.valueOf(l))  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  lendemain(Long.valueOf(l))  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	lendemain(Long.valueOf(l))  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	81	None	replace
962	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  =  unixTime.longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  =  unixTime.longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  TWO_TO_32);  long  l  =  unixTime.longValue();	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTime.longValue();    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	52	None	replace
963	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  =  this.unixTime.longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  =  this.unixTime.longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32);  long  l  =  this.unixTime.longValue();	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTime.longValue();    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	52	None	replace
964	[BUG]  [BUGGY]  short  l  =  unixTime.longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  short  l  =  unixTime.longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	short  l  =  unixTime.longValue();	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTime.longValue();    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	52	None	replace
965	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  long  l  =(long)unixTimeToZipLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]    StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  long  l  =(long)unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l);    long  l  =(long)unixTimeToZipLong(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	112	None	add
966	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  long  l  =  getTime();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]      StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  long  l  =  getTime();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l);    long  l  =  getTime();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	112	None	add
967	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  long  l  =  getTime(l).longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]        StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  long  l  =  getTime(l).longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l);    long  l  =  getTime(l).longValue();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	112	None	add
968	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  long  l  =  UnsupportedTime.getInstance(Long.parseLong(l));  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]          StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  long  l  =  UnsupportedTime.getInstance(Long.parseLong(l));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l);    long  l  =  UnsupportedTime.getInstance(Long.parseLong(l));	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	112	None	add
969	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  long  l  =  getTime(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  long  l  =  getTime(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10    +    TWO_TO_32);    long  l  =  getTime(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	144	None	add
970	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  long  l  =  createTime(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  long  l  =  createTime(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10    +    TWO_TO_32);    long  l  =  createTime(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	144	None	add
971	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  long  l  =  getTime().getLongValue(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  long  l  =  getTime().getLongValue(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10    +    TWO_TO_32);    long  l  =  getTime().getLongValue(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	144	None	add
972	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.DEFAULT_TO_32);  [CE]  cannot  find  symbol  DEFAULT_TO_32  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.DEFAULT_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.DEFAULT_TO_32);	  return    new    ZipLong(unixTimeToZipLong(l),    X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_TO_32	120	None	replace
973	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.US_ASCII);  [CE]  cannot  find  symbol  US_ASCII  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.US_ASCII);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.US_ASCII);	  return    new    ZipLong(unixTimeToZipLong(l),    X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);    	non-compiled	[CE]  cannot  find  symbol  US_ASCII	120	None	replace
974	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: ",  +  l);  }  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: ",  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: ",  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,long)	14	None	replace
975	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  18);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  /  18);	  return    new    ZipLong(l    +    18);    	compilable	  [FE]  AssertionError  	35	2	replace
976	[BUG]  [BUGGY]  return  new  ZipLong(l  /  18);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  18);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  /  18);	  return    new    ZipLong(l    +    18);    	compilable	  [FE]  AssertionError  	35	2	replace
977	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  18);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  *  18);	  return    new    ZipLong(l    +    18);    	compilable	  [FE]  AssertionError  	35	2	replace
978	[BUG]  [BUGGY]  return  new  ZipLong(l  *  18);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  18);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  18);	  return    new    ZipLong(l    +    18);    	compilable	  [FE]  AssertionError  	35	2	replace
979	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  Long.parseLong(tWO_TO_32,  l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  Long.parseLong(tWO_TO_32,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1);  long  l  =  Long.parseLong(tWO_TO_32,  l);	  return    new    ZipLong(l    +    1);    long    l    =    Long.parseLong(tWO_TO_32);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	72	None	replace
980	[BUG]  [BUGGY]  return  new  ZipLong(l  +  t);  [CE]  cannot  find  symbol  t  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  t);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  t);	  return    new    ZipLong(tWO_TO_32    +    l);    	non-compiled	[CE]  cannot  find  symbol  t	19	None	replace
981	[BUG]  [BUGGY]  return  new  ZipLong(l  +  tw_to_32);  [CE]  cannot  find  symbol  tw_to_32  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  tw_to_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  tw_to_32);	  return    new    ZipLong(tWO_TO_32    +    l);    	non-compiled	[CE]  cannot  find  symbol  tw_to_32	19	None	replace
982	[BUG]  [BUGGY]  return  new  ZipLong(two_to_32  +  l);  [CE]  cannot  find  symbol  two_to_32  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_to_32  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_to_32  +  l);	  return    new    ZipLong(tWO_TO_32    +    l);    	non-compiled	[CE]  cannot  find  symbol  two_to_32	19	None	replace
983	[BUG]  [BUGGY]  return  new  ZipLong(unixTimetoZipLong(l));  [CE]  cannot  find  symbol  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimetoZipLong(l));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimetoZipLong(l));	  return    new    ZipLong(unixTimeToZipLong(tWO_TO_32));    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
984	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -  TWO_TO_32;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -  TWO_TO_32;  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -  TWO_TO_32;  }	  return    new    ZipLong(l    -    TWO_TO_32);    Long    l    -    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	59	None	replace
985	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -  TWO_TO_32;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -  TWO_TO_32;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -  TWO_TO_32;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    ZipLong(l    -    TWO_TO_32);    Long    l    -    TWO_TO_32;    	non-compiled	[CE]  	59	None	replace
986	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -  TWO_TO_32;  }  else  {  unixTimeToZipLong(l);  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -  TWO_TO_32;  }  else  {  unixTimeToZipLong(l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -  TWO_TO_32;  }  else  {  unixTimeToZipLong(l);  }	  return    new    ZipLong(l    -    TWO_TO_32);    Long    l    -    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	59	None	replace
987	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO  [CE]  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    else    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  	101	None	replace
988	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO_TO  [CE]  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO_TO  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO_TO	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    else    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  	101	None	replace
989	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  -  TWO_TO_32);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  long  l  -  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  TWO_TO_32);  long  l  -  TWO_TO_32);	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    -    TWO_TO_32);    	non-compiled	[CE]  ';'  expected	57	None	replace
990	[BUG]  [BUGGY]  safeThan  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  >  expected  [FE]                                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  safeThan  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	safeThan  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  >  expected	87	None	replace
991	[BUG]  [BUGGY]  safeThan  <  =  false)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  safeThan  <  =  false)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	safeThan  <  =  false)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
992	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    return    new    ZipLong(TWO_TO_32);    	compilable	  [FE]  AssertionError  	146	2	replace
993	[BUG]  [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  return  new  ZipLong(TWO_TO_32);  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    return    new    ZipLong(TWO_TO_32);    	compilable	  [FE]  AssertionError  	146	2	replace
994	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    ZipLong(TWO_TO_32);    return    new    ZipLong(TWO_TO_32);    	compilable	  [FE]  IllegalArgumentException  	146	4	replace
995	[BUG]  [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    ZipLong(TWO_TO_32);    return    new    ZipLong(TWO_TO_32);    	compilable	  [FE]  IllegalArgumentException  	146	4	replace
996	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: ",  +  l);  }  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,long)  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: ",  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: ",  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,long)	12	None	replace
997	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l);  long  l  =  unixTime(l  +  TWO_TO_32);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l);  long  l  =  unixTime(l  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32,  l);  long  l  =  unixTime(l  +  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTime(l    +    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	54	None	replace
998	[BUG]  [BUGGY]  return  new  ZipLong(l  +  32);  long  l  =  getTime(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  32);  long  l  =  getTime(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    32);    long  l  =  getTime(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	117	None	add
999	[BUG]  [BUGGY]  return  new  ZipLong(l  +  32);  long  l  =  createTime(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  32);  long  l  =  createTime(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    32);    long  l  =  createTime(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	117	None	add
1000	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -  TWO_TO_32  +  1;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -  TWO_TO_32  +  1;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -  TWO_TO_32  +  1;	  return    new    ZipLong(l    -    TWO_TO_32);    Long    l    -    TWO_TO_32);    	non-compiled	[CE]  ';'  expected	61	None	replace
1001	[BUG]  [BUGGY]  return  new  ZipLong(l  -  1);  Long  l  -  1;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  1);  Long  l  -  1;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  1);  Long  l  -  1;	  return    new    ZipLong(l    -    TWO_TO_32);    Long    l    -    TWO_TO_32);    	non-compiled	[CE]  ';'  expected	61	None	replace
1002	[BUG]  [BUGGY]  safeThan  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  safeThan  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	safeThan  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "Timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
1003	[BUG]  [BUGGY]  safeMultiply(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  safeMultiply(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	safeMultiply(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "Timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	88	None	replace
1004	[BUG]  [BUGGY]  safeThan  <  =  0)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  safeThan  <  =  0)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	safeThan  <  =  0)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "Timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
1005	[BUG]  [BUGGY]  safeThan  <  =  32)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  safeThan  <  =  32)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	safeThan  <  =  32)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "Timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
1006	[BUG]  [BUGGY]  return  new  ZipLong(two_TO_32,  l.longValue());  [CE]  cannot  find  symbol  two_TO_32  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_TO_32,  l.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_TO_32,  l.longValue());	  return    new    ZipLong(TWO_TO_32.longValue());    	non-compiled	[CE]  cannot  find  symbol  two_TO_32	24	None	replace
1007	[BUG]  [BUGGY]  return  new  ZipLong(l,  t  +  1);  [CE]  cannot  find  symbol  t  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  t  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  t  +  1);	  return    new    ZipLong(tWO_TO_32,    l    +    1);    	non-compiled	[CE]  cannot  find  symbol  t	41	None	replace
1008	[BUG]  [BUGGY]  return  new  ZipLong(two_to_32,  l  +  1);  [CE]  cannot  find  symbol  two_to_32  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_to_32,  l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_to_32,  l  +  1);	  return    new    ZipLong(tWO_TO_32,    l    +    1);    	non-compiled	[CE]  cannot  find  symbol  two_to_32	41	None	replace
1009	[BUG]  [BUGGY]  return  new  ZipLong(l,  l  +  1);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  l  +  1);	  return    new    ZipLong(tWO_TO_32,    l    +    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	41	None	replace
1010	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  1);  }  [CE]  inconvertible  types  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  1);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  1);  }	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  inconvertible  types	137	None	replace
1011	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  +  1);  long  l  =  getTime().longValue();  [CE]  cannot  find  symbol  tWO_TO_32  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  +  1);  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32,  l  +  1);  long  l  =  getTime().longValue();	  return    new    ZipLong(l    +    1);    long    l    =    getTime().longValue();    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	67	None	replace
1012	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1,  l);  long  l  =  getTime().longValue();  [CE]  cannot  find  symbol  tWO_TO_32  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1,  l);  long  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  1,  l);  long  l  =  getTime().longValue();	  return    new    ZipLong(l    +    1);    long    l    =    getTime().longValue();    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	67	None	replace
1013	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  11  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  +  11  +  TWO_TO_32);	  return    new    ZipLong(l    +    10    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	145	2	replace
1014	[BUG]  [BUGGY]  return  new  ZipLong(l  +  11  +  TWO_TO_32);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  11  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  11  +  TWO_TO_32);	  return    new    ZipLong(l    +    10    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	145	2	replace
1015	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  +  unixTime);  [CE]  cannot  find  symbol  unixTime  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  unixTime);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  10  +  unixTime);	  return    new    ZipLong(l    +    10    +    TWO_TO_32);    	non-compiled	[CE]  cannot  find  symbol  unixTime	145	None	replace
1016	[BUG]  [BUGGY]  short  l  =  getTime().longValue();  return  new  ZipLong(l  +  1);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  short  l  =  getTime().longValue();  return  new  ZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	short  l  =  getTime().longValue();  return  new  ZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    long    l    =    getTime().longValue();    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	135	None	replace
1017	[BUG]  [BUGGY]  nisip_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  not  a  statement  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  nisip_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	nisip_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  not  a  statement	142	None	replace
1018	[BUG]  [BUGGY]  return  new  ZipLong(l  -  1);  ((  ZipLong)l).longValue();  [CE]  inconvertible  types  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  1);  ((  ZipLong)l).longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    1);    ((  ZipLong)l).longValue();	  	non-compiled	[CE]  inconvertible  types	74	None	add
1019	[BUG]  [BUGGY]  return  new  ZipLong(l  -  1);  long  l  =  getTime(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  1);  long  l  =  getTime(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    1);    long  l  =  getTime(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	74	None	add
1020	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  l  -  TWO_TO_32;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  l  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32  +  1);  l  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    l    -    TWO_TO_32;    	non-compiled	[CE]  not  a  statement	58	None	replace
1021	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  long  -  TWO_TO_32;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  long  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  /  TWO_TO_32);  long  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    long    -    TWO_TO_32;    	non-compiled	[CE]  not  a  statement	60	None	replace
1022	[BUG]  [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  missing  return  statement	157	None	replace
1023	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  return  new  ZipLong(TWO_TO_32  +  1);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  return  new  ZipLong(TWO_TO_32  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32    +    1);    return  new  ZipLong(TWO_TO_32  +  1);	  	non-compiled	[CE]  unreachable  statement	39	None	add
1024	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32    +    1);    if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  unreachable  statement	39	None	add
1025	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32    +    1);    if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	39	None	add
1026	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32  +  1);  }  else  {  return  new  ZipLong(TWO_TO_32  +  1);  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32  +  1);  }  else  {  return  new  ZipLong(TWO_TO_32  +  1);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32    +    1);    if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32  +  1);  }  else  {  return  new  ZipLong(TWO_TO_32  +  1);  }	  	non-compiled	[CE]  unreachable  statement	39	None	add
1027	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32    +    1);    if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  unreachable  statement	39	None	add
1028	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32  +  1);  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32  +  1);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32    +    1);    if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32  +  1);  }	  	non-compiled	[CE]  unreachable  statement	39	None	add
1029	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]                AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32    +    1);    if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	39	None	add
1030	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  getTime().longValue());  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  getTime().longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  getTime().longValue());	  return    new    ZipLong(l    +    1);    long    l    =    getTime().longValue();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
1031	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  return  new  ZipLong(l  +  10  +  TWO_TO_32);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  return  new  ZipLong(l  +  10  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10    +    TWO_TO_32);    return  new  ZipLong(l  +  10  +  TWO_TO_32);	  	non-compiled	[CE]  unreachable  statement	144	None	add
1032	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  10  +  TWO_TO_32);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  10  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10    +    TWO_TO_32);    if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  10  +  TWO_TO_32);  }	  	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	144	None	add
1033	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  10  +  TWO_TO_32);  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  10  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10    +    TWO_TO_32);    if(bit0_modifyTimePresent)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  10  +  TWO_TO_32);  }	  	non-compiled	[CE]  ';'  expected	144	None	add
1034	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  if(bit1_accessTimePresent)  {  return  new  ZipLong(l  +  10  +  TWO_TO_32);  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  if(bit1_accessTimePresent)  {  return  new  ZipLong(l  +  10  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10    +    TWO_TO_32);    if(bit0_modifyTimePresent)  {  if(bit1_accessTimePresent)  {  return  new  ZipLong(l  +  10  +  TWO_TO_32);  }	  	non-compiled	[CE]  ';'  expected	144	None	add
1035	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  10  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  10  +  TWO_TO_32);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]            AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  10  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  10  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10    +    TWO_TO_32);    if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  10  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  10  +  TWO_TO_32);  }	  	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	144	None	add
1036	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  if(bit2_createTimePresent)  {  return  new  ZipLong(l  +  10  +  TWO_TO_32);  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  if(bit2_createTimePresent)  {  return  new  ZipLong(l  +  10  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10    +    TWO_TO_32);    if(bit0_modifyTimePresent)  {  if(bit2_createTimePresent)  {  return  new  ZipLong(l  +  10  +  TWO_TO_32);  }	  	non-compiled	[CE]  ';'  expected	144	None	add
1037	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  if(bit1_createTimePresent)  {  return  new  ZipLong(l  +  10  +  TWO_TO_32);  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  if(bit1_createTimePresent)  {  return  new  ZipLong(l  +  10  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10    +    TWO_TO_32);    if(bit0_modifyTimePresent)  {  if(bit1_createTimePresent)  {  return  new  ZipLong(l  +  10  +  TWO_TO_32);  }	  	non-compiled	[CE]  ';'  expected	144	None	add
1038	[BUG]  [BUGGY]  return  new  ZipLong(two_accessTimePresent);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  cannot  find  symbol  two_accessTimePresent  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_accessTimePresent);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_accessTimePresent);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol  two_accessTimePresent	149	None	replace
1039	[BUG]  [BUGGY]  triesToZipLong(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  triesToZipLong(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	triesToZipLong(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    =    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	140	None	replace
1040	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  [Delete]  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	[Delete]	  if(l    <    =    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
1041	[BUG]  [BUGGY]  aughtInvalidZip( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  [CE]  cannot  find  symbol  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  aughtInvalidZip( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	aughtInvalidZip( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);	  if(l    <    =    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
1042	[BUG]  [BUGGY]  aughtInvalidZipException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  [CE]  cannot  find  symbol  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  aughtInvalidZipException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	aughtInvalidZipException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);	  if(l    <    =    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
1043	[BUG]  [BUGGY]  aughtInvalidZip(l,  X5455Timestamp.class)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  aughtInvalidZip(l,  X5455Timestamp.class)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	aughtInvalidZip(l,  X5455Timestamp.class)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    =    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	140	None	replace
1044	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  ((  ZipLong)l).longValue();  }  [CE]  inconvertible  types  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  ((  ZipLong)l).longValue();  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  ((  ZipLong)l).longValue();  }	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    	non-compiled	[CE]  inconvertible  types	136	None	replace
1045	[BUG]  [BUGGY]  if(l  <  =  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  ((  ZipLong)l).longValue();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  =  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  ((  ZipLong)l).longValue();  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  =  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  ((  ZipLong)l).longValue();  }	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
1046	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  ((  ZipLong)l).longValue();  }  [CE]  inconvertible  types  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  ((  ZipLong)l).longValue();  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  ((  ZipLong)l).longValue();  }	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    	non-compiled	[CE]  inconvertible  types	136	None	replace
1047	[BUG]  [BUGGY]  if(l  <  =  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  ((  ZipLong)l).longValue();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  =  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  ((  ZipLong)l).longValue();  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  =  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  ((  ZipLong)l).longValue();  }	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
1048	[BUG]  [BUGGY]  return  new  ZipLong(l  +  3);  return  new  ZipLong(l  +  3);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  3);  return  new  ZipLong(l  +  3);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    3);    return  new  ZipLong(l  +  3);	  	non-compiled	[CE]  unreachable  statement	37	None	add
1049	[BUG]  [BUGGY]  return  new  ZipLong(l  +  3);  ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  3);  [CE]  inconvertible  types  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  3);  ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  3);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    3);    ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  3);	  	non-compiled	[CE]  inconvertible  types	37	None	add
1050	[BUG]  [BUGGY]  long  l  =  getTime(l);  return  new  ZipLong(l  +  3);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  getTime(l);  return  new  ZipLong(l  +  3);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  getTime(l);  return  new  ZipLong(l  +  3);	  return    new    ZipLong(l    +    1);    long    l    =    getTime(l);    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	138	None	replace
1051	[BUG]  [BUGGY]  return  new  ZipLong(l,  TYPE_TIME_BIT);  [CE]  cannot  find  symbol  TYPE_TIME_BIT  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  TYPE_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  TYPE_TIME_BIT);	  return    new    ZipLong(TWO_TO_32,    l);    	non-compiled	[CE]  cannot  find  symbol  TYPE_TIME_BIT	65	None	replace
1052	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  31);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  +  31);	  return    new    ZipLong(l    +    32);    	compilable	  [FE]  AssertionError  	118	2	replace
1053	[BUG]  [BUGGY]  return  new  ZipLong(l  +  31);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  31);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  31);	  return    new    ZipLong(l    +    32);    	compilable	  [FE]  AssertionError  	118	2	replace
1054	[BUG]  [BUGGY]  new  ZipLong(l  -  TWO_TO_32,  l  -  TWO_TO_32);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  new  ZipLong(l  -  TWO_TO_32,  l  -  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	new  ZipLong(l  -  TWO_TO_32,  l  -  TWO_TO_32);	  return    new    ZipLong(l    -    TWO_TO_32);    new    ZipLong(l    -    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	55	None	replace
1055	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -=  TWO_TO_32;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -=  TWO_TO_32;  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -=  TWO_TO_32;  }	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    -    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	56	None	replace
1056	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)return  new  ZipLong(l  -  TWO_TO_32);  long  l  -=  TWO_TO_32;  }  [CE]  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)return  new  ZipLong(l  -  TWO_TO_32);  long  l  -=  TWO_TO_32;  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)return  new  ZipLong(l  -  TWO_TO_32);  long  l  -=  TWO_TO_32;  }	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    -    TWO_TO_32;    	non-compiled	[CE]  	56	None	replace
1057	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -=  TWO_TO_32;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -=  TWO_TO_32;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -=  TWO_TO_32;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    -    TWO_TO_32;    	non-compiled	[CE]  	56	None	replace
1058	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -=  TWO_TO_32;  }  else  {  return  new  ZipLong(l);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -=  TWO_TO_32;  }  else  {  return  new  ZipLong(l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -=  TWO_TO_32;  }  else  {  return  new  ZipLong(l);  }	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    -    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	56	None	replace
1059	[BUG]  [BUGGY]  return  unixTimeToZipLong(l);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    unixTimeToZipLong(l);    if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  unreachable  statement	83	None	add
1060	[BUG]  [BUGGY]  return  unixTimeToZipLong(l);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    unixTimeToZipLong(l);    if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  unreachable  statement	83	None	add
1061	[BUG]  [BUGGY]  return  unixTimeToZipLong(l);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  unixTimeToZipLong(l);  }  [CE]  unreachable  statement  [FE]        StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  unixTimeToZipLong(l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    unixTimeToZipLong(l);    if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  unixTimeToZipLong(l);  }	  	non-compiled	[CE]  unreachable  statement	83	None	add
1062	[BUG]  [BUGGY]  return  unixTimeToZipLong(l);  if(l  <  =  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  unixTimeToZipLong(l);  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l);  if(l  <  =  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  unixTimeToZipLong(l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    unixTimeToZipLong(l);    if(l  <  =  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  unixTimeToZipLong(l);  }	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
1063	[BUG]  [BUGGY]  return  unixTimeToZipLong(l);  if(l  <  TWO_TO_32)  {  return  unixTimeToZipLong(l);  }  [CE]  unreachable  statement  [FE]            StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l);  if(l  <  TWO_TO_32)  {  return  unixTimeToZipLong(l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    unixTimeToZipLong(l);    if(l  <  TWO_TO_32)  {  return  unixTimeToZipLong(l);  }	  	non-compiled	[CE]  unreachable  statement	83	None	add
1064	[BUG]  [BUGGY]  return  unixTimeToZipLong(l);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  unreachable  statement  [FE]              StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    unixTimeToZipLong(l);    if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  unreachable  statement	83	None	add
1065	[BUG]  [BUGGY]  return  new  ZipLong(l  +  32);  return  new  ZipLong(l  +  32);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  32);  return  new  ZipLong(l  +  32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    32);    return  new  ZipLong(l  +  32);	  	non-compiled	[CE]  unreachable  statement	117	None	add
1066	[BUG]  [BUGGY]  return  new  ZipLong(l  +  32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    32);    if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	117	None	add
1067	[BUG]  [BUGGY]  return  new  ZipLong(l  +  32);  if(l  <  =  32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  32);  if(l  <  =  32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    32);    if(l  <  =  32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
1068	[BUG]  [BUGGY]  return  new  ZipLong(l  +  32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    32);    if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	117	None	add
1069	[BUG]  [BUGGY]  return  new  ZipLong(l  +  32);  if(l  <  =  32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  32);  if(l  <  =  32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    32);    if(l  <  =  32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
1070	[BUG]  [BUGGY]  return  new  ZipLong(l  +  32);  if(l  <  =  32)  {  return  new  ZipLong(l  +  32);  }  else  {  return  new  ZipLong(l  +  32);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  32);  if(l  <  =  32)  {  return  new  ZipLong(l  +  32);  }  else  {  return  new  ZipLong(l  +  32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    32);    if(l  <  =  32)  {  return  new  ZipLong(l  +  32);  }  else  {  return  new  ZipLong(l  +  32);  }	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
1071	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  long  l  +=  TWO_TO_32;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  long  l  +=  TWO_TO_32;  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  long  l  +=  TWO_TO_32;  }	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    +    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	48	None	replace
1072	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  long  l  +=  TWO_TO_32;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  long  l  +=  TWO_TO_32;  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  long  l  +=  TWO_TO_32;  }	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    +    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	48	None	replace
1073	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  long  l  +  TWO_TO_32;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  long  l  +  TWO_TO_32;  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  long  l  +  TWO_TO_32;  }	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    +    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	48	None	replace
1074	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  long  l  +=  TWO_TO_32;  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  long  l  +=  TWO_TO_32;  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  long  l  +=  TWO_TO_32;  }  else  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    +    TWO_TO_32;    	non-compiled	[CE]  	48	None	replace
1075	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  long  l  +=  TWO_TO_32;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  long  l  +=  TWO_TO_32;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  TWO_TO_32);  long  l  +=  TWO_TO_32;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    +    TWO_TO_32;    	non-compiled	[CE]  	48	None	replace
1076	[BUG]  [BUGGY]  return  new  ZipLong(unixTime  +  1,  l);  [CE]  cannot  find  symbol  unixTime  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTime  +  1,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTime  +  1,  l);	  return    new    ZipLong(tWO_TO_32    +    1,    l);    	non-compiled	[CE]  cannot  find  symbol  unixTime	90	None	replace
1077	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  X5455Timestamp.TWO_TO_32);  [CE]  cannot  find  symbol  X5455Timestamp  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  X5455Timestamp.TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  X5455Timestamp.TWO_TO_32);	  return    new    ZipLong(l    +    1,    X5455Timestamp.DEFAULT_TIME_BIT);    	non-compiled	[CE]  cannot  find  symbol  X5455Timestamp	153	None	replace
1078	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  X5455Timestamp.CENTER_TIME_BIT);  [CE]  cannot  find  symbol  X5455Timestamp  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  X5455Timestamp.CENTER_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  X5455Timestamp.CENTER_TIME_BIT);	  return    new    ZipLong(l    +    1,    X5455Timestamp.DEFAULT_TIME_BIT);    	non-compiled	[CE]  cannot  find  symbol  X5455Timestamp	153	None	replace
1079	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l  +  1,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l  +  1,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32,  l  +  1,  l);	  return    new    ZipLong(l    -    TWO_TO_32,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)	76	None	replace
1080	[BUG]  [BUGGY]  return  new  ZipLong(l  +  18);  long  l  =  unixTimeToZipLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  18);  long  l  =  unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  18);  long  l  =  unixTimeToZipLong(l);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTimeToZipLong(l);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	108	None	replace
1081	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l);  long  l  =  unixTimeToZipLong(l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l);  long  l  =  unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32,  l);  long  l  =  unixTimeToZipLong(l);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTimeToZipLong(l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	108	None	replace
1082	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  =  unixTimeToZipLong(l,  l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  =  unixTimeToZipLong(l,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32);  long  l  =  unixTimeToZipLong(l,  l);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTimeToZipLong(l);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	108	None	replace
1083	[BUG]  [BUGGY]  triesToZipLong(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  triesToZipLong(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	triesToZipLong(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	86	None	replace
1084	[BUG]  [BUGGY]  aughtInvalidArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  [CE]  cannot  find  symbol  [FE]                                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  aughtInvalidArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	aughtInvalidArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
1085	[BUG]  [BUGGY]  triesToZipLong(l,  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  triesToZipLong(l,  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	triesToZipLong(l,  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	86	None	replace
1086	[BUG]  [BUGGY]  aughtInvalidZipException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  [CE]  cannot  find  symbol  [FE]                                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  aughtInvalidZipException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	aughtInvalidZipException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
1087	[BUG]  [BUGGY]  aughtInvalidZip( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  [CE]  cannot  find  symbol  [FE]                                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  aughtInvalidZip( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	aughtInvalidZip( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
1088	[BUG]  [BUGGY]  return  new  ZipLong(l  -  2);  ((  ZipLong)l).longValue();  return  new  ZipLong(l  -  2);  [CE]  inconvertible  types  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  2);  ((  ZipLong)l).longValue();  return  new  ZipLong(l  -  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    2);    ((  ZipLong)l).longValue();  return  new  ZipLong(l  -  2);	  	non-compiled	[CE]  inconvertible  types	79	None	add
1089	[BUG]  [BUGGY]  return  new  ZipLong(l  -  2);  long  l  =  getTime().longValue();  return  new  ZipLong(l  -  2);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  2);  long  l  =  getTime().longValue();  return  new  ZipLong(l  -  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    2);    long  l  =  getTime().longValue();  return  new  ZipLong(l  -  2);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	79	None	add
1090	[BUG]  [BUGGY]  return  new  ZipLong(l  -  2);  return  new  ZipLong(l  -  2);  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  2);  return  new  ZipLong(l  -  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    2);    return  new  ZipLong(l  -  2);	  	non-compiled	[CE]  unreachable  statement	79	None	add
1091	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  l,  unixTime.intValue());  [CE]  cannot  find  symbol  unixTime  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  l,  unixTime.intValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  l,  unixTime.intValue());	  return    new    ZipLong(l    +    1,    l.intValue());    	non-compiled	[CE]  cannot  find  symbol  unixTime	152	None	replace
1092	[BUG]  [BUGGY]  return  new  ZipLong(two  +  1,  l.intValue());  [CE]  cannot  find  symbol  two  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two  +  1,  l.intValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two  +  1,  l.intValue());	  return    new    ZipLong(l    +    1,    l.intValue());    	non-compiled	[CE]  cannot  find  symbol  two	152	None	replace
1093	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  return  new  ZipLong(l  /  TWO_TO_32);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  return  new  ZipLong(l  /  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    TWO_TO_32);    return  new  ZipLong(l  /  TWO_TO_32);	  	non-compiled	[CE]  unreachable  statement	30	None	add
1094	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  /  TWO_TO_32);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  /  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    TWO_TO_32);    if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  /  TWO_TO_32);  }	  	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	30	None	add
1095	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  /  TWO_TO_32);  }  else  {  return  new  ZipLong(l  /  TWO_TO_32);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  /  TWO_TO_32);  }  else  {  return  new  ZipLong(l  /  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    TWO_TO_32);    if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  /  TWO_TO_32);  }  else  {  return  new  ZipLong(l  /  TWO_TO_32);  }	  	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	30	None	add
1096	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  ((  ZipLong)l  /  TWO_TO_32).unixTime  =  new  ZipLong(l  /  TWO_TO_32);  [CE]  inconvertible  types  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  ((  ZipLong)l  /  TWO_TO_32).unixTime  =  new  ZipLong(l  /  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    TWO_TO_32);    ((  ZipLong)l  /  TWO_TO_32).unixTime  =  new  ZipLong(l  /  TWO_TO_32);	  	non-compiled	[CE]  inconvertible  types	30	None	add
1097	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  ((  ZipLong)l  /  TWO_TO_32).setLong(l  /  TWO_TO_32);  [CE]  inconvertible  types  [FE]            AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  ((  ZipLong)l  /  TWO_TO_32).setLong(l  /  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    TWO_TO_32);    ((  ZipLong)l  /  TWO_TO_32).setLong(l  /  TWO_TO_32);	  	non-compiled	[CE]  inconvertible  types	30	None	add
1098	[BUG]  [BUGGY]  long  l  =  unixTimeToZipLong(l  +  3);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  unixTimeToZipLong(l  +  3);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  unixTimeToZipLong(l  +  3);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTimeToZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	109	None	replace
1099	[BUG]  [BUGGY]  long  l  =  unixTimeToZipLong(l  +  8);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  l  =  unixTimeToZipLong(l  +  8);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  l  =  unixTimeToZipLong(l  +  8);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTimeToZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	109	None	replace
1100	[BUG]  [BUGGY]  return  Long.valueOf(l,  X5455Timestamp.DEFAULT_TIME_BIT);  [CE]  cannot  find  symbol  X5455Timestamp  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  Long.valueOf(l,  X5455Timestamp.DEFAULT_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  Long.valueOf(l,  X5455Timestamp.DEFAULT_TIME_BIT);	  return    Long.valueOf(l);    	non-compiled	[CE]  cannot  find  symbol  X5455Timestamp	116	None	replace
1101	[BUG]  [BUGGY]  return  Long.valueOf(l,  X5455_Timestamp.DEFAULT_TIME_BIT);  [CE]  cannot  find  symbol  X5455_Timestamp  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  Long.valueOf(l,  X5455_Timestamp.DEFAULT_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  Long.valueOf(l,  X5455_Timestamp.DEFAULT_TIME_BIT);	  return    Long.valueOf(l);    	non-compiled	[CE]  cannot  find  symbol  X5455_Timestamp	116	None	replace
1102	[BUG]  [BUGGY]  return  new  ZipLong(twoToZipLong,  l);  [CE]  cannot  find  symbol  twoToZipLong  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(twoToZipLong,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(twoToZipLong,  l);	  return    new    ZipLong(unixTimeToZipLong,    l);    	non-compiled	[CE]  cannot  find  symbol  twoToZipLong	5	None	replace
1103	[BUG]  [BUGGY]  return  new  ZipLong(twoFractionTime,  l);  [CE]  cannot  find  symbol  twoFractionTime  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(twoFractionTime,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(twoFractionTime,  l);	  return    new    ZipLong(unixTimeToZipLong,    l);    	non-compiled	[CE]  cannot  find  symbol  twoFractionTime	5	None	replace
1104	[BUG]  [BUGGY]  if(bit0_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  cannot  find  symbol  bit0_accessTimePresent  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit0_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol  bit0_accessTimePresent	142	None	replace
1105	[BUG]  [BUGGY]  mutableTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  not  a  statement  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  mutableTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	mutableTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  not  a  statement	142	None	replace
1106	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  return  new  ZipLong(l  -  TWO_TO_32  +  1);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  return  new  ZipLong(l  -  TWO_TO_32  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32    +    1);    return  new  ZipLong(l  -  TWO_TO_32  +  1);	  	non-compiled	[CE]  unreachable  statement	77	None	add
1107	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  ((  ZipLong)l).longValue();  [CE]  inconvertible  types  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  ((  ZipLong)l).longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32    +    1);    ((  ZipLong)l).longValue();	  	non-compiled	[CE]  inconvertible  types	77	None	add
1108	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  long  l  =  System.currentTimeMillis();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  long  l  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32    +    1);    long  l  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	77	None	add
1109	[BUG]  [BUGGY]  aughtInvalidArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  aughtInvalidArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	aughtInvalidArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
1110	[BUG]  [BUGGY]  triesToZipLong(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: ",  +  l);  }  [CE]  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  triesToZipLong(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: ",  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	triesToZipLong(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: ",  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	81	None	replace
1111	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  this.accessTime,  l);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  this.accessTime,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  this.accessTime,  l);	  return    new    ZipLong(l    +    1,    unixTime,    l);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	91	None	replace
1112	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  l);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  l);	  return    new    ZipLong(unixTimeToZipLong(l);    	non-compiled	[CE]  ')'  expected	125	None	replace
1113	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l  +  32));  [CE]  no  suitable  constructor  found  for  ZipLong(ZipLong)  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l  +  32));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l  +  32));	  return    new    ZipLong(unixTimeToZipLong(l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(ZipLong)	125	None	replace
1114	[BUG]  [BUGGY]  return  new  ZipLong(l  +  18);  long  l  =  unixTime.longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  18);  long  l  =  unixTime.longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  18);  long  l  =  unixTime.longValue();	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTime.longValue();    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	52	None	replace
1115	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  unixTime.longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  unixTime.longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1);  long  l  =  unixTime.longValue();	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    unixTime.longValue();    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	52	None	replace
1116	[BUG]  [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  unixTimeToZipLong(l);  }  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  unixTimeToZipLong(l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  unixTimeToZipLong(l);  }	  return    new    ZipLong(TWO_TO_32);    new    ZipLong(TWO_TO_32);    	non-compiled	[CE]  missing  return  statement	10	None	replace
1117	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  unixTimeToZipLong(l);  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  unixTimeToZipLong(l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  unixTimeToZipLong(l);  }	  return    new    ZipLong(TWO_TO_32);    new    ZipLong(TWO_TO_32);    	non-compiled	[CE]  missing  return  statement	10	None	replace
1118	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  unixTime);  [CE]  cannot  find  symbol  unixTime  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  unixTime);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32,  unixTime);	  return    new    ZipLong(l    +    TWO_TO_32,    l);    	non-compiled	[CE]  cannot  find  symbol  unixTime	27	None	replace
1119	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l  +  1);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32,  l  +  1);	  return    new    ZipLong(l    +    TWO_TO_32,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	27	None	replace
1120	[BUG]  [BUGGY]  return  new  ZipLong(l  +  2);  return  new  ZipLong(l  +  2);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  2);  return  new  ZipLong(l  +  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    2);    return  new  ZipLong(l  +  2);	  	non-compiled	[CE]  unreachable  statement	32	None	add
1121	[BUG]  [BUGGY]  return  new  ZipLong(l  +  2);  long  l  =  getTime().longValue();  return  new  ZipLong(l  +  2);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  2);  long  l  =  getTime().longValue();  return  new  ZipLong(l  +  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    2);    long  l  =  getTime().longValue();  return  new  ZipLong(l  +  2);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	32	None	add
1122	[BUG]  [BUGGY]  return  new  ZipLong(l  +  2);  ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  2);  [CE]  inconvertible  types  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  2);  ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    2);    ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  2);	  	non-compiled	[CE]  inconvertible  types	32	None	add
1123	[BUG]  [BUGGY]  return  new  ZipLong(l  +  2);  long  l  =  getTime(l);  return  new  ZipLong(l  +  2);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  2);  long  l  =  getTime(l);  return  new  ZipLong(l  +  2);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    2);    long  l  =  getTime(l);  return  new  ZipLong(l  +  2);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	32	None	add
1124	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  unixTime);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  unixTime);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  unixTime);	  return    new    ZipLong(tWO_TO_32    +    l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	19	None	replace
1125	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  /  l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  /  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  /  l);	  return    new    ZipLong(tWO_TO_32    +    l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	19	None	replace
1126	[BUG]  [BUGGY]  return  new  ZipLong(unixTime  +  l);  [CE]  cannot  find  symbol  unixTime  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTime  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTime  +  l);	  return    new    ZipLong(tWO_TO_32    +    l);    	non-compiled	[CE]  cannot  find  symbol  unixTime	19	None	replace
1127	[BUG]  [BUGGY]  parent  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  >  expected  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  parent  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	parent  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  >  expected	82	None	replace
1128	[BUG]  [BUGGY]  oricaror(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  oricaror(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	oricaror(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	82	None	replace
1129	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  +  1);  long  l  =  unixTimeToZipLong(l  +  1);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  +  1);  long  l  =  unixTimeToZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32,  l  +  1);  long  l  =  unixTimeToZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    long    l    =    unixTimeToZipLong(l    +    1);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	69	None	replace
1130	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1);  long  l  =  unixTimeToZipLong(l  +  1);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1);  long  l  =  unixTimeToZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  1);  long  l  =  unixTimeToZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    long    l    =    unixTimeToZipLong(l    +    1);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	69	None	replace
1131	[BUG]  [BUGGY]  int  l  =  unixTimeToZipLong(l  +  1);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  int  l  =  unixTimeToZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	int  l  =  unixTimeToZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    long    l    =    unixTimeToZipLong(l    +    1);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	69	None	replace
1132	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  +  1);  long  l  =  unixTimeToZipLong(l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  +  1);  long  l  =  unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32,  l  +  1);  long  l  =  unixTimeToZipLong(l);	  return    new    ZipLong(l    +    1);    long    l    =    unixTimeToZipLong(l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	70	None	replace
1133	[BUG]  [BUGGY]  l  =  unixTimeToZipLong(l);  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  l  =  unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	l  =  unixTimeToZipLong(l);	  return    new    ZipLong(l    +    1);    long    l    =    unixTimeToZipLong(l);    	non-compiled	[CE]  incompatible  types	70	None	replace
1134	[BUG]  [BUGGY]  int  l  =  unixTimeToZipLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  int  l  =  unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	int  l  =  unixTimeToZipLong(l);	  return    new    ZipLong(l    +    1);    long    l    =    unixTimeToZipLong(l);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	70	None	replace
1135	[BUG]  [BUGGY]  new  ZipLong(l  +  32);  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  new  ZipLong(l  +  32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	new  ZipLong(l  +  32);	  return    new    ZipLong(l    +    TWO_TO_32);    new    ZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  missing  return  statement	47	None	replace
1136	[BUG]  [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  >  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  missing  return  statement	137	None	replace
1137	[BUG]  [BUGGY]  if(l  <  =  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  =  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  =  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
1138	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  return  new  ZipLong(l  +  2);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  return  new  ZipLong(l  +  2);  }	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    return    new    ZipLong(l    +    1);    	compilable	  [FE]  AssertionError  	137	2	replace
1139	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  return  new  ZipLong(l  +  2);  }  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  return  new  ZipLong(l  +  2);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  return  new  ZipLong(l  +  2);  }	  return    new    ZipLong(l    +    1);    ((    ZipLong)l).longValue();    return    new    ZipLong(l    +    1);    	compilable	  [FE]  AssertionError  	137	2	replace
1140	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }  else  {  return  new  ZipLong(l  -  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }  else  {  return  new  ZipLong(l  -  TWO_TO_32);  }	  return    new    ZipLong(l    -    TWO_TO_32);    return    new    ZipLong(l    -    TWO_TO_32);    	compilable	  [FE]  AssertionError  	128	1	replace
1141	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }  else  {  return  new  ZipLong(l  -  TWO_TO_32);  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }  else  {  return  new  ZipLong(l  -  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  }  else  {  return  new  ZipLong(l  -  TWO_TO_32);  }	  return    new    ZipLong(l    -    TWO_TO_32);    return    new    ZipLong(l    -    TWO_TO_32);    	compilable	  [FE]  AssertionError  	128	1	replace
1142	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  bit1_accessTimePresent);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit1_accessTimePresent  cannot  be  referenced  from  a  static  context  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  bit1_accessTimePresent);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32,  bit1_accessTimePresent);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  non-static  variable  bit1_accessTimePresent  cannot  be  referenced  from  a  static  context	156	None	replace
1143	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_TWO_TO_32);  [CE]  cannot  find  symbol  X5455_TWO_TO_32  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_TWO_TO_32);	  return    new    ZipLong(unixTimeToZipLong(l),    X5455_ExtendedTimestamp);    	non-compiled	[CE]  cannot  find  symbol  X5455_TWO_TO_32	43	None	replace
1144	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_SecondTimestamp);  [CE]  cannot  find  symbol  X5455_SecondTimestamp  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_SecondTimestamp);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_SecondTimestamp);	  return    new    ZipLong(unixTimeToZipLong(l),    X5455_ExtendedTimestamp);    	non-compiled	[CE]  cannot  find  symbol  X5455_SecondTimestamp	43	None	replace
1145	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.SHORT));  [CE]  cannot  find  symbol  SHORT  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.SHORT));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.SHORT));	  return    new    ZipLong(unixTimeToZipLong(l,    X5455_ExtendedTimestamp.UTF8));    	non-compiled	[CE]  cannot  find  symbol  SHORT	121	None	replace
1146	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  +  1  +  TWO_TO_32);	  return    new    ZipLong(l    +    10    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	145	2	replace
1147	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1  +  TWO_TO_32);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1  +  TWO_TO_32);	  return    new    ZipLong(l    +    10    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	145	2	replace
1148	[BUG]  [BUGGY]  return  new  ZipLong(l,  X5455Timestamp.DEFAULT_TIME_BIT);  [CE]  cannot  find  symbol  X5455Timestamp  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  X5455Timestamp.DEFAULT_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  X5455Timestamp.DEFAULT_TIME_BIT);	  return    new    ZipLong(l,    l);    	non-compiled	[CE]  cannot  find  symbol  X5455Timestamp	3	None	replace
1149	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  unixTime,  TWO_TO_32);  [CE]  cannot  find  symbol  unixTime  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  unixTime,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  unixTime,  TWO_TO_32);	  return    new    ZipLong(l    +    1,    TWO_TO_32);    	non-compiled	[CE]  cannot  find  symbol  unixTime	94	None	replace
1150	[BUG]  [BUGGY]  return  new  ZipLong(l  /  2,  TWO_TO_32);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  2,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  /  2,  TWO_TO_32);	  return    new    ZipLong(l    +    1,    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	94	None	replace
1151	[BUG]  [BUGGY]  return  new  ZipLong(l  /  2,  l  +  1,  TWO_TO_32);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  2,  l  +  1,  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  /  2,  l  +  1,  TWO_TO_32);	  return    new    ZipLong(l    +    1,    TWO_TO_32,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)	89	None	replace
1152	[BUG]  [BUGGY]  return  new  ZipLong(two_to_32  +  1,  l,  l);  [CE]  cannot  find  symbol  two_to_32  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_to_32  +  1,  l,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_to_32  +  1,  l,  l);	  return    new    ZipLong(l    +    1,    TWO_TO_32,    l);    	non-compiled	[CE]  cannot  find  symbol  two_to_32	89	None	replace
1153	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  l,  ACCESS_TIME_BIT);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long,byte)  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  l,  ACCESS_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  l,  ACCESS_TIME_BIT);	  return    new    ZipLong(l    +    1,    TWO_TO_32,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long,byte)	89	None	replace
1154	[BUG]  [BUGGY]  int  l  =  getTime().longValue();  return  new  ZipLong(l  +  1);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  int  l  =  getTime().longValue();  return  new  ZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	int  l  =  getTime().longValue();  return  new  ZipLong(l  +  1);	  return    new    ZipLong(l    +    1);    long    l    =    getTime().longValue();    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	135	None	replace
1155	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  *  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  -  TWO_TO_32  *  1);	  return    new    ZipLong(l    -    TWO_TO_32    +    1);    	compilable	  [FE]  AssertionError  	78	1	replace
1156	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  *  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  *  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32  *  1);	  return    new    ZipLong(l    -    TWO_TO_32    +    1);    	compilable	  [FE]  AssertionError  	78	1	replace
1157	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  unixTimeToZipLong(l  +  1);	  return    unixTimeToZipLong(l);    	compilable	  [FE]  StackOverflowError  	84	4	replace
1158	[BUG]  [BUGGY]  return  unixTimeToZipLong(l  +  1);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  unixTimeToZipLong(l  +  1);	  return    unixTimeToZipLong(l);    	compilable	  [FE]  StackOverflowError  	84	4	replace
1159	[BUG]  [BUGGY]  return  unixTimeToZipLong(l  +  1,  l);  [CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l  +  1,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  unixTimeToZipLong(l  +  1,  l);	  return    unixTimeToZipLong(l);    	non-compiled	[CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;	84	None	replace
1160	[BUG]  [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(tWO_TO_32);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(tWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_modifyTimePresent)  {  return  new  ZipLong(tWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	148	None	replace
1161	[BUG]  [BUGGY]  long  bit0_modifyTimePresent  =  unixTimeToZipLong(l);  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  long  bit0_modifyTimePresent  =  unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	long  bit0_modifyTimePresent  =  unixTimeToZipLong(l);	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  incompatible  types	148	None	replace
1162	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  ';'  expected	100	None	replace
1163	[BUG]  [BUGGY]  return  new  ZipLong(l);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  unreachable  statement  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "Timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  unreachable  statement	16	None	replace
1164	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.NUMBER_INT,  l));  [CE]  cannot  find  symbol  NUMBER_INT  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.NUMBER_INT,  l));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.NUMBER_INT,  l));	  return    new    ZipLong(unixTimeToZipLong(l,    TWO_TO_32));    	non-compiled	[CE]  cannot  find  symbol  NUMBER_INT	20	None	replace
1165	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  +  1);  long  l  =  Long.parseLong(l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  +  1);  long  l  =  Long.parseLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32,  l  +  1);  long  l  =  Long.parseLong(l);	  return    new    ZipLong(l    +    1);    long    l    =    Long.parseLong(l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	71	None	replace
1166	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1,  l);  long  l  =  Long.parseLong(l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1,  l);  long  l  =  Long.parseLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  1,  l);  long  l  =  Long.parseLong(l);	  return    new    ZipLong(l    +    1);    long    l    =    Long.parseLong(l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	71	None	replace
1167	[BUG]  [BUGGY]  aughtInvalidZipException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [CE]  cannot  find  symbol  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  aughtInvalidZipException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	aughtInvalidZipException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);	  if(l    <    =    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
1168	[BUG]  [BUGGY]  aughtInvalidZip( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [CE]  cannot  find  symbol  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  aughtInvalidZip( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	aughtInvalidZip( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);	  if(l    <    =    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
1169	[BUG]  [BUGGY]  aughtInvalidZip(l,  X5455Timestamp.class)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  aughtInvalidZip(l,  X5455Timestamp.class)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	aughtInvalidZip(l,  X5455Timestamp.class)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    =    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	141	None	replace
1170	[BUG]  [BUGGY]  aughtInvalidZip(l,  X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [CE]  [FE]                                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  aughtInvalidZip(l,  X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	aughtInvalidZip(l,  X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);	  if(l    <    =    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	141	None	replace
1171	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  return(ZipLong)unixTimeToZipLong(l);  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  return(ZipLong)unixTimeToZipLong(l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l);    return(ZipLong)unixTimeToZipLong(l);	  	non-compiled	[CE]  unreachable  statement	112	None	add
1172	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  if(unixTimeToZipLong(l)  ==  ZipLong.NaN)  {  return(ZipLong)unixTimeToZipLong(l);  }  [CE]  cannot  find  symbol  NaN  [FE]      StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  if(unixTimeToZipLong(l)  ==  ZipLong.NaN)  {  return(ZipLong)unixTimeToZipLong(l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l);    if(unixTimeToZipLong(l)  ==  ZipLong.NaN)  {  return(ZipLong)unixTimeToZipLong(l);  }	  	non-compiled	[CE]  cannot  find  symbol  NaN	112	None	add
1173	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  if(unixTimeToZipLong(l)  ==  null)  {  return(ZipLong)unixTimeToZipLong(l);  }  [CE]  unreachable  statement  [FE]        StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  if(unixTimeToZipLong(l)  ==  null)  {  return(ZipLong)unixTimeToZipLong(l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l);    if(unixTimeToZipLong(l)  ==  null)  {  return(ZipLong)unixTimeToZipLong(l);  }	  	non-compiled	[CE]  unreachable  statement	112	None	add
1174	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  if(unixTimeToZipLong(l)  ==  ZipLong.DEFAULT)  {  return(ZipLong)unixTimeToZipLong(l);  }  [CE]  cannot  find  symbol  DEFAULT  [FE]          StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  if(unixTimeToZipLong(l)  ==  ZipLong.DEFAULT)  {  return(ZipLong)unixTimeToZipLong(l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l);    if(unixTimeToZipLong(l)  ==  ZipLong.DEFAULT)  {  return(ZipLong)unixTimeToZipLong(l);  }	  	non-compiled	[CE]  cannot  find  symbol  DEFAULT	112	None	add
1175	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  if(unixTimeToZipLong(l)  ==  ZipShort.NaN)  {  return(ZipLong)unixTimeToZipLong(l);  }  [CE]  cannot  find  symbol  NaN  [FE]            StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  if(unixTimeToZipLong(l)  ==  ZipShort.NaN)  {  return(ZipLong)unixTimeToZipLong(l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l);    if(unixTimeToZipLong(l)  ==  ZipShort.NaN)  {  return(ZipLong)unixTimeToZipLong(l);  }	  	non-compiled	[CE]  cannot  find  symbol  NaN	112	None	add
1176	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  if(unixTimeToZipLong(l)!=  null)  {  return(ZipLong)unixTimeToZipLong(l);  }  [CE]  unreachable  statement  [FE]              StackOverflowError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  if(unixTimeToZipLong(l)!=  null)  {  return(ZipLong)unixTimeToZipLong(l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l);    if(unixTimeToZipLong(l)!=  null)  {  return(ZipLong)unixTimeToZipLong(l);  }	  	non-compiled	[CE]  unreachable  statement	112	None	add
1177	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.NUMBER_INT));  [CE]  cannot  find  symbol  NUMBER_INT  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.NUMBER_INT));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.NUMBER_INT));	  return    new    ZipLong(unixTimeToZipLong(l,    l));    	non-compiled	[CE]  cannot  find  symbol  NUMBER_INT	45	None	replace
1178	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  l),  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);  [CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  l),  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  l),  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);	  return    new    ZipLong(unixTimeToZipLong(l,    l));    	non-compiled	[CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;	45	None	replace
1179	[BUG]  [BUGGY]  return  new  ZipLong(two_to_32  +  1);  [CE]  cannot  find  symbol  two_to_32  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(two_to_32  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_to_32  +  1);	  return    new    ZipLong(tWO_TO_32    +    1);    	non-compiled	[CE]  cannot  find  symbol  two_to_32	36	None	replace
1180	[BUG]  [BUGGY]  return  new  ZipLong(TimeZipLong.valueOf(l));  [CE]  cannot  find  symbol  TimeZipLong  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TimeZipLong.valueOf(l));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(TimeZipLong.valueOf(l));	  return    new    ZipLong(tWO);    	non-compiled	[CE]  cannot  find  symbol  TimeZipLong	103	None	replace
1181	[BUG]  [BUGGY]  return  new  ZipLong(l,  getTime());  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  getTime());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  getTime());	  return    new    ZipLong(l.longValue());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
1182	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32.longValue()  +  1);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(tWO_TO_32.longValue()  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32.longValue()  +  1);	  return    new    ZipLong(tWO_TO_32.longValue());    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	25	None	replace
1183	[BUG]  [BUGGY]  return  new  ZipLong(l);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  unreachable  statement  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  unreachable  statement	15	None	replace
1184	[BUG]  [BUGGY]  while(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  missing  return  statement	15	None	replace
1185	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  bit1_accessTimePresent);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit1_accessTimePresent  cannot  be  referenced  from  a  static  context  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  bit1_accessTimePresent);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32,  bit1_accessTimePresent);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  non-static  variable  bit1_accessTimePresent  cannot  be  referenced  from  a  static  context	154	None	replace
1186	[BUG]  [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32;  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32;  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32;  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    else    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  ')'  expected	158	None	replace
1187	[BUG]  [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32;  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32;  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    else    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  ')'  expected	158	None	replace
1188	[BUG]  [BUGGY]  return  new  ZipLong(l.longValue()  -  1);  [CE]  long  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l.longValue()  -  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l.longValue()  -  1);	  return    new    ZipLong(tWO_TO_32    -    1);    	non-compiled	[CE]  long  cannot  be  dereferenced	143	None	replace
1189	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l);  long  l  =  Long.parseLong(tWO_TO_32);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l);  long  l  =  Long.parseLong(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32,  l);  long  l  =  Long.parseLong(tWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    Long.parseLong(tWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	51	None	replace
1190	[BUG]  [BUGGY]  int  l  =  Long.parseLong(tWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  int  l  =  Long.parseLong(tWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	int  l  =  Long.parseLong(tWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    Long.parseLong(tWO_TO_32);    	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	51	None	replace
1191	[BUG]  [BUGGY]  mutableTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  mutableTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	mutableTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  not  a  statement	139	None	replace
1192	[BUG]  [BUGGY]  if(bit0_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  cannot  find  symbol  bit0_accessTimePresent  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit0_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_accessTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol  bit0_accessTimePresent	139	None	replace
1193	[BUG]  [BUGGY]  return  new  ZipLong(l  +  18);  return  new  ZipLong(l  +  18);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  18);  return  new  ZipLong(l  +  18);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    18);    return  new  ZipLong(l  +  18);	  	non-compiled	[CE]  unreachable  statement	34	None	add
1194	[BUG]  [BUGGY]  return  new  ZipLong(l  +  18);  ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  18);  [CE]  inconvertible  types  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  18);  ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  18);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    18);    ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  18);	  	non-compiled	[CE]  inconvertible  types	34	None	add
1195	[BUG]  [BUGGY]  return  new  ZipLong(l  +  18);  ((  ZipLong)l  +  18).unixTimeToZipLong(l  +  18);  [CE]  inconvertible  types  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  18);  ((  ZipLong)l  +  18).unixTimeToZipLong(l  +  18);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    18);    ((  ZipLong)l  +  18).unixTimeToZipLong(l  +  18);	  	non-compiled	[CE]  inconvertible  types	34	None	add
1196	[BUG]  [BUGGY]  return  new  ZipLong(l  +  18);  ((  ZipLong)l).setLong(l  +  18);  [CE]  inconvertible  types  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  18);  ((  ZipLong)l).setLong(l  +  18);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    18);    ((  ZipLong)l).setLong(l  +  18);	  	non-compiled	[CE]  inconvertible  types	34	None	add
1197	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  two_TO_32));  [CE]  cannot  find  symbol  two_TO_32  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  two_TO_32));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  two_TO_32));	  return    new    ZipLong(unixTimeToZipLong(tWO_TO_32,    l));    	non-compiled	[CE]  cannot  find  symbol  two_TO_32	44	None	replace
1198	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  two_to_32));  [CE]  cannot  find  symbol  two_to_32  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  two_to_32));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  two_to_32));	  return    new    ZipLong(unixTimeToZipLong(tWO_TO_32,    l));    	non-compiled	[CE]  cannot  find  symbol  two_to_32	44	None	replace
1199	[BUG]  [BUGGY]  if(l  <  =  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  return  new  ZipLong(l  +  1);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  =  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  return  new  ZipLong(l  +  1);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  =  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  return  new  ZipLong(l  +  1);  }	  return    new    ZipLong(l    +    1);    return    new    ZipLong(l    +    1);    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
1200	[BUG]  [BUGGY]  return  new  ZipLong(unixTime,  toZipLong(l));  [CE]  cannot  find  symbol  unixTime  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTime,  toZipLong(l));  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTime,  toZipLong(l));	  return    new    ZipLong(toZipLong(l));    	non-compiled	[CE]  cannot  find  symbol  unixTime	7	None	replace
1201	[BUG]  [BUGGY]  return  new  ZipLong(l);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  unreachable  statement  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  unreachable  statement	17	None	replace
1202	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  this.unixTime);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  1,  this.unixTime);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  this.unixTime);	  return    new    ZipLong(l    +    1,    unixTime);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	106	None	replace
1203	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  return  unixTimeToZipLong(l  +  1);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  return  unixTimeToZipLong(l  +  1);  }	  return    new    ZipLong(l    +    1);    new    ZipLong(l    +    1);    	compilable	  [FE]  AssertionError  	66	2	replace
1204	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  return  unixTimeToZipLong(l  +  1);  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  return  unixTimeToZipLong(l  +  1);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  +  1);  }  else  {  return  unixTimeToZipLong(l  +  1);  }	  return    new    ZipLong(l    +    1);    new    ZipLong(l    +    1);    	compilable	  [FE]  AssertionError  	66	2	replace
1205	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  L  -  TWO_TO_32;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  L  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32,  L  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    L    -    TWO_TO_32;    	non-compiled	[CE]  ')'  expected	62	None	replace
1206	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32)+  1;  L  -  TWO_TO_32;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32)+  1;  L  -  TWO_TO_32;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32)+  1;  L  -  TWO_TO_32;	  return    new    ZipLong(l    -    TWO_TO_32);    L    -    TWO_TO_32;    	non-compiled	[CE]  not  a  statement	62	None	replace
1207	[BUG]  [BUGGY]  if(l  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
1208	[BUG]  [BUGGY]  return  new  ZipLong(l  -  18,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  18,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  18,  l);	  return    new    ZipLong(l    -    1,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	127	None	replace
1209	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32),  getTime().longValue();  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32),  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32),  getTime().longValue();	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    =    getTime().longValue();    	non-compiled	[CE]  ';'  expected	111	None	replace
1210	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32)+  getTime().longValue();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32)+  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32)+  getTime().longValue();	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    =    getTime().longValue();    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
1211	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  long  l  -  TWO_TO_32);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  long  l  -  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  /  TWO_TO_32);  long  l  -  TWO_TO_32);	  return    new    ZipLong(l    -    TWO_TO_32);    long    l    -    TWO_TO_32);    	non-compiled	[CE]  ';'  expected	57	None	replace
1212	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  long  -  TWO_TO_32);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  long  -  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  /  TWO_TO_32);  long  -  TWO_TO_32);	  return    new    ZipLong(l    -    TWO_TO_32);    long    -    TWO_TO_32);    	non-compiled	[CE]  not  a  statement	130	None	replace
1213	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l  =  getTime().longValue();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l  =  getTime().longValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32,  l  =  getTime().longValue();	  return    new    ZipLong(l    +    TWO_TO_32);    long    l    =    getTime().longValue();    	non-compiled	[CE]  ')'  expected	49	None	replace
1214	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  return  new  ZipLong(l  *  TWO_TO_32);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  return  new  ZipLong(l  *  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    *    TWO_TO_32);    return  new  ZipLong(l  *  TWO_TO_32);	  	non-compiled	[CE]  unreachable  statement	28	None	add
1215	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    *    TWO_TO_32);    if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	28	None	add
1216	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  *  TWO_TO_32);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  *  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    *    TWO_TO_32);    if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  *  TWO_TO_32);  }	  	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	28	None	add
1217	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  if(bit0_modifyTimePresent)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  *  TWO_TO_32);  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  if(bit0_modifyTimePresent)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  *  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    *    TWO_TO_32);    if(bit0_modifyTimePresent)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  *  TWO_TO_32);  }	  	non-compiled	[CE]  ';'  expected	28	None	add
1218	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]            AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    *    TWO_TO_32);    if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	28	None	add
1219	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  *  TWO_TO_32);  }  else  {  return  new  ZipLong(l  *  TWO_TO_32);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]              AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  *  TWO_TO_32);  }  else  {  return  new  ZipLong(l  *  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    *    TWO_TO_32);    if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  *  TWO_TO_32);  }  else  {  return  new  ZipLong(l  *  TWO_TO_32);  }	  	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	28	None	add
1220	[BUG]  [BUGGY]  return  new  ZipLong(unixTime,  l  +  1,  l);  [CE]  cannot  find  symbol  unixTime  [FE]                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTime,  l  +  1,  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTime,  l  +  1,  l);	  return    new    ZipLong(tWO_TO_32,    l    +    1,    l);    	non-compiled	[CE]  cannot  find  symbol  unixTime	92	None	replace
1221	[BUG]  [BUGGY]  while(l  <  TWO_TO_32)  {  bit0_modifyTimePresent  =  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32)  {  bit0_modifyTimePresent  =  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32)  {  bit0_modifyTimePresent  =  new  ZipLong(l  +  TWO_TO_32);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	155	None	replace
1222	[BUG]  [BUGGY]  while(l  <  TWO_TO_32)  {  bit0_modifyTimePresent  =  new  ZipLong(l  +  TWO_TO_32);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  while(l  <  TWO_TO_32)  {  bit0_modifyTimePresent  =  new  ZipLong(l  +  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	while(l  <  TWO_TO_32)  {  bit0_modifyTimePresent  =  new  ZipLong(l  +  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    return    new    ZipLong(l    +    TWO_TO_32);    }    	non-compiled	[CE]  ';'  expected	155	None	replace
1223	[BUG]  [BUGGY]  triesToZipLong(l)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  triesToZipLong(l)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	triesToZipLong(l)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "Timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	88	None	replace
1224	[BUG]  [BUGGY]  lendemain(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  lendemain(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	lendemain(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	85	None	replace
1225	[BUG]  [BUGGY]  oricaror(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  oricaror(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	oricaror(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	85	None	replace
1226	[BUG]  [BUGGY]  return  new  ZipLong(l);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	147	None	replace
1227	[BUG]  [BUGGY]  return  unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);  [CE]  cannot  find  symbol  DEFAULT_TIME_BIT  [FE]                              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);	  return    unixTimeToZipLong(l.longValue());    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_TIME_BIT	115	None	replace
1228	[BUG]  [BUGGY]  return  unixTimeToZipLong(l,  this.accessTime.longValue());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  unixTimeToZipLong(l,  this.accessTime.longValue());  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  unixTimeToZipLong(l,  this.accessTime.longValue());	  return    unixTimeToZipLong(l.longValue());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	115	None	replace
1229	[BUG]  [BUGGY]  return  new  ZipLong(l  *  DateTimeConstants.MILLIS_PER_SECOND);  [CE]  cannot  find  symbol  DateTimeConstants  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  *  DateTimeConstants.MILLIS_PER_SECOND);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  DateTimeConstants.MILLIS_PER_SECOND);	  return    new    ZipLong(l    *    TWO_TO_32);    	non-compiled	[CE]  cannot  find  symbol  DateTimeConstants	29	None	replace
1230	[BUG]  [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -  TWO_TO_32;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -  TWO_TO_32;  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  >  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -  TWO_TO_32;  }	  return    new    ZipLong(l    -    TWO_TO_32);    Long    l    -    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	59	None	replace
1231	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -=  TWO_TO_32;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -=  TWO_TO_32;  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -=  TWO_TO_32;  }	  return    new    ZipLong(l    -    TWO_TO_32);    Long    l    -    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	59	None	replace
1232	[BUG]  [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -=  TWO_TO_32;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -=  TWO_TO_32;  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  >  TWO_TO_32)  {  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -=  TWO_TO_32;  }	  return    new    ZipLong(l    -    TWO_TO_32);    Long    l    -    TWO_TO_32;    	non-compiled	[CE]  ';'  expected	59	None	replace
1233	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  Long  l  -  TWO_TO_32);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  Long  l  -  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32,  Long  l  -  TWO_TO_32);	  return    new    ZipLong(l    -    TWO_TO_32);    Long    l    -    TWO_TO_32);    	non-compiled	[CE]  ')'  expected	61	None	replace
1234	[BUG]  [BUGGY]  return  new  ZipLong(l,  X5455_Timestamps);  [CE]  cannot  find  symbol  X5455_Timestamps  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l,  X5455_Timestamps);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  X5455_Timestamps);	  return    new    ZipLong(l,    t);    	non-compiled	[CE]  cannot  find  symbol  X5455_Timestamps	2	None	replace
1235	[BUG]  [BUGGY]  return  new  ZipLong(l  -  1);  ((  ZipLong)l).longValue();  return  new  ZipLong(l  -  1);  [CE]  inconvertible  types  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  1);  ((  ZipLong)l).longValue();  return  new  ZipLong(l  -  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    1);    ((  ZipLong)l).longValue();  return  new  ZipLong(l  -  1);	  	non-compiled	[CE]  inconvertible  types	74	None	add
1236	[BUG]  [BUGGY]  return  new  ZipLong(l  -  1);  long  l  =  getTime().longValue();  return  new  ZipLong(l  -  1);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  1);  long  l  =  getTime().longValue();  return  new  ZipLong(l  -  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    1);    long  l  =  getTime().longValue();  return  new  ZipLong(l  -  1);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	74	None	add
1237	[BUG]  [BUGGY]  return  new  ZipLong(l  -  1);  long  l  =  getTime().getLongValue();  return  new  ZipLong(l  -  1);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  1);  long  l  =  getTime().getLongValue();  return  new  ZipLong(l  -  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    1);    long  l  =  getTime().getLongValue();  return  new  ZipLong(l  -  1);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	74	None	add
1238	[BUG]  [BUGGY]  return  new  ZipLong(l  -  1);  long  l  =  getTime(l);  return  new  ZipLong(l  -  1);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  -  1);  long  l  =  getTime(l);  return  new  ZipLong(l  -  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    1);    long  l  =  getTime(l);  return  new  ZipLong(l  -  1);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	74	None	add
1239	[BUG]  [BUGGY]  if(l  >  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  >  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  >  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    if(bit0_modifyTimePresent)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
1240	[BUG]  [BUGGY]  return  ZipLong.valueOf(l  -  TWO_TO_32);  [CE]  cannot  find  symbol  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  ZipLong.valueOf(l  -  TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  ZipLong.valueOf(l  -  TWO_TO_32);	  return    ZipLong.valueOf(l);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
1241	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  return  new  ZipLong(tWO_TO_32);  }  [CE]  cannot  find  symbol  tWO_TO_32  [FE]        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  return  new  ZipLong(tWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  return  new  ZipLong(tWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    return    new    ZipLong(TWO_TO_32);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	146	None	replace
1242	[BUG]  [BUGGY]  if(l  ==  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  ==  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  ==  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    return    new    ZipLong(TWO_TO_32);    	non-compiled	[CE]  missing  return  statement	146	None	replace
1243	[BUG]  [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  return  new  ZipLong(tWO_TO_32);  }  [CE]  cannot  find  symbol  tWO_TO_32  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  return  new  ZipLong(tWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  >  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  else  {  return  new  ZipLong(tWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    return    new    ZipLong(TWO_TO_32);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	146	None	replace
1244	[BUG]  [BUGGY]  return  new  ZipLong(TimeUtils.currentTimeMillis(),  l);  [CE]  cannot  find  symbol  TimeUtils  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(TimeUtils.currentTimeMillis(),  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(TimeUtils.currentTimeMillis(),  l);	  return    new    ZipLong(tWorst,    l);    	non-compiled	[CE]  cannot  find  symbol  TimeUtils	131	None	replace
1245	[BUG]  [BUGGY]  if(l  <  =  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  =  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  =  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
1246	[BUG]  [BUGGY]  return  new  ZipLong(l);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32    ||    l    >    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  unreachable  statement	12	None	replace
1247	[BUG]  [BUGGY]  return  new  ZipLong(l  /  1);  ((  ZipLong)l  /  1).doubleValue();  [CE]  inconvertible  types  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  1);  ((  ZipLong)l  /  1).doubleValue();  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    1);    ((  ZipLong)l  /  1).doubleValue();	  	non-compiled	[CE]  inconvertible  types	132	None	add
1248	[BUG]  [BUGGY]  return  new  ZipLong(l  /  1);  ZipLong  l  /  1;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  /  1);  ZipLong  l  /  1;  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    /    1);    ZipLong  l  /  1;	  	non-compiled	[CE]  ';'  expected	132	None	add
1249	[BUG]  [BUGGY]  if(l  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO_TO_32);  }	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    else    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
1250	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO_TO  [CE]  [FE]              AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO_TO  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO_TO	  return    new    ZipLong(TWO_TO_32);    if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    fit    in    a    signed    32    bit    integer:   "    +    l);    }    else    {    return    new    ZipLong(TWO_TO_32);    }    	non-compiled	[CE]  	101	None	replace
1251	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10);  return  new  ZipLong(l  +  10);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10);  return  new  ZipLong(l  +  10);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10);    return  new  ZipLong(l  +  10);	  	non-compiled	[CE]  unreachable  statement	122	None	add
1252	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10);  ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  10);  [CE]  inconvertible  types  [FE]      AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10);  ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  10);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10);    ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  10);	  	non-compiled	[CE]  inconvertible  types	122	None	add
1253	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10);  long  l  =  getTime().longValue();  return  new  ZipLong(l  +  10);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]        AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10);  long  l  =  getTime().longValue();  return  new  ZipLong(l  +  10);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10);    long  l  =  getTime().longValue();  return  new  ZipLong(l  +  10);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	122	None	add
1254	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10);  long  l  =  getTime(l);  return  new  ZipLong(l  +  10);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]          AssertionError    [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  10);  long  l  =  getTime(l);  return  new  ZipLong(l  +  10);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    10);    long  l  =  getTime(l);  return  new  ZipLong(l  +  10);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	122	None	add
1255	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.TWO_TO_32);  [CE]  cannot  find  symbol  TWO_TO_32  [FE]                          AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.TWO_TO_32);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.TWO_TO_32);	  return    new    ZipLong(unixTimeToZipLong(l),    X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);    	non-compiled	[CE]  cannot  find  symbol  TWO_TO_32	120	None	replace
1256	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT  +  1);  [CE]  cannot  find  symbol  DEFAULT_TIME_BIT  [FE]                            AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT  +  1);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT  +  1);	  return    new    ZipLong(unixTimeToZipLong(l),    X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_TIME_BIT	120	None	replace
1257	[BUG]  [BUGGY]  return  new  ZipLong(twoToZipLong);  [CE]  cannot  find  symbol  twoToZipLong  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(twoToZipLong);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(twoToZipLong);	  return    new    ZipLong(unixTimeToZipLong);    	non-compiled	[CE]  cannot  find  symbol  twoToZipLong	63	None	replace
1258	[BUG]  [BUGGY]  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]                  AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	159	None	replace
1259	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32)&&  bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32)&&  bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32)&&  bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    match    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	159	None	replace
1260	[BUG]  [BUGGY]  triesToZipLong(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                                    AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  triesToZipLong(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	triesToZipLong(l)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	87	None	replace
1261	[BUG]  [BUGGY]  triesToZipLong(l,  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  [FE]                                      AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  triesToZipLong(l,  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	triesToZipLong(l,  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  	87	None	replace
1262	[BUG]  [BUGGY]  aughtInvalidArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [CE]  cannot  find  symbol  [FE]                                        AssertionError      [CONTEXT]      private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(     "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:       "  +  l);  }      [BUGGY]  aughtInvalidArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  [BUGGY]      }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	aughtInvalidArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);	  if(l    <    TWO_TO_32)    {    throw    new    IllegalArgumentException(   "X5455    timestamps    must    be    in    a    signed    32    bit    integer:   "    +    l);    }    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
