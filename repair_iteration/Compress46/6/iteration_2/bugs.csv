bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32,  l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]            AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(tWO_TO_32,  l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32,  l);	  return    new    ZipLong(two,    l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	14	None	replace
2	[BUG]  [BUGGY]  return  new  ZipLong(l,  t);  [CE]  cannot  find  symbol  t  [FE]              AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l,  t);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  t);	  return    new    ZipLong(two,    l);    	non-compiled	[CE]  cannot  find  symbol  t	14	None	replace
3	[BUG]  [BUGGY]  return  new  ZipLong(l,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]                AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l,  l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  l);	  return    new    ZipLong(two,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	14	None	replace
4	[BUG]  [BUGGY]  return  new  ZipLong(unixTime,  l);  [CE]  cannot  find  symbol  unixTime  [FE]                  AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(unixTime,  l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTime,  l);	  return    new    ZipLong(two,    l);    	non-compiled	[CE]  cannot  find  symbol  unixTime	14	None	replace
5	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong,  l);  [CE]  cannot  find  symbol  unixTimeToZipLong  [FE]                    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(unixTimeToZipLong,  l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong,  l);	  return    new    ZipLong(two,    l);    	non-compiled	[CE]  cannot  find  symbol  unixTimeToZipLong	14	None	replace
6	[BUG]  [BUGGY]  return  new  ZipLong(t,  l);  [CE]  cannot  find  symbol  t  [FE]                      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(t,  l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(t,  l);	  return    new    ZipLong(two,    l);    	non-compiled	[CE]  cannot  find  symbol  t	14	None	replace
7	[BUG]  [BUGGY]  return  new  ZipLong(toZipLong(l));  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(toZipLong(l));  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(toZipLong(l));	  return    new    ZipLong(unixTime);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
8	[BUG]  [BUGGY]  return  new  ZipLong(toZipLong(tWO_TO_32));  [CE]  cannot  find  symbol  tWO_TO_32  [FE]            AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(toZipLong(tWO_TO_32));  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(toZipLong(tWO_TO_32));	  return    new    ZipLong(unixTime);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	17	None	replace
9	[BUG]  [BUGGY]  return  new  ZipLong(accessTime);  [CE]  non-static  variable  accessTime  cannot  be  referenced  from  a  static  context  [FE]              AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(accessTime);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(accessTime);	  return    new    ZipLong(unixTime);    	non-compiled	[CE]  non-static  variable  accessTime  cannot  be  referenced  from  a  static  context	17	None	replace
10	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32);  new  ZipLong(TWO_TO_32);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(TWO_TO_32);  new  ZipLong(TWO_TO_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32);    new  ZipLong(TWO_TO_32);	  	non-compiled	[CE]  unreachable  statement	8	None	add
11	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32);    if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  unreachable  statement	8	None	add
12	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32);    if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  unreachable  statement	8	None	add
13	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32);    if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  unreachable  statement	8	None	add
14	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32);    if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  unreachable  statement	8	None	add
15	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32);    if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  unreachable  statement	8	None	add
16	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32);    if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  unreachable  statement	8	None	add
17	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  unreachable  statement  [FE]                  AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32);    if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  unreachable  statement	8	None	add
18	[BUG]  [BUGGY]  return  new  ZipLong(l,  TWO_TO_32);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l,  TWO_TO_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l,  TWO_TO_32);	  return    new    ZipLong(TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	9	None	replace
19	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(tWO_TO_32  +  l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  l);	  return    new    ZipLong(TWO_TO_32);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	9	None	replace
20	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  TWO_TO_32));  [CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  TWO_TO_32));  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  TWO_TO_32));	  return    new    ZipLong(TWO_TO_32);    	non-compiled	[CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;	9	None	replace
21	[BUG]  [BUGGY]  return  new  ZipLong(l.longValue());  [CE]  long  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l.longValue());  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l.longValue());	  return    new    ZipLong(two.longValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	12	None	replace
22	[BUG]  [BUGGY]  return  new  ZipLong(two_to_32.longValue());  [CE]  cannot  find  symbol  two_to_32  [FE]          AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(two_to_32.longValue());  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_to_32.longValue());	  return    new    ZipLong(two.longValue());    	non-compiled	[CE]  cannot  find  symbol  two_to_32	12	None	replace
23	[BUG]  [BUGGY]  return  new  ZipLong(t.longValue());  [CE]  cannot  find  symbol  t  [FE]            AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(t.longValue());  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(t.longValue());	  return    new    ZipLong(two.longValue());    	non-compiled	[CE]  cannot  find  symbol  t	12	None	replace
24	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32.longValue());  [CE]  long  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(TWO_TO_32.longValue());  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(TWO_TO_32.longValue());	  return    new    ZipLong(two.longValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	12	None	replace
25	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32.longValue());  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(tWO_TO_32.longValue());  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32.longValue());	  return    new    ZipLong(two.longValue());    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	12	None	replace
26	[BUG]  [BUGGY]  return  new  ZipLong(unixTime.longValue());  [CE]  cannot  find  symbol  unixTime  [FE]                  AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(unixTime.longValue());  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTime.longValue());	  return    new    ZipLong(two.longValue());    	non-compiled	[CE]  cannot  find  symbol  unixTime	12	None	replace
27	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32,  l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  TWO_TO_32,  l);	  return    new    ZipLong(l    +    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	3	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  *  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	3	2	replace
29	[BUG]  [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  *  TWO_TO_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  *  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	3	2	replace
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  /  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	3	2	replace
31	[BUG]  [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  /  TWO_TO_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  /  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	3	2	replace
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  2);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  +  2);	  return    new    ZipLong(l    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	3	2	replace
33	[BUG]  [BUGGY]  return  new  ZipLong(l  +  2);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  2);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  2);	  return    new    ZipLong(l    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	3	2	replace
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  18);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  +  18);	  return    new    ZipLong(l    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	3	2	replace
35	[BUG]  [BUGGY]  return  new  ZipLong(l  +  18);  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  18);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  18);	  return    new    ZipLong(l    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	3	2	replace
36	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  1);	  return    new    ZipLong(l    +    1);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	16	None	replace
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  3);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  +  3);	  return    new    ZipLong(l    +    1);    	compilable	  [FE]  AssertionError  	16	2	replace
38	[BUG]  [BUGGY]  return  new  ZipLong(l  +  3);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  3);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  3);	  return    new    ZipLong(l    +    1);    	compilable	  [FE]  AssertionError  	16	2	replace
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(TWO_TO_32  +  1);	  return    new    ZipLong(l    +    1);    	compilable	  [FE]  AssertionError  	16	2	replace
40	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(TWO_TO_32  +  1);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(TWO_TO_32  +  1);	  return    new    ZipLong(l    +    1);    	compilable	  [FE]  AssertionError  	16	2	replace
41	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  +  1);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]          AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  +  1);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32,  l  +  1);	  return    new    ZipLong(l    +    1);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	16	None	replace
42	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  l);  [CE]  no  suitable  constructor  found  for  ZipLong(ZipLong,long)  [FE]                    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  l);	  return    new    ZipLong(unixTimeToZipLong(l));    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(ZipLong,long)	10	None	replace
43	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp);  [CE]  cannot  find  symbol  X5455_ExtendedTimestamp  [FE]                      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp);	  return    new    ZipLong(unixTimeToZipLong(l));    	non-compiled	[CE]  cannot  find  symbol  X5455_ExtendedTimestamp	10	None	replace
44	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(tWO_TO_32,  l));  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(unixTimeToZipLong(tWO_TO_32,  l));  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(tWO_TO_32,  l));	  return    new    ZipLong(unixTimeToZipLong(l));    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	10	None	replace
45	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  l));  [CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;  [FE]                          AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  l));  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  l));	  return    new    ZipLong(unixTimeToZipLong(l));    	non-compiled	[CE]  method  unixTimeToZipLong  in  class  X5455_ExtendedTimestamp  cannot  be  applied  to  given  types;	10	None	replace
46	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(tWO_TO_32));  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                            AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(unixTimeToZipLong(tWO_TO_32));  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(tWO_TO_32));	  return    new    ZipLong(unixTimeToZipLong(l));    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	10	None	replace
47	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  new  ZipLong(l  +  TWO_TO_32);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  new  ZipLong(l  +  TWO_TO_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    TWO_TO_32);    new  ZipLong(l  +  TWO_TO_32);	  	non-compiled	[CE]  unreachable  statement	2	None	add
48	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  +  TWO_TO_32;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  +  TWO_TO_32;  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    TWO_TO_32);    long  l  +  TWO_TO_32;	  	non-compiled	[CE]  ';'  expected	2	None	add
49	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  =  getTime().longValue();  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    TWO_TO_32);    long  l  =  getTime().longValue();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	2	None	add
50	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  =  Long.parseLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]          AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  =  Long.parseLong(l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    TWO_TO_32);    long  l  =  Long.parseLong(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	2	None	add
51	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  =  Long.parseLong(tWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]            AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  =  Long.parseLong(tWO_TO_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    TWO_TO_32);    long  l  =  Long.parseLong(tWO_TO_32);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	2	None	add
52	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  =  unixTime.longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]              AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  =  unixTime.longValue();  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    TWO_TO_32);    long  l  =  unixTime.longValue();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	2	None	add
53	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  =  getTime();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  =  getTime();  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    TWO_TO_32);    long  l  =  getTime();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	2	None	add
54	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  =  unixTime(l  +  TWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  =  unixTime(l  +  TWO_TO_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    TWO_TO_32);    long  l  =  unixTime(l  +  TWO_TO_32);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	2	None	add
55	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  new  ZipLong(l  -  TWO_TO_32);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  new  ZipLong(l  -  TWO_TO_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32);    new  ZipLong(l  -  TWO_TO_32);	  	non-compiled	[CE]  unreachable  statement	6	None	add
56	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -  TWO_TO_32;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -  TWO_TO_32;  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32);    long  l  -  TWO_TO_32;	  	non-compiled	[CE]  ';'  expected	6	None	add
57	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -  TWO_TO_32);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  long  l  -  TWO_TO_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32);    long  l  -  TWO_TO_32);	  	non-compiled	[CE]  ';'  expected	6	None	add
58	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  l  -  TWO_TO_32;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  l  -  TWO_TO_32;  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32);    l  -  TWO_TO_32;	  	non-compiled	[CE]  not  a  statement	6	None	add
59	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -  TWO_TO_32;  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -  TWO_TO_32;  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32);    Long  l  -  TWO_TO_32;	  	non-compiled	[CE]  ';'  expected	6	None	add
60	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  long  -  TWO_TO_32;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  long  -  TWO_TO_32;  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32);    long  -  TWO_TO_32;	  	non-compiled	[CE]  not  a  statement	6	None	add
61	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -  TWO_TO_32);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  Long  l  -  TWO_TO_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32);    Long  l  -  TWO_TO_32);	  	non-compiled	[CE]  ';'  expected	6	None	add
62	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  L  -  TWO_TO_32;  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  L  -  TWO_TO_32;  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32);    L  -  TWO_TO_32;	  	non-compiled	[CE]  not  a  statement	6	None	add
63	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong);  [CE]  cannot  find  symbol  unixTimeToZipLong  [FE]              AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(unixTimeToZipLong);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong);	  return    new    ZipLong(two_TO_32);    	non-compiled	[CE]  cannot  find  symbol  unixTimeToZipLong	5	None	replace
64	[BUG]  [BUGGY]  return  new  ZipLong(two_To_32);  [CE]  cannot  find  symbol  two_To_32  [FE]                AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(two_To_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_To_32);	  return    new    ZipLong(two_TO_32);    	non-compiled	[CE]  cannot  find  symbol  two_To_32	5	None	replace
65	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(TWO_TO_32,  l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(TWO_TO_32,  l);	  return    new    ZipLong(tWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	1	None	replace
66	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1);  new  ZipLong(l  +  1);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  1);  new  ZipLong(l  +  1);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    1);    new  ZipLong(l  +  1);	  	non-compiled	[CE]  unreachable  statement	15	None	add
67	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  getTime().longValue();  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    1);    long  l  =  getTime().longValue();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	15	None	add
68	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  getTime();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  getTime();  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    1);    long  l  =  getTime();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	15	None	add
69	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  unixTimeToZipLong(l  +  1);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]          AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  unixTimeToZipLong(l  +  1);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    1);    long  l  =  unixTimeToZipLong(l  +  1);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	15	None	add
70	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  unixTimeToZipLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]            AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  unixTimeToZipLong(l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    1);    long  l  =  unixTimeToZipLong(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	15	None	add
71	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  Long.parseLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]              AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  Long.parseLong(l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    1);    long  l  =  Long.parseLong(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	15	None	add
72	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  Long.parseLong(tWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  Long.parseLong(tWO_TO_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    1);    long  l  =  Long.parseLong(tWO_TO_32);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	15	None	add
73	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  getTime(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]                  AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  getTime(l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    1);    long  l  =  getTime(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	15	None	add
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  -  1);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  -  1);	  return    new    ZipLong(l    -    TWO_TO_32);    	compilable	  [FE]  AssertionError  	7	2	replace
75	[BUG]  [BUGGY]  return  new  ZipLong(l  -  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  -  1);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  1);	  return    new    ZipLong(l    -    TWO_TO_32);    	compilable	  [FE]  AssertionError  	7	2	replace
76	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32,  l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32,  l);	  return    new    ZipLong(l    -    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	7	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  -  TWO_TO_32  +  1);	  return    new    ZipLong(l    -    TWO_TO_32);    	compilable	  [FE]  AssertionError  	7	2	replace
78	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32  +  1);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  TWO_TO_32  +  1);	  return    new    ZipLong(l    -    TWO_TO_32);    	compilable	  [FE]  AssertionError  	7	2	replace
79	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  -  2);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  -  2);	  return    new    ZipLong(l    -    TWO_TO_32);    	compilable	  [FE]  AssertionError  	7	2	replace
80	[BUG]  [BUGGY]  return  new  ZipLong(l  -  2);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  -  2);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  2);	  return    new    ZipLong(l    -    TWO_TO_32);    	compilable	  [FE]  AssertionError  	7	2	replace
81	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  missing  return  statement  [FE]                      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	      	non-compiled	[CE]  missing  return  statement	11	None	replace
82	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  missing  return  statement  [FE]                        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	      	non-compiled	[CE]  missing  return  statement	11	None	replace
83	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                          AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  unixTimeToZipLong(l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  unixTimeToZipLong(l);	      	compilable	  [FE]  StackOverflowError  	11	4	replace
84	[BUG]  [BUGGY]  return  unixTimeToZipLong(l);  [FE]  StackOverflowError  [FE]                          AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  unixTimeToZipLong(l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  unixTimeToZipLong(l);	      	compilable	  [FE]  StackOverflowError  	11	4	replace
85	[BUG]  [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  missing  return  statement  [FE]                            AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32  ||  l  >  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	      	non-compiled	[CE]  missing  return  statement	11	None	replace
86	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  missing  return  statement  [FE]                              AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	      	non-compiled	[CE]  missing  return  statement	11	None	replace
87	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  missing  return  statement  [FE]                                AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	      	non-compiled	[CE]  missing  return  statement	11	None	replace
88	[BUG]  [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  missing  return  statement  [FE]                                  AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "Timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	      	non-compiled	[CE]  missing  return  statement	11	None	replace
89	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  TWO_TO_32,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)  [FE]            AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  1,  TWO_TO_32,  l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  TWO_TO_32,  l);	  return    new    ZipLong(l    +    1,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long,long)	18	None	replace
90	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1,  l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]              AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(tWO_TO_32  +  1,  l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  +  1,  l);	  return    new    ZipLong(l    +    1,    l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	18	None	replace
91	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  unixTime,  l);  [CE]  cannot  find  symbol  unixTime  [FE]                AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  1,  unixTime,  l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  unixTime,  l);	  return    new    ZipLong(l    +    1,    l);    	non-compiled	[CE]  cannot  find  symbol  unixTime	18	None	replace
92	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  +  1,  l);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]                  AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(tWO_TO_32,  l  +  1,  l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32,  l  +  1,  l);	  return    new    ZipLong(l    +    1,    l);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	18	None	replace
93	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  l,  unixTime);  [CE]  cannot  find  symbol  unixTime  [FE]                    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  1,  l,  unixTime);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  l,  unixTime);	  return    new    ZipLong(l    +    1,    l);    	non-compiled	[CE]  cannot  find  symbol  unixTime	18	None	replace
94	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  TWO_TO_32);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]                      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  1,  TWO_TO_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  TWO_TO_32);	  return    new    ZipLong(l    +    1,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	18	None	replace
95	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  l.length);  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  1,  l.length);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  l.length);	  return    new    ZipLong(l    +    1,    l);    	non-compiled	[CE]  long  cannot  be  dereferenced	18	None	replace
96	[BUG]  [BUGGY]  return  new  ZipLong(tWorstTime);  [CE]  cannot  find  symbol  tWorstTime  [FE]            AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(tWorstTime);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWorstTime);	  return    new    ZipLong(two_to_32);    	non-compiled	[CE]  cannot  find  symbol  tWorstTime	4	None	replace
97	[BUG]  [BUGGY]  return  new  ZipLong(bit0_modifyTimePresent);  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(bit0_modifyTimePresent);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(bit0_modifyTimePresent);	  return    new    ZipLong(tWO_TO_32);    	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	1	None	replace
98	[BUG]  [BUGGY]  return  new  ZipLong(two_toZipLong.longValue());  [CE]  cannot  find  symbol  two_toZipLong  [FE]        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(two_toZipLong.longValue());  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_toZipLong.longValue());	  return    new    ZipLong(two.longValue());    	non-compiled	[CE]  cannot  find  symbol  two_toZipLong	12	None	replace
99	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32);    if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }	  	non-compiled	[CE]  ';'  expected	8	None	add
100	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32);    if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  ';'  expected	8	None	add
101	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32);    if(l  <  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  else  {  return  new  ZipLong(TWO_TO_32);  }	  	non-compiled	[CE]  unreachable  statement	8	None	add
102	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32);    if(l  <  TWO_TO_32)  {  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  ';'  expected	8	None	add
103	[BUG]  [BUGGY]  return  new  ZipLong(tWO);  [CE]  cannot  find  symbol  tWO  [FE]          AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(tWO);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO);	  return    new    ZipLong(two);    	non-compiled	[CE]  cannot  find  symbol  tWO	13	None	replace
104	[BUG]  [BUGGY]  return  new  ZipLong(tWEEK_TO_32);  [CE]  cannot  find  symbol  tWEEK_TO_32  [FE]            AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(tWEEK_TO_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWEEK_TO_32);	  return    new    ZipLong(two_to_32);    	non-compiled	[CE]  cannot  find  symbol  tWEEK_TO_32	4	None	replace
105	[BUG]  [BUGGY]  return  new  ZipLong(l  +  2,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]            AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  2,  l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  2,  l);	  return    new    ZipLong(l    +    1,    l);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	18	None	replace
106	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  unixTime);  [CE]  cannot  find  symbol  unixTime  [FE]              AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  1,  unixTime);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  unixTime);	  return    new    ZipLong(l    +    1,    l);    	non-compiled	[CE]  cannot  find  symbol  unixTime	18	None	replace
107	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  return  new  ZipLong(l  +  TWO_TO_32);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  return  new  ZipLong(l  +  TWO_TO_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    TWO_TO_32);    return  new  ZipLong(l  +  TWO_TO_32);	  	non-compiled	[CE]  unreachable  statement	2	None	add
108	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  =  unixTimeToZipLong(l);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  =  unixTimeToZipLong(l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    TWO_TO_32);    long  l  =  unixTimeToZipLong(l);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	2	None	add
109	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  =  unixTimeToZipLong(l  +  TWO_TO_32);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  long  l  =  unixTimeToZipLong(l  +  TWO_TO_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    TWO_TO_32);    long  l  =  unixTimeToZipLong(l  +  TWO_TO_32);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	2	None	add
110	[BUG]  [BUGGY]  return  new  ZipLong(two_toZipLong);  [CE]  cannot  find  symbol  two_toZipLong  [FE]          AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(two_toZipLong);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_toZipLong);	  return    new    ZipLong(unixTime);    	non-compiled	[CE]  cannot  find  symbol  two_toZipLong	17	None	replace
111	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  long  l  =  getTime().longValue();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  long  l  =  getTime().longValue();  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32);    long  l  =  getTime().longValue();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	6	None	add
112	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return(ZipLong)unixTimeToZipLong(l);	      	compilable	  [FE]  StackOverflowError  	11	4	replace
113	[BUG]  [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  [FE]  StackOverflowError  [FE]                      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return(ZipLong)unixTimeToZipLong(l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return(ZipLong)unixTimeToZipLong(l);	      	compilable	  [FE]  StackOverflowError  	11	4	replace
114	[BUG]  [BUGGY]  return  ZipLong.valueOf(l);  [CE]  cannot  find  symbol  [FE]                        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  ZipLong.valueOf(l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  ZipLong.valueOf(l);	      	non-compiled	[CE]  cannot  find  symbol	11	None	replace
115	[BUG]  [BUGGY]  return  unixTimeToZipLong(l.longValue());  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  unixTimeToZipLong(l.longValue());  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  unixTimeToZipLong(l.longValue());	      	non-compiled	[CE]  long  cannot  be  dereferenced	11	None	replace
116	[BUG]  [BUGGY]  return  Long.valueOf(l);  [CE]  incompatible  types  [FE]                            AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  Long.valueOf(l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  Long.valueOf(l);	      	non-compiled	[CE]  incompatible  types	11	None	replace
117	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  +  32);	  return    new    ZipLong(l    +    1);    	compilable	  [FE]  AssertionError  	16	2	replace
118	[BUG]  [BUGGY]  return  new  ZipLong(l  +  32);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  32);	  return    new    ZipLong(l    +    1);    	compilable	  [FE]  AssertionError  	16	2	replace
119	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT));  [CE]  cannot  find  symbol  DEFAULT_TIME_BIT  [FE]                    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT));  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT));	  return    new    ZipLong(unixTimeToZipLong(l));    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_TIME_BIT	10	None	replace
120	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);  [CE]  cannot  find  symbol  DEFAULT_TIME_BIT  [FE]                      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l),  X5455_ExtendedTimestamp.DEFAULT_TIME_BIT);	  return    new    ZipLong(unixTimeToZipLong(l));    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_TIME_BIT	10	None	replace
121	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.UTF8));  [CE]  cannot  find  symbol  UTF8  [FE]                        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.UTF8));  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l,  X5455_ExtendedTimestamp.UTF8));	  return    new    ZipLong(unixTimeToZipLong(l));    	non-compiled	[CE]  cannot  find  symbol  UTF8	10	None	replace
122	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  10);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  +  10);	  return    new    ZipLong(l    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	3	2	replace
123	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  10);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  10);	  return    new    ZipLong(l    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	3	2	replace
124	[BUG]  [BUGGY]  return  new  ZipLong(twoTWO_TO_32);  [CE]  cannot  find  symbol  twoTWO_TO_32  [FE]          AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(twoTWO_TO_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(twoTWO_TO_32);	  return    new    ZipLong(unixTime);    	non-compiled	[CE]  cannot  find  symbol  twoTWO_TO_32	17	None	replace
125	[BUG]  [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(unixTimeToZipLong(l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(unixTimeToZipLong(l);	  return    new    ZipLong(unixTime);    	non-compiled	[CE]  ')'  expected	17	None	replace
126	[BUG]  [BUGGY]  return  new  ZipLong(tempTime.longValue());  [CE]  cannot  find  symbol  tempTime  [FE]        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(tempTime.longValue());  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tempTime.longValue());	  return    new    ZipLong(two.longValue());    	non-compiled	[CE]  cannot  find  symbol  tempTime	12	None	replace
127	[BUG]  [BUGGY]  return  new  ZipLong(l  -  1,  l);  [CE]  no  suitable  constructor  found  for  ZipLong(long,long)  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  -  1,  l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  -  1,  l);	  return    new    ZipLong(l    -    TWO_TO_32);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(long,long)	7	None	replace
128	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  return  new  ZipLong(l  -  TWO_TO_32);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  return  new  ZipLong(l  -  TWO_TO_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32);    return  new  ZipLong(l  -  TWO_TO_32);	  	non-compiled	[CE]  unreachable  statement	6	None	add
129	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  long  l  =  getTime();  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  long  l  =  getTime();  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32);    long  l  =  getTime();	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	6	None	add
130	[BUG]  [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  long  -  TWO_TO_32);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  -  TWO_TO_32);  long  -  TWO_TO_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    -    TWO_TO_32);    long  -  TWO_TO_32);	  	non-compiled	[CE]  not  a  statement	6	None	add
131	[BUG]  [BUGGY]  return  new  ZipLong(tWorst,  l);  [CE]  cannot  find  symbol  tWorst  [FE]            AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(tWorst,  l);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWorst,  l);	  return    new    ZipLong(two,    l);    	non-compiled	[CE]  cannot  find  symbol  tWorst	14	None	replace
132	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  /  1);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  /  1);	  return    new    ZipLong(l    +    1);    	compilable	  [FE]  AssertionError  	16	1	replace
133	[BUG]  [BUGGY]  return  new  ZipLong(l  /  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  /  1);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  /  1);	  return    new    ZipLong(l    +    1);    	compilable	  [FE]  AssertionError  	16	1	replace
134	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1);  return  new  ZipLong(l  +  1);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  1);  return  new  ZipLong(l  +  1);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    1);    return  new  ZipLong(l  +  1);	  	non-compiled	[CE]  unreachable  statement	15	None	add
135	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  getTime().longValue();  return  new  ZipLong(l  +  1);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  getTime().longValue();  return  new  ZipLong(l  +  1);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    1);    long  l  =  getTime().longValue();  return  new  ZipLong(l  +  1);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	15	None	add
136	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1);  ((  ZipLong)l).longValue();  [CE]  inconvertible  types  [FE]        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  1);  ((  ZipLong)l).longValue();  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    1);    ((  ZipLong)l).longValue();	  	non-compiled	[CE]  inconvertible  types	15	None	add
137	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1);  ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  1);  [CE]  inconvertible  types  [FE]          AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  1);  ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  1);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    1);    ((  ZipLong)l).longValue();  return  new  ZipLong(l  +  1);	  	non-compiled	[CE]  inconvertible  types	15	None	add
138	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  getTime(l);  return  new  ZipLong(l  +  1);  [CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)  [FE]            AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  1);  long  l  =  getTime(l);  return  new  ZipLong(l  +  1);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    1);    long  l  =  getTime(l);  return  new  ZipLong(l  +  1);	  	non-compiled	[CE]  variable  l  is  already  defined  in  method  unixTimeToZipLong(long)	15	None	add
139	[BUG]  [BUGGY]  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]                      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	      	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	11	None	replace
140	[BUG]  [BUGGY]  if(l  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  if(l  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	      	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
141	[BUG]  [BUGGY]  if(l  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  if(l  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(l  <  =  TWO_TO_32)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	      	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
142	[BUG]  [BUGGY]  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]                            AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	      	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	11	None	replace
143	[BUG]  [BUGGY]  return  new  ZipLong(tWO_TO_32  -  1);  [CE]  cannot  find  symbol  tWO_TO_32  [FE]        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(tWO_TO_32  -  1);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(tWO_TO_32  -  1);	  return    new    ZipLong(tWO_TO_32);    	non-compiled	[CE]  cannot  find  symbol  tWO_TO_32	1	None	replace
144	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	add	return  new  ZipLong(l  +  10  +  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	3	2	replace
145	[BUG]  [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  10  +  TWO_TO_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  10  +  TWO_TO_32);	  return    new    ZipLong(l    +    TWO_TO_32);    	compilable	  [FE]  AssertionError  	3	2	replace
146	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32);  return  new  ZipLong(TWO_TO_32);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(TWO_TO_32);  return  new  ZipLong(TWO_TO_32);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32);    return  new  ZipLong(TWO_TO_32);	  	non-compiled	[CE]  unreachable  statement	8	None	add
147	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	8	None	add
148	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)  {  return  new  ZipLong(TWO_TO_32);  }	  	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	8	None	add
149	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]          AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32);    if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	8	None	add
150	[BUG]  [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(TWO_TO_32);  if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(TWO_TO_32);    if(l  <  TWO_TO_32)  {  return  new  ZipLong(TWO_TO_32);  }	  	non-compiled	[CE]  unreachable  statement	8	None	add
151	[BUG]  [BUGGY]  return  new  ZipLong(two_timeToZipLong);  [CE]  cannot  find  symbol  two_timeToZipLong  [FE]              AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(two_timeToZipLong);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(two_timeToZipLong);	  return    new    ZipLong(two_TO_32);    	non-compiled	[CE]  cannot  find  symbol  two_timeToZipLong	5	None	replace
152	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  l.intValue());  [CE]  long  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  1,  l.intValue());  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  l.intValue());	  return    new    ZipLong(l    +    1,    l);    	non-compiled	[CE]  long  cannot  be  dereferenced	18	None	replace
153	[BUG]  [BUGGY]  return  new  ZipLong(l  +  1,  X5455Timestamp.DEFAULT_TIME_BIT);  [CE]  cannot  find  symbol  X5455Timestamp  [FE]              AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  1,  X5455Timestamp.DEFAULT_TIME_BIT);  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return  new  ZipLong(l  +  1,  X5455Timestamp.DEFAULT_TIME_BIT);	  return    new    ZipLong(l    +    1,    l);    	non-compiled	[CE]  cannot  find  symbol  X5455Timestamp	18	None	replace
154	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]    AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  fit  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	2	None	add
155	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]      AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	2	None	add
156	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]        AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  be  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	2	None	add
157	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)  {  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  	non-compiled	[CE]  ';'  expected	2	None	add
158	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]            AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)  {  return  new  ZipLong(l  +  TWO_TO_32);  }  else  {  return  new  ZipLong(l  +  TWO_TO_32);  }	  	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	2	None	add
159	[BUG]  [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context  [FE]              AssertionError    [CONTEXT]    private  static  ZipLong  unixTimeToZipLong(long  l)  {  final  long  TWO_TO_32  =  0x100000000L;  if  (l  >=  TWO_TO_32)  {  throw  new  IllegalArgumentException(   "X5455  timestamps  must  fit  in  a  signed  32  bit  integer:     "  +  l);  }    [BUGGY]  return  new  ZipLong(l  +  TWO_TO_32);  if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }  [BUGGY]    }  [CLASS]  X5455_ExtendedTimestamp  [METHOD]  unixTimeToZipLong  [RETURN_TYPE]  ZipLong  long  l  [VARIABLES]  ZipLong  accessTime  createTime  l  modifyTime  unixTime  ZipShort  HEADER_ID  boolean  bit0_modifyTimePresent  bit1_accessTimePresent  bit2_createTimePresent  byte  ACCESS_TIME_BIT  CREATE_TIME_BIT  MODIFY_TIME_BIT  flags  long  TWO_TO_32  l  serialVersionUID  	projects/Compress46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java	0.5	533	533	1	replace	return    new    ZipLong(l    +    TWO_TO_32);    if(bit0_modifyTimePresent)  {  throw  new  IllegalArgumentException( "X5455  timestamps  must  match  in  a  signed  32  bit  integer: "  +  l);  }	  	non-compiled	[CE]  non-static  variable  bit0_modifyTimePresent  cannot  be  referenced  from  a  static  context	2	None	add
