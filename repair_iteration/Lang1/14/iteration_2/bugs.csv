bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(pfx.startsWith(pfx)||  pfx.endsWith( ".0 "))  {  [CE]  ')'  expected  [FE]            NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.startsWith(pfx)||  pfx.endsWith( ".0 "))  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith(pfx)||  pfx.endsWith( ".0 "))  {	  if(pfx.startsWith(str)||    pfx.endsWith(   ".0   "))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
2	[BUG]  [BUGGY]  if(pfx.startsWith( ".0 ")||  pfx.endsWith( ".0 "))  {  [CE]  ')'  expected  [FE]              NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.startsWith( ".0 ")||  pfx.endsWith( ".0 "))  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( ".0 ")||  pfx.endsWith( ".0 "))  {	  if(pfx.startsWith(str)||    pfx.endsWith(   ".0   "))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
3	[BUG]  [BUGGY]  pfxLen  =  pfx.length();  [CE]  ')'  expected  [FE]            NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  pfxLen  =  pfx.length();  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfxLen  =  pfx.length();	      pfxLen    =    str.length();    	non-compiled	[CE]  ')'  expected	7	None	replace
4	[BUG]  [BUGGY]  pfxLen  =  str.length()  +  1;  [CE]  ')'  expected  [FE]              NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  pfxLen  =  str.length()  +  1;  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfxLen  =  str.length()  +  1;	      pfxLen    =    str.length();    	non-compiled	[CE]  ')'  expected	7	None	replace
5	[BUG]  [BUGGY]  String  str  =  pfx.substring(0,  pfxLen  +  1);  [CE]  ')'  expected  [FE]              NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  String  str  =  pfx.substring(0,  pfxLen  +  1);  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	String  str  =  pfx.substring(0,  pfxLen  +  1);	      String    str    =    pfx.substring(0,    pfxLen);    	non-compiled	[CE]  ')'  expected	8	None	replace
6	[BUG]  [BUGGY]  String  str  =  pfx.substring(0,  pfxLen  -  1);  [CE]  ')'  expected  [FE]                NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  String  str  =  pfx.substring(0,  pfxLen  -  1);  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	String  str  =  pfx.substring(0,  pfxLen  -  1);	      String    str    =    pfx.substring(0,    pfxLen);    	non-compiled	[CE]  ')'  expected	8	None	replace
7	[BUG]  [BUGGY]  String  str  =  pfx.substring(0,  pfxLen  +  2);  [CE]  ')'  expected  [FE]                  NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  String  str  =  pfx.substring(0,  pfxLen  +  2);  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	String  str  =  pfx.substring(0,  pfxLen  +  2);	      String    str    =    pfx.substring(0,    pfxLen);    	non-compiled	[CE]  ')'  expected	8	None	replace
8	[BUG]  [BUGGY]  String  str  =  pfx.substring(0,  pfxLen  +  3);  [CE]  ')'  expected  [FE]                    NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  String  str  =  pfx.substring(0,  pfxLen  +  3);  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	String  str  =  pfx.substring(0,  pfxLen  +  3);	      String    str    =    pfx.substring(0,    pfxLen);    	non-compiled	[CE]  ')'  expected	8	None	replace
9	[BUG]  [BUGGY]  pfx  =  str.substring(pfx.length());  [CE]  ')'  expected  [FE]                NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  pfx  =  str.substring(pfx.length());  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.substring(pfx.length());	      pfx    =    str.substring(pfx.length()    -    1);    	non-compiled	[CE]  ')'  expected	9	None	replace
10	[BUG]  [BUGGY]  pfx  =  str.substring(pfx.length()  +  1);  [CE]  ')'  expected  [FE]                  NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  pfx  =  str.substring(pfx.length()  +  1);  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.substring(pfx.length()  +  1);	      pfx    =    str.substring(pfx.length()    -    1);    	non-compiled	[CE]  ')'  expected	9	None	replace
11	[BUG]  [BUGGY]  pfx  =  str.substring(pfxLen  -  1);  [CE]  ')'  expected  [FE]                    NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  pfx  =  str.substring(pfxLen  -  1);  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.substring(pfxLen  -  1);	      pfx    =    str.substring(pfx.length()    -    1);    	non-compiled	[CE]  ')'  expected	9	None	replace
12	[BUG]  [BUGGY]  pfx  =  str.charAt(pfxLen  +  1);  [CE]  ')'  expected  [FE]            NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  pfx  =  str.charAt(pfxLen  +  1);  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.charAt(pfxLen  +  1);	      pfx    =    str.charAt(pfxLen);    	non-compiled	[CE]  ')'  expected	13	None	replace
13	[BUG]  [BUGGY]  pfx  =  str.charAt(0);  [CE]  ')'  expected  [FE]              NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  pfx  =  str.charAt(0);  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.charAt(0);	      pfx    =    str.charAt(pfxLen);    	non-compiled	[CE]  ')'  expected	13	None	replace
14	[BUG]  [BUGGY]  pfx  =  str.charAt(pfx);  [CE]  ')'  expected  [FE]                NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  pfx  =  str.charAt(pfx);  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.charAt(pfx);	      pfx    =    str.charAt(pfxLen);    	non-compiled	[CE]  ')'  expected	13	None	replace
15	[BUG]  [BUGGY]  if(pfx.startsWith( "0x ")||  pfx.startsWith( "0x "))  {  [CE]  ')'  expected  [FE]          NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.startsWith( "0x ")||  pfx.startsWith( "0x "))  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "0x ")||  pfx.startsWith( "0x "))  {	  if(pfx.startsWith(str)||    pfx.startsWith(   "0   "))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
16	[BUG]  [BUGGY]  if(pfx.startsWith(pfx)||  pfx.startsWith( "0 "))  {  [CE]  ')'  expected  [FE]            NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.startsWith(pfx)||  pfx.startsWith( "0 "))  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith(pfx)||  pfx.startsWith( "0 "))  {	  if(pfx.startsWith(str)||    pfx.startsWith(   "0   "))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
17	[BUG]  [BUGGY]  if(pfx.startsWith( ".0 ")||  pfx.startsWith( ".0 "))  {  [CE]  ')'  expected  [FE]              NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.startsWith( ".0 ")||  pfx.startsWith( ".0 "))  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( ".0 ")||  pfx.startsWith( ".0 "))  {	  if(pfx.startsWith(str)||    pfx.startsWith(   "0   "))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
18	[BUG]  [BUGGY]  if(pfx.startsWith(str)&&  pfx.startsWith(pfx))  {  [CE]  ')'  expected  [FE]          NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.startsWith(str)&&  pfx.startsWith(pfx))  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith(str)&&  pfx.startsWith(pfx))  {	  if(pfx.startsWith(str)||    pfx.startsWith(pfx))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
19	[BUG]  [BUGGY]  if(str.startsWith(pfx)||  pfx.startsWith(pfx))  {  [CE]  ')'  expected  [FE]            NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(str.startsWith(pfx)||  pfx.startsWith(pfx))  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(str.startsWith(pfx)||  pfx.startsWith(pfx))  {	  if(pfx.startsWith(str)||    pfx.startsWith(pfx))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
20	[BUG]  [BUGGY]  if(pfx.startsWith(pfx)||  pfx.startsWith(pfx))  {  [CE]  ')'  expected  [FE]              NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.startsWith(pfx)||  pfx.startsWith(pfx))  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith(pfx)||  pfx.startsWith(pfx))  {	  if(pfx.startsWith(str)||    pfx.startsWith(pfx))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
21	[BUG]  [BUGGY]  String  str  =  pfx.substring(0,  pfx.length());  [CE]  ')'  expected  [FE]          NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  String  str  =  pfx.substring(0,  pfx.length());  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	String  str  =  pfx.substring(0,  pfx.length());	      String    str    =    pfx.substring(0,    pfx.length()    -    1);    	non-compiled	[CE]  ')'  expected	6	None	replace
22	[BUG]  [BUGGY]  String  str  =  pfx.substring(0,  pfx.length()  +  1);  [CE]  ')'  expected  [FE]            NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  String  str  =  pfx.substring(0,  pfx.length()  +  1);  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	String  str  =  pfx.substring(0,  pfx.length()  +  1);	      String    str    =    pfx.substring(0,    pfx.length()    -    1);    	non-compiled	[CE]  ')'  expected	6	None	replace
23	[BUG]  [BUGGY]  String  str  =  pfx.substring(0,  pfx.length();  [CE]  ')'  expected  [FE]              NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  String  str  =  pfx.substring(0,  pfx.length();  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	String  str  =  pfx.substring(0,  pfx.length();	      String    str    =    pfx.substring(0,    pfx.length()    -    1);    	non-compiled	[CE]  ')'  expected	6	None	replace
24	[BUG]  [BUGGY]  Integer  pfx  =  createInteger(pfx);  [CE]  ')'  expected  [FE]        NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  Integer  pfx  =  createInteger(pfx);  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfx  =  createInteger(pfx);	      Integer    pfx    =    createBigInteger(pfx);    	non-compiled	[CE]  ')'  expected	11	None	replace
25	[BUG]  [BUGGY]  Integer  pfx  =  createLong(pfx);  [CE]  ')'  expected  [FE]          NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  Integer  pfx  =  createLong(pfx);  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfx  =  createLong(pfx);	      Integer    pfx    =    createBigInteger(pfx);    	non-compiled	[CE]  ')'  expected	11	None	replace
26	[BUG]  [BUGGY]  Integer  pfx  =  createBigInteger(pfx.length());  [CE]  ')'  expected  [FE]            NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  Integer  pfx  =  createBigInteger(pfx.length());  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfx  =  createBigInteger(pfx.length());	      Integer    pfx    =    createBigInteger(pfx);    	non-compiled	[CE]  ')'  expected	11	None	replace
27	[BUG]  [BUGGY]  if(pfx.startsWith( "- ")||  pfx.startsWith( "- "))  {  [CE]  ')'  expected  [FE]        NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.startsWith( "- ")||  pfx.startsWith( "- "))  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "- ")||  pfx.startsWith( "- "))  {	  if(pfx.startsWith(str)||    pfx.startsWith(   "-   "))    {    	non-compiled	[CE]  ')'  expected	15	None	replace
28	[BUG]  [BUGGY]  if(pfx.startsWith( "- ")||  pfx.startsWith( ".0 "))  {  [CE]  ')'  expected  [FE]          NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.startsWith( "- ")||  pfx.startsWith( ".0 "))  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "- ")||  pfx.startsWith( ".0 "))  {	  if(pfx.startsWith(str)||    pfx.startsWith(   "-   "))    {    	non-compiled	[CE]  ')'  expected	15	None	replace
29	[BUG]  [BUGGY]  if(pfx.startsWith( ". ")||  pfx.startsWith( ". "))  {  [CE]  ')'  expected  [FE]        NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.startsWith( ". ")||  pfx.startsWith( ". "))  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( ". ")||  pfx.startsWith( ". "))  {	  if(pfx.startsWith(str))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
30	[BUG]  [BUGGY]  if(pfx.startsWith( ". "))  {  [CE]  ')'  expected  [FE]          NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.startsWith( ". "))  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( ". "))  {	  if(pfx.startsWith(str))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
31	[BUG]  [BUGGY]  if(pfx.charAt(pfxLen  -  1)!=  ')')  {  [CE]  ')'  expected  [FE]            NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.charAt(pfxLen  -  1)!=  ')')  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.charAt(pfxLen  -  1)!=  ')')  {	  if(pfx.startsWith(str))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
32	[BUG]  [BUGGY]  if(pfx.startsWith( "- "))  {  [CE]  ')'  expected  [FE]              NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.startsWith( "- "))  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "- "))  {	  if(pfx.startsWith(str))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
33	[BUG]  [BUGGY]  final  int  pfxLen  =  str.length();  [CE]  ')'  expected  [FE]              NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  final  int  pfxLen  =  str.length();  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	final  int  pfxLen  =  str.length();	      	non-compiled	[CE]  ')'  expected	4	None	replace
34	[BUG]  [BUGGY]  pfx  =  str.charAt(pfxLen  -  2);  [CE]  ')'  expected  [FE]          NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  pfx  =  str.charAt(pfxLen  -  2);  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.charAt(pfxLen  -  2);	      pfx    =    str.charAt(pfxLen    -    1);    	non-compiled	[CE]  ')'  expected	12	None	replace
35	[BUG]  [BUGGY]  pfx  =  str.charAt(pfxLen  -  1  +  1);  [CE]  ')'  expected  [FE]            NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  pfx  =  str.charAt(pfxLen  -  1  +  1);  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.charAt(pfxLen  -  1  +  1);	      pfx    =    str.charAt(pfxLen    -    1);    	non-compiled	[CE]  ')'  expected	12	None	replace
36	[BUG]  [BUGGY]  pfx  =  str.charAt(pfxLen  -  3);  [CE]  ')'  expected  [FE]              NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  pfx  =  str.charAt(pfxLen  -  3);  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.charAt(pfxLen  -  3);	      pfx    =    str.charAt(pfxLen    -    1);    	non-compiled	[CE]  ')'  expected	12	None	replace
37	[BUG]  [BUGGY]  int  pfxLen  =  pfx.length();  [CE]  ')'  expected  [FE]        NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  int  pfxLen  =  pfx.length();  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	int  pfxLen  =  pfx.length();	      int    pfxLen    =    str.length();    	non-compiled	[CE]  ')'  expected	5	None	replace
38	[BUG]  [BUGGY]  int  pfxLen  =  str.length()  +  1;  [CE]  ')'  expected  [FE]          NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  int  pfxLen  =  str.length()  +  1;  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	int  pfxLen  =  str.length()  +  1;	      int    pfxLen    =    str.length();    	non-compiled	[CE]  ')'  expected	5	None	replace
39	[BUG]  [BUGGY]  char  pfxLen  =  str.length();  [CE]  ')'  expected  [FE]            NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  char  pfxLen  =  str.length();  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	char  pfxLen  =  str.length();	      int    pfxLen    =    str.length();    	non-compiled	[CE]  ')'  expected	5	None	replace
40	[BUG]  [BUGGY]  Integer  pfxLen  =  str.length();  [CE]  ')'  expected  [FE]              NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  Integer  pfxLen  =  str.length();  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfxLen  =  str.length();	      int    pfxLen    =    str.length();    	non-compiled	[CE]  ')'  expected	5	None	replace
41	[BUG]  [BUGGY]  if(pfx.startsWith(str)||  str.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]        NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.startsWith(str)||  str.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith(str)||  str.charAt(pfxLen  -  1)!=  '0')  {	  if(str.startsWith(pfx)||    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	10	None	replace
42	[BUG]  [BUGGY]  if(pfx.startsWith(pfx)||  str.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]          NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.startsWith(pfx)||  str.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith(pfx)||  str.charAt(pfxLen  -  1)!=  '0')  {	  if(str.startsWith(pfx)||    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	10	None	replace
43	[BUG]  [BUGGY]  if(pfxLen.startsWith(str)||  str.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]            NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfxLen.startsWith(str)||  str.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfxLen.startsWith(str)||  str.charAt(pfxLen  -  1)!=  '0')  {	  if(str.startsWith(pfx)||    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	10	None	replace
44	[BUG]  [BUGGY]  Integer  str  =  createInteger(pfx);  [CE]  ')'  expected  [FE]        NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  Integer  str  =  createInteger(pfx);  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createInteger(pfx);	      Integer    str    =    createBigInteger(pfx);    	non-compiled	[CE]  ')'  expected	14	None	replace
45	[BUG]  [BUGGY]  Integer  str  =  createBigInteger(pfx,  hex_prefixes);  [CE]  ')'  expected  [FE]          NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  Integer  str  =  createBigInteger(pfx,  hex_prefixes);  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createBigInteger(pfx,  hex_prefixes);	      Integer    str    =    createBigInteger(pfx);    	non-compiled	[CE]  ')'  expected	14	None	replace
46	[BUG]  [BUGGY]  Integer  str  =  createBigInteger(pfx.length());  [CE]  ')'  expected  [FE]            NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  Integer  str  =  createBigInteger(pfx.length());  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createBigInteger(pfx.length());	      Integer    str    =    createBigInteger(pfx);    	non-compiled	[CE]  ')'  expected	14	None	replace
47	[BUG]  [BUGGY]  pfx  =  str.substring(0,  pfx.length());  [CE]  ')'  expected  [FE]                NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  pfx  =  str.substring(0,  pfx.length());  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.substring(0,  pfx.length());	      pfx    =    str.substring(pfx.length()    -    1);    	non-compiled	[CE]  ')'  expected	9	None	replace
48	[BUG]  [BUGGY]  if(pfxLen  ==  0  ||  str.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]        NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfxLen  ==  0  ||  str.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfxLen  ==  0  ||  str.charAt(pfxLen  -  1)!=  '0')  {	  if(str.startsWith(pfx)||    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	10	None	replace
49	[BUG]  [BUGGY]  if(pfxLen  ==  0  &&  str.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]          NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfxLen  ==  0  &&  str.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfxLen  ==  0  &&  str.charAt(pfxLen  -  1)!=  '0')  {	  if(str.startsWith(pfx)||    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	10	None	replace
50	[BUG]  [BUGGY]  if(pfxLen  >=  0  ||  str.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]            NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfxLen  >=  0  ||  str.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfxLen  >=  0  ||  str.charAt(pfxLen  -  1)!=  '0')  {	  if(str.startsWith(pfx)||    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	10	None	replace
51	[BUG]  [BUGGY]  Integer  pfx  =  createBigInteger(pfx  +  1);  [CE]  ')'  expected  [FE]        NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  Integer  pfx  =  createBigInteger(pfx  +  1);  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfx  =  createBigInteger(pfx  +  1);	      Integer    pfx    =    createBigInteger(pfx);    	non-compiled	[CE]  ')'  expected	11	None	replace
52	[BUG]  [BUGGY]  Integer  pfx  =  createBigDecimal(pfx);  [CE]  ')'  expected  [FE]          NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  Integer  pfx  =  createBigDecimal(pfx);  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfx  =  createBigDecimal(pfx);	      Integer    pfx    =    createBigInteger(pfx);    	non-compiled	[CE]  ')'  expected	11	None	replace
53	[BUG]  [BUGGY]  pfx  =  str.substring(0,  pfxLen);  [CE]  ')'  expected  [FE]              NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  pfx  =  str.substring(0,  pfxLen);  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.substring(0,  pfxLen);	      	non-compiled	[CE]  ')'  expected	4	None	replace
54	[BUG]  [BUGGY]  pfx  =  str.indexOf(')');  [CE]  ')'  expected  [FE]                NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  pfx  =  str.indexOf(')');  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.indexOf(')');	      	non-compiled	[CE]  ')'  expected	4	None	replace
55	[BUG]  [BUGGY]  Integer  str  =  createBigInteger(pfx  -  1);  [CE]  ')'  expected  [FE]        NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  Integer  str  =  createBigInteger(pfx  -  1);  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createBigInteger(pfx  -  1);	      Integer    str    =    createBigInteger(pfx);    	non-compiled	[CE]  ')'  expected	14	None	replace
56	[BUG]  [BUGGY]  if(pfx.startsWith( ".java ")||  pfx.startsWith( ".java "))  {  [CE]  ')'  expected  [FE]        NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.startsWith( ".java ")||  pfx.startsWith( ".java "))  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( ".java ")||  pfx.startsWith( ".java "))  {	  if(pfx.startsWith(str))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
57	[BUG]  [BUGGY]  if(pfx.startsWith(hex_prefixes)||  pfx.startsWith(pfx))  {  [CE]  ')'  expected  [FE]          NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.startsWith(hex_prefixes)||  pfx.startsWith(pfx))  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith(hex_prefixes)||  pfx.startsWith(pfx))  {	  if(pfx.startsWith(str)||    pfx.startsWith(pfx))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
58	[BUG]  [BUGGY]  if(pfx.startsWith(str)||  pfx.startsWith(hex_prefixes))  {  [CE]  ')'  expected  [FE]            NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.startsWith(str)||  pfx.startsWith(hex_prefixes))  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith(str)||  pfx.startsWith(hex_prefixes))  {	  if(pfx.startsWith(str)||    pfx.startsWith(pfx))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
59	[BUG]  [BUGGY]  if(pfx.startsWith( ". ")||  pfx.endsWith( ".0 "))  {  [CE]  ')'  expected  [FE]            NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.startsWith( ". ")||  pfx.endsWith( ".0 "))  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( ". ")||  pfx.endsWith( ".0 "))  {	  if(pfx.startsWith(str)||    pfx.endsWith(   ".0   "))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
60	[BUG]  [BUGGY]  if(pfx.startsWith( "0 ")||  pfx.endsWith( ".0 "))  {  [CE]  ')'  expected  [FE]              NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.startsWith( "0 ")||  pfx.endsWith( ".0 "))  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "0 ")||  pfx.endsWith( ".0 "))  {	  if(pfx.startsWith(str)||    pfx.endsWith(   ".0   "))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
61	[BUG]  [BUGGY]  if(pfx.startsWith( "0 ")||  pfx.startsWith( "0 "))  {  [CE]  ')'  expected  [FE]          NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.startsWith( "0 ")||  pfx.startsWith( "0 "))  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "0 ")||  pfx.startsWith( "0 "))  {	  if(pfx.startsWith(str)||    pfx.startsWith(   "0   "))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
62	[BUG]  [BUGGY]  if(pfx.startsWith( ". ")||  pfx.startsWith( ".0 "))  {  [CE]  ')'  expected  [FE]            NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.startsWith( ". ")||  pfx.startsWith( ".0 "))  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( ". ")||  pfx.startsWith( ".0 "))  {	  if(pfx.startsWith(str)||    pfx.startsWith(   "0   "))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
63	[BUG]  [BUGGY]  int  pfxLen  =  hex_prefixes.length();  [CE]  ')'  expected  [FE]        NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  int  pfxLen  =  hex_prefixes.length();  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	int  pfxLen  =  hex_prefixes.length();	      int    pfxLen    =    str.length();    	non-compiled	[CE]  ')'  expected	5	None	replace
64	[BUG]  [BUGGY]  int  pfxLen  =  str.length()  -  1;  [CE]  ')'  expected  [FE]          NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  int  pfxLen  =  str.length()  -  1;  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	int  pfxLen  =  str.length()  -  1;	      int    pfxLen    =    str.length();    	non-compiled	[CE]  ')'  expected	5	None	replace
65	[BUG]  [BUGGY]  pfx  +=  str.length();  [CE]  ')'  expected  [FE]              NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  pfx  +=  str.length();  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  +=  str.length();	      	non-compiled	[CE]  ')'  expected	4	None	replace
66	[BUG]  [BUGGY]  Integer  str  =  createBigDecimal(pfx);  [CE]  ')'  expected  [FE]        NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  Integer  str  =  createBigDecimal(pfx);  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createBigDecimal(pfx);	      Integer    str    =    createBigInteger(pfx);    	non-compiled	[CE]  ')'  expected	14	None	replace
67	[BUG]  [BUGGY]  if(pfx.startsWith( "0x ")||  pfx.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]        NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.startsWith( "0x ")||  pfx.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "0x ")||  pfx.charAt(pfxLen  -  1)!=  '0')  {	  if(str.startsWith(pfx)||    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	10	None	replace
68	[BUG]  [BUGGY]  if(pfx.length()  ==  0  ||  str.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]          NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.length()  ==  0  ||  str.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.length()  ==  0  ||  str.charAt(pfxLen  -  1)!=  '0')  {	  if(str.startsWith(pfx)||    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	10	None	replace
69	[BUG]  [BUGGY]  Integer  pfx  =  createBigInteger(str);  [CE]  ')'  expected  [FE]        NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  Integer  pfx  =  createBigInteger(str);  [BUGGY]    if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfx  =  createBigInteger(str);	      Integer    pfx    =    createBigInteger(pfx);    	non-compiled	[CE]  ')'  expected	11	None	replace
70	[BUG]  [BUGGY]  if(pfx.startsWith( "0 ")||  pfx.startsWith( ".0 "))  {  [CE]  ')'  expected  [FE]          NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.startsWith( "0 ")||  pfx.startsWith( ".0 "))  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "0 ")||  pfx.startsWith( ".0 "))  {	  if(pfx.startsWith(str)||    pfx.startsWith(   "0   "))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
71	[BUG]  [BUGGY]  if(pfx.endsWith( ".java "))  {  [CE]  ')'  expected  [FE]        NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.endsWith( ".java "))  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.endsWith( ".java "))  {	  if(pfx.startsWith(str))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
72	[BUG]  [BUGGY]  if(pfx.length()  ==  0  ||  pfx.startsWith( ". "))  {  [CE]  ')'  expected  [FE]          NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.length()  ==  0  ||  pfx.startsWith( ". "))  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.length()  ==  0  ||  pfx.startsWith( ". "))  {	  if(pfx.startsWith(str))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
73	[BUG]  [BUGGY]  if(pfx.length()  ==  0)  {  [CE]  ')'  expected  [FE]            NumberFormatException    [CONTEXT]    if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {    [BUGGY]  if(pfx.length()  ==  0)  {  [BUGGY]    pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.length()  ==  0)  {	  if(pfx.startsWith(str))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
