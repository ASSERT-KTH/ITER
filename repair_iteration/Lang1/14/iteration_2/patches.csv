bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(pfx.startsWith( "0x ")||  pfx.startsWith( ".0x "))  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( "0x ")||  pfx.startsWith( ".0x "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "0x ")||  pfx.startsWith( ".0x "))  {	  if(pfx.startsWith(pfx)||    pfx.startsWith(   "0   "))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
2	[BUG]  [BUGGY]  if(pfx.startsWith(hex_prefixes)&&  pfx.startsWith(pfx))  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith(hex_prefixes)&&  pfx.startsWith(pfx))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith(hex_prefixes)&&  pfx.startsWith(pfx))  {	  if(pfx.startsWith(hex_prefixes)||    pfx.startsWith(pfx))    {    	non-compiled	[CE]  ')'  expected	57	None	replace
3	[BUG]  [BUGGY]  if(pfx.startsWith(hex_prefixes)||  pfx.startsWith(hex_prefixes))  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith(hex_prefixes)||  pfx.startsWith(hex_prefixes))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith(hex_prefixes)||  pfx.startsWith(hex_prefixes))  {	  if(pfx.startsWith(hex_prefixes)||    pfx.startsWith(pfx))    {    	non-compiled	[CE]  ')'  expected	57	None	replace
4	[BUG]  [BUGGY]  if(pfx.startsWith(hex_prefixes)||  pfx.endsWith( "- "))  {  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith(hex_prefixes)||  pfx.endsWith( "- "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith(hex_prefixes)||  pfx.endsWith( "- "))  {	  if(pfx.startsWith(hex_prefixes)||    pfx.startsWith(pfx))    {    	non-compiled	[CE]  ')'  expected	57	None	replace
5	[BUG]  [BUGGY]  pfx  =  str.charAt(pfxLen  -  4);  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.charAt(pfxLen  -  4);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.charAt(pfxLen  -  4);	  pfx    =    str.charAt(pfxLen    -    2);    	non-compiled	[CE]  ')'  expected	34	None	replace
6	[BUG]  [BUGGY]  if(pfxLen.startsWith(str)&&  str.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfxLen.startsWith(str)&&  str.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfxLen.startsWith(str)&&  str.charAt(pfxLen  -  1)!=  '0')  {	  if(pfxLen.startsWith(str)||    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	43	None	replace
7	[BUG]  [BUGGY]  if(pfxLen.startsWith(str)||  str.charAt(pfxLen  -  1)  ==  '0')  {  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfxLen.startsWith(str)||  str.charAt(pfxLen  -  1)  ==  '0')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfxLen.startsWith(str)||  str.charAt(pfxLen  -  1)  ==  '0')  {	  if(pfxLen.startsWith(str)||    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	43	None	replace
8	[BUG]  [BUGGY]  if(pfx.startsWith(pfx)||  str.startsWith(pfx))  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith(pfx)||  str.startsWith(pfx))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith(pfx)||  str.startsWith(pfx))  {	  if(str.startsWith(pfx)||    pfx.startsWith(pfx))    {    	non-compiled	[CE]  ')'  expected	19	None	replace
9	[BUG]  [BUGGY]  if(pfxLen!=  0  &&  str.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfxLen!=  0  &&  str.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfxLen!=  0  &&  str.charAt(pfxLen  -  1)!=  '0')  {	  if(pfxLen    ==    0    &&    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	49	None	replace
10	[BUG]  [BUGGY]  if(pfxLen  >=  0  &&  str.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfxLen  >=  0  &&  str.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfxLen  >=  0  &&  str.charAt(pfxLen  -  1)!=  '0')  {	  if(pfxLen    ==    0    &&    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	49	None	replace
11	[BUG]  [BUGGY]  String  str  =  pfx.substring(0,  pfxLen  +  4);  [CE]  ')'  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  String  str  =  pfx.substring(0,  pfxLen  +  4);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	String  str  =  pfx.substring(0,  pfxLen  +  4);	  String    str    =    pfx.substring(0,    pfxLen    +    3);    	non-compiled	[CE]  ')'  expected	8	None	replace
12	[BUG]  [BUGGY]  Integer  str  =  createInteger(pfx,  hex_prefixes);  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  str  =  createInteger(pfx,  hex_prefixes);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createInteger(pfx,  hex_prefixes);	  Integer    str    =    createInteger(pfx);    	non-compiled	[CE]  ')'  expected	44	None	replace
13	[BUG]  [BUGGY]  Integer  str  =  createLong(pfx);  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  str  =  createLong(pfx);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createLong(pfx);	  Integer    str    =    createInteger(pfx);    	non-compiled	[CE]  ')'  expected	44	None	replace
14	[BUG]  [BUGGY]  Integer  str  =  createInteger(pfx,  0);  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  str  =  createInteger(pfx,  0);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createInteger(pfx,  0);	  Integer    str    =    createInteger(pfx);    	non-compiled	[CE]  ')'  expected	44	None	replace
15	[BUG]  [BUGGY]  pfx  =  str.indexOf(')',  pfx);  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.indexOf(')',  pfx);  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.indexOf(')',  pfx);	  pfx    =    str.indexOf(')');    	non-compiled	[CE]  ')'  expected	54	None	replace
16	[BUG]  [BUGGY]  pfx  =  str.indexOf(')',  pfxLen);  [CE]  ')'  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.indexOf(')',  pfxLen);  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.indexOf(')',  pfxLen);	  pfx    =    str.indexOf(')');    	non-compiled	[CE]  ')'  expected	54	None	replace
17	[BUG]  [BUGGY]  pfx  =  str.lastIndexOf(')');  [CE]  ')'  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.lastIndexOf(')');  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.lastIndexOf(')');	  pfx    =    str.indexOf(')');    	non-compiled	[CE]  ')'  expected	54	None	replace
18	[BUG]  [BUGGY]  pfx  =  str.indexOf(')'  +  1);  [CE]  ')'  expected  [FE]                          NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.indexOf(')'  +  1);  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.indexOf(')'  +  1);	  pfx    =    str.indexOf(')');    	non-compiled	[CE]  ')'  expected	54	None	replace
19	[BUG]  [BUGGY]  if(pfxLen.startsWith(pfx)||  str.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfxLen.startsWith(pfx)||  str.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfxLen.startsWith(pfx)||  str.charAt(pfxLen  -  1)!=  '0')  {	  if(pfx.startsWith(pfx)||    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	42	None	replace
20	[BUG]  [BUGGY]  if(pfx.startsWith(pfx)||  str.charAt(pfxLen  -  1)  ==  '0')  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith(pfx)||  str.charAt(pfxLen  -  1)  ==  '0')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith(pfx)||  str.charAt(pfxLen  -  1)  ==  '0')  {	  if(pfx.startsWith(pfx)||    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	42	None	replace
21	[BUG]  [BUGGY]  if(pfx.endsWith( ".java ")||  pfx.endsWith( ".java "))  {  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.endsWith( ".java ")||  pfx.endsWith( ".java "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.endsWith( ".java ")||  pfx.endsWith( ".java "))  {	  if(pfx.endsWith(   ".java   "))    {    	non-compiled	[CE]  ')'  expected	71	None	replace
22	[BUG]  [BUGGY]  if(pfx.startsWith( ".java "))  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( ".java "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( ".java "))  {	  if(pfx.endsWith(   ".java   "))    {    	non-compiled	[CE]  ')'  expected	71	None	replace
23	[BUG]  [BUGGY]  Integer  str  =  createBigInteger(pfxLen  -  1);  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  str  =  createBigInteger(pfxLen  -  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createBigInteger(pfxLen  -  1);	  Integer    str    =    createBigInteger(pfx    -    1);    	non-compiled	[CE]  ')'  expected	55	None	replace
24	[BUG]  [BUGGY]  if(pfxLen  >  0  ||  str.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfxLen  >  0  ||  str.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfxLen  >  0  ||  str.charAt(pfxLen  -  1)!=  '0')  {	  if(pfxLen    >=    0    ||    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	50	None	replace
25	[BUG]  [BUGGY]  if(pfxLen!=  0  ||  str.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfxLen!=  0  ||  str.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfxLen!=  0  ||  str.charAt(pfxLen  -  1)!=  '0')  {	  if(pfxLen    >=    0    ||    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	50	None	replace
26	[BUG]  [BUGGY]  pfx  =  str.charAt(pfxLen  -  1)+  1;  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.charAt(pfxLen  -  1)+  1;  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.charAt(pfxLen  -  1)+  1;	  pfx    =    str.charAt(pfxLen    -    1    +    1);    	non-compiled	[CE]  ')'  expected	35	None	replace
27	[BUG]  [BUGGY]  pfx  =  str.charAt(pfxLen  /  1  +  1);  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.charAt(pfxLen  /  1  +  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.charAt(pfxLen  /  1  +  1);	  pfx    =    str.charAt(pfxLen    -    1    +    1);    	non-compiled	[CE]  ')'  expected	35	None	replace
28	[BUG]  [BUGGY]  Integer  pfx  =  createInteger(0);  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  pfx  =  createInteger(0);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfx  =  createInteger(0);	  Integer    pfx    =    createInteger(pfx);    	non-compiled	[CE]  ')'  expected	24	None	replace
29	[BUG]  [BUGGY]  if(pfxLen  ==  0  ||  str.charAt(pfxLen  -  2)!=  '0')  {  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfxLen  ==  0  ||  str.charAt(pfxLen  -  2)!=  '0')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfxLen  ==  0  ||  str.charAt(pfxLen  -  2)!=  '0')  {	  if(pfxLen    ==    0    ||    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	48	None	replace
30	[BUG]  [BUGGY]  if(pfx.startsWith( "0x ")||  pfx.endsWith( ".0x "))  {  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( "0x ")||  pfx.endsWith( ".0x "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "0x ")||  pfx.endsWith( ".0x "))  {	  if(pfx.startsWith(   "0   ")||    pfx.endsWith(   ".0   "))    {    	non-compiled	[CE]  ')'  expected	60	None	replace
31	[BUG]  [BUGGY]  if(pfx.startsWith( ". ")||  pfx.startsWith( ".java "))  {  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( ". ")||  pfx.startsWith( ".java "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( ". ")||  pfx.startsWith( ".java "))  {	  if(pfx.startsWith(   ".java   ")||    pfx.startsWith(   ".java   "))    {    	non-compiled	[CE]  ')'  expected	56	None	replace
32	[BUG]  [BUGGY]  if(pfx.startsWith(str)&&  pfx.endsWith( ".0 "))  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith(str)&&  pfx.endsWith( ".0 "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith(str)&&  pfx.endsWith( ".0 "))  {	  if(pfx.startsWith(str)&&    pfx.startsWith(pfx))    {    	non-compiled	[CE]  ')'  expected	18	None	replace
33	[BUG]  [BUGGY]  if(pfx.startsWith(str)&&  pfx.charAt(pfxLen  -  1))  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith(str)&&  pfx.charAt(pfxLen  -  1))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith(str)&&  pfx.charAt(pfxLen  -  1))  {	  if(pfx.startsWith(str)&&    pfx.startsWith(pfx))    {    	non-compiled	[CE]  ')'  expected	18	None	replace
34	[BUG]  [BUGGY]  pfx  =  str.substring(pfx.length();  [CE]  ')'  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.substring(pfx.length();  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.substring(pfx.length();	  pfx    =    str.substring(pfx.length()    +    1);    	non-compiled	[CE]  ')'  expected	10	None	replace
35	[BUG]  [BUGGY]  pfx  =  str.charAt(pfx  +  1);  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.charAt(pfx  +  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.charAt(pfx  +  1);	  pfx    =    str.charAt(pfx);    	non-compiled	[CE]  ')'  expected	14	None	replace
36	[BUG]  [BUGGY]  if(pfx.startsWith( ".0x ")||  pfx.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( ".0x ")||  pfx.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( ".0x ")||  pfx.charAt(pfxLen  -  1)!=  '0')  {	  if(pfx.startsWith(   "0x   ")||    pfx.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	67	None	replace
37	[BUG]  [BUGGY]  if(pfx.startsWith( "0x ")||  pfx.charAt(pfxLen  -  1)  ==  '0')  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( "0x ")||  pfx.charAt(pfxLen  -  1)  ==  '0')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "0x ")||  pfx.charAt(pfxLen  -  1)  ==  '0')  {	  if(pfx.startsWith(   "0x   ")||    pfx.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	67	None	replace
38	[BUG]  [BUGGY]  Integer  pfx  =  createNumber(pfx);  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  pfx  =  createNumber(pfx);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfx  =  createNumber(pfx);	  Integer    pfx    =    createBigInteger(str);    	non-compiled	[CE]  ')'  expected	69	None	replace
39	[BUG]  [BUGGY]  if(pfx.startsWith( ".0 "))  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( ".0 "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( ".0 "))  {	  if(pfx.startsWith(   ".   "))    {    	non-compiled	[CE]  ')'  expected	30	None	replace
40	[BUG]  [BUGGY]  pfx  =  str.substring(0,  pfx.length()  -  1);  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.substring(0,  pfx.length()  -  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.substring(0,  pfx.length()  -  1);	  pfx    =    str.substring(0,    pfx.length());    	non-compiled	[CE]  ')'  expected	47	None	replace
41	[BUG]  [BUGGY]  pfx  =  str.substring(0,  pfx.length()  +  1);  [CE]  ')'  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.substring(0,  pfx.length()  +  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.substring(0,  pfx.length()  +  1);	  pfx    =    str.substring(0,    pfx.length());    	non-compiled	[CE]  ')'  expected	47	None	replace
42	[BUG]  [BUGGY]  pfx  =  str.substring(0,  pfx.length()  -  2);  [CE]  ')'  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.substring(0,  pfx.length()  -  2);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.substring(0,  pfx.length()  -  2);	  pfx    =    str.substring(0,    pfx.length());    	non-compiled	[CE]  ')'  expected	47	None	replace
43	[BUG]  [BUGGY]  final  int  pfxLen  =  pfx.length();  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  final  int  pfxLen  =  pfx.length();  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	final  int  pfxLen  =  pfx.length();	  final    int    pfxLen    =    str.length();    	non-compiled	[CE]  ')'  expected	33	None	replace
44	[BUG]  [BUGGY]  final  int  pfxLen  =  str.length()  +  1;  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  final  int  pfxLen  =  str.length()  +  1;  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	final  int  pfxLen  =  str.length()  +  1;	  final    int    pfxLen    =    str.length();    	non-compiled	[CE]  ')'  expected	33	None	replace
45	[BUG]  [BUGGY]  final  char  pfxLen  =  str.length();  [CE]  ')'  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  final  char  pfxLen  =  str.length();  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	final  char  pfxLen  =  str.length();	  final    int    pfxLen    =    str.length();    	non-compiled	[CE]  ')'  expected	33	None	replace
46	[BUG]  [BUGGY]  pfxLen  =  pfx.length()  +  1;  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfxLen  =  pfx.length()  +  1;  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfxLen  =  pfx.length()  +  1;	  pfxLen    =    pfx.length();    	non-compiled	[CE]  ')'  expected	3	None	replace
47	[BUG]  [BUGGY]  pfxLen  =  pfx.length()  -  1;  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfxLen  =  pfx.length()  -  1;  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfxLen  =  pfx.length()  -  1;	  pfxLen    =    pfx.length();    	non-compiled	[CE]  ')'  expected	3	None	replace
48	[BUG]  [BUGGY]  pfxLen  =  pfx.length()  +  2;  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfxLen  =  pfx.length()  +  2;  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfxLen  =  pfx.length()  +  2;	  pfxLen    =    pfx.length();    	non-compiled	[CE]  ')'  expected	3	None	replace
49	[BUG]  [BUGGY]  char  pfxLen  =  hex_prefixes.length();  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  char  pfxLen  =  hex_prefixes.length();  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	char  pfxLen  =  hex_prefixes.length();	  int    pfxLen    =    hex_prefixes.length();    	non-compiled	[CE]  ')'  expected	63	None	replace
50	[BUG]  [BUGGY]  Integer  pfxLen  =  hex_prefixes.length();  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  pfxLen  =  hex_prefixes.length();  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfxLen  =  hex_prefixes.length();	  int    pfxLen    =    hex_prefixes.length();    	non-compiled	[CE]  ')'  expected	63	None	replace
51	[BUG]  [BUGGY]  int  pfxLen  =  pfx.length()  +  1;  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  int  pfxLen  =  pfx.length()  +  1;  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	int  pfxLen  =  pfx.length()  +  1;	  int    pfxLen    =    pfx.length();    	non-compiled	[CE]  ')'  expected	37	None	replace
52	[BUG]  [BUGGY]  char  pfxLen  =  pfx.length();  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  char  pfxLen  =  pfx.length();  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	char  pfxLen  =  pfx.length();	  int    pfxLen    =    pfx.length();    	non-compiled	[CE]  ')'  expected	37	None	replace
53	[BUG]  [BUGGY]  int  pfxLen  =  pfx.length()  -  1;  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  int  pfxLen  =  pfx.length()  -  1;  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	int  pfxLen  =  pfx.length()  -  1;	  int    pfxLen    =    pfx.length();    	non-compiled	[CE]  ')'  expected	37	None	replace
54	[BUG]  [BUGGY]  pfx  =  str.substring(pfxLen  +  1);  [CE]  ')'  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.substring(pfxLen  +  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.substring(pfxLen  +  1);	  pfx    =    str.substring(pfxLen    -    1);    	non-compiled	[CE]  ')'  expected	11	None	replace
55	[BUG]  [BUGGY]  pfx  =  str.substring(pfxLen  -  2);  [CE]  ')'  expected  [FE]                          NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.substring(pfxLen  -  2);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.substring(pfxLen  -  2);	  pfx    =    str.substring(pfxLen    -    1);    	non-compiled	[CE]  ')'  expected	11	None	replace
56	[BUG]  [BUGGY]  pfx  =  str.substring(0,  pfxLen  -  1);  [CE]  ')'  expected  [FE]                            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.substring(0,  pfxLen  -  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.substring(0,  pfxLen  -  1);	  pfx    =    str.substring(pfxLen    -    1);    	non-compiled	[CE]  ')'  expected	11	None	replace
57	[BUG]  [BUGGY]  Integer  pfx  =  createInteger(pfx  +  1);  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  pfx  =  createInteger(pfx  +  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfx  =  createInteger(pfx  +  1);	  Integer    pfx    =    createBigInteger(pfx    +    1);    	non-compiled	[CE]  ')'  expected	51	None	replace
58	[BUG]  [BUGGY]  if(pfx.startsWith(str)&&  str.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith(str)&&  str.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith(str)&&  str.charAt(pfxLen  -  1)!=  '0')  {	  if(pfx.startsWith(str)||    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	41	None	replace
59	[BUG]  [BUGGY]  String  str  =  pfx.substring(0,  pfx.length()  -  2);  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  String  str  =  pfx.substring(0,  pfx.length()  -  2);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	String  str  =  pfx.substring(0,  pfx.length()  -  2);	  String    str    =    pfx.substring(0,    pfx.length();    	non-compiled	[CE]  ')'  expected	23	None	replace
60	[BUG]  [BUGGY]  if(pfx.charAt(pfxLen  -  1)  ==  ')')  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.charAt(pfxLen  -  1)  ==  ')')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.charAt(pfxLen  -  1)  ==  ')')  {	  if(pfx.charAt(pfxLen    -    1)!=    ')')    {    	non-compiled	[CE]  ')'  expected	31	None	replace
61	[BUG]  [BUGGY]  if(pfx.charAt(pfxLen  -  1)!=  ')'  ||  pfxLen  >  0  ||  pfx.charAt(pfxLen  -  1)!=  ')'  {  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.charAt(pfxLen  -  1)!=  ')'  ||  pfxLen  >  0  ||  pfx.charAt(pfxLen  -  1)!=  ')'  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.charAt(pfxLen  -  1)!=  ')'  ||  pfxLen  >  0  ||  pfx.charAt(pfxLen  -  1)!=  ')'  {	  if(pfx.charAt(pfxLen    -    1)!=    ')')    {    	non-compiled	[CE]  ')'  expected	31	None	replace
62	[BUG]  [BUGGY]  if(pfx.charAt(pfxLen  -  1)  ==  ')'  ||  pfxLen  >  0  ||  pfx.charAt(pfxLen  -  1)!=  ')'  {  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.charAt(pfxLen  -  1)  ==  ')'  ||  pfxLen  >  0  ||  pfx.charAt(pfxLen  -  1)!=  ')'  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.charAt(pfxLen  -  1)  ==  ')'  ||  pfxLen  >  0  ||  pfx.charAt(pfxLen  -  1)!=  ')'  {	  if(pfx.charAt(pfxLen    -    1)!=    ')')    {    	non-compiled	[CE]  ')'  expected	31	None	replace
63	[BUG]  [BUGGY]  pfx  +=  pfx.length();  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  +=  pfx.length();  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  +=  pfx.length();	  pfx    +=    str.length();    	non-compiled	[CE]  ')'  expected	65	None	replace
64	[BUG]  [BUGGY]  pfx  +=  str.length()  +  1;  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  +=  str.length()  +  1;  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  +=  str.length()  +  1;	  pfx    +=    str.length();    	non-compiled	[CE]  ')'  expected	65	None	replace
65	[BUG]  [BUGGY]  pfx  +=  mant.length();  [CE]  ')'  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  +=  mant.length();  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  +=  mant.length();	  pfx    +=    str.length();    	non-compiled	[CE]  ')'  expected	65	None	replace
66	[BUG]  [BUGGY]  String  pfxLen  =  str.length();  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  String  pfxLen  =  str.length();  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	String  pfxLen  =  str.length();	  char    pfxLen    =    str.length();    	non-compiled	[CE]  ')'  expected	39	None	replace
67	[BUG]  [BUGGY]  char  pfxLen  =  str.length()  +  1;  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  char  pfxLen  =  str.length()  +  1;  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	char  pfxLen  =  str.length()  +  1;	  char    pfxLen    =    str.length();    	non-compiled	[CE]  ')'  expected	39	None	replace
68	[BUG]  [BUGGY]  if(pfx.startsWith( "-0 ")||  pfx.startsWith( ".0 "))  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( "-0 ")||  pfx.startsWith( ".0 "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "-0 ")||  pfx.startsWith( ".0 "))  {	  if(pfx.startsWith(   "-   ")||    pfx.startsWith(   ".0   "))    {    	non-compiled	[CE]  ')'  expected	28	None	replace
69	[BUG]  [BUGGY]  if(pfx.startsWith( ". ")||  pfx.startsWith( ".. "))  {  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( ". ")||  pfx.startsWith( ".. "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( ". ")||  pfx.startsWith( ".. "))  {	  if(pfx.startsWith(   ".   ")||    pfx.startsWith(   ".   "))    {    	non-compiled	[CE]  ')'  expected	29	None	replace
70	[BUG]  [BUGGY]  Integer  str  =  createBigDecimal(pfx,  exp);  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  str  =  createBigDecimal(pfx,  exp);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createBigDecimal(pfx,  exp);	  Integer    str    =    createBigDecimal(pfx);    	non-compiled	[CE]  ')'  expected	66	None	replace
71	[BUG]  [BUGGY]  Integer  str  =  createBigDecimal(pfx,  hex_prefixes);  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  str  =  createBigDecimal(pfx,  hex_prefixes);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createBigDecimal(pfx,  hex_prefixes);	  Integer    str    =    createBigDecimal(pfx);    	non-compiled	[CE]  ')'  expected	66	None	replace
72	[BUG]  [BUGGY]  pfx  =  str.substring(0,  pfxLen  +  1);  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.substring(0,  pfxLen  +  1);  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.substring(0,  pfxLen  +  1);	  pfx    =    str.substring(0,    pfxLen);    	non-compiled	[CE]  ')'  expected	53	None	replace
73	[BUG]  [BUGGY]  pfx  =  str.substring(0,  pfxLen  +  2);  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.substring(0,  pfxLen  +  2);  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.substring(0,  pfxLen  +  2);	  pfx    =    str.substring(0,    pfxLen);    	non-compiled	[CE]  ')'  expected	53	None	replace
74	[BUG]  [BUGGY]  pfx  =  str.substring(0,  pfxLen  +  3);  [CE]  ')'  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.substring(0,  pfxLen  +  3);  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.substring(0,  pfxLen  +  3);	  pfx    =    str.substring(0,    pfxLen);    	non-compiled	[CE]  ')'  expected	53	None	replace
75	[BUG]  [BUGGY]  String  str  =  pfx.substring(0,  pfxLen  -  2);  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  String  str  =  pfx.substring(0,  pfxLen  -  2);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	String  str  =  pfx.substring(0,  pfxLen  -  2);	  String    str    =    pfx.substring(0,    pfxLen    -    1);    	non-compiled	[CE]  ')'  expected	6	None	replace
76	[BUG]  [BUGGY]  String  str  =  pfx.substring(0,  pfxLen  -  4);  [CE]  ')'  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  String  str  =  pfx.substring(0,  pfxLen  -  4);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	String  str  =  pfx.substring(0,  pfxLen  -  4);	  String    str    =    pfx.substring(0,    pfxLen    -    1);    	non-compiled	[CE]  ')'  expected	6	None	replace
77	[BUG]  [BUGGY]  if(pfx.startsWith( "0 ")||  pfx.startsWith( "0.0 "))  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( "0 ")||  pfx.startsWith( "0.0 "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "0 ")||  pfx.startsWith( "0.0 "))  {	  if(pfx.startsWith(   "0   ")||    pfx.startsWith(   ".0   "))    {    	non-compiled	[CE]  ')'  expected	70	None	replace
78	[BUG]  [BUGGY]  if(pfx!=  null  ||  pfx.length()  ==  0)  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx!=  null  ||  pfx.length()  ==  0)  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx!=  null  ||  pfx.length()  ==  0)  {	  if(pfx.length()    ==    0)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
79	[BUG]  [BUGGY]  if(pfx.length()  ==  0  ||  pfx.length()  ==  0)  {  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.length()  ==  0  ||  pfx.length()  ==  0)  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.length()  ==  0  ||  pfx.length()  ==  0)  {	  if(pfx.length()    ==    0)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
80	[BUG]  [BUGGY]  if(pfx.length()  ==  0  ||  pfx.charAt(pfx.length()  -  1)!=  ')'  {  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.length()  ==  0  ||  pfx.charAt(pfx.length()  -  1)!=  ')'  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.length()  ==  0  ||  pfx.charAt(pfx.length()  -  1)!=  ')'  {	  if(pfx.length()    ==    0)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
81	[BUG]  [BUGGY]  Integer  pfx  =  createInt(pfx);  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  pfx  =  createInt(pfx);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfx  =  createInt(pfx);	  Integer    pfx    =    createLong(pfx);    	non-compiled	[CE]  ')'  expected	25	None	replace
82	[BUG]  [BUGGY]  if(pfx.startsWith( "- ")||  pfx.startsWith( "-))  {  [CE]  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( "- ")||  pfx.startsWith( "-))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "- ")||  pfx.startsWith( "-))  {	  if(pfx.startsWith(   "-   ")||    pfx.startsWith(   "-   "))    {    	non-compiled	[CE]  	27	None	replace
83	[BUG]  [BUGGY]  Integer  pfxLen  =  pfx.length();  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  pfxLen  =  pfx.length();  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfxLen  =  pfx.length();	  Integer    pfxLen    =    str.length();    	non-compiled	[CE]  ')'  expected	40	None	replace
84	[BUG]  [BUGGY]  Integer  pfxLen  =  str.length()  +  1;  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  pfxLen  =  str.length()  +  1;  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfxLen  =  str.length()  +  1;	  Integer    pfxLen    =    str.length();    	non-compiled	[CE]  ')'  expected	40	None	replace
85	[BUG]  [BUGGY]  Integer  pfxLen  =  str.lastIndexOf('.');  [CE]  ')'  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  pfxLen  =  str.lastIndexOf('.');  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfxLen  =  str.lastIndexOf('.');	  Integer    pfxLen    =    str.length();    	non-compiled	[CE]  ')'  expected	40	None	replace
86	[BUG]  [BUGGY]  pfx  =  str.substring(pfx.length()  +  2);  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.substring(pfx.length()  +  2);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.substring(pfx.length()  +  2);	  pfx    =    str.substring(pfx.length());    	non-compiled	[CE]  ')'  expected	9	None	replace
87	[BUG]  [BUGGY]  Integer  pfx  =  createInteger(pfx.length());  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  pfx  =  createInteger(pfx.length());  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfx  =  createInteger(pfx.length());	  Integer    pfx    =    createBigInteger(pfx.length());    	non-compiled	[CE]  ')'  expected	26	None	replace
88	[BUG]  [BUGGY]  Integer  pfx  =  createBigInteger(pfx.length()  +  1);  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  pfx  =  createBigInteger(pfx.length()  +  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfx  =  createBigInteger(pfx.length()  +  1);	  Integer    pfx    =    createBigInteger(pfx.length());    	non-compiled	[CE]  ')'  expected	26	None	replace
89	[BUG]  [BUGGY]  Integer  pfx  =  createLong(pfx.length());  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  pfx  =  createLong(pfx.length());  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfx  =  createLong(pfx.length());	  Integer    pfx    =    createBigInteger(pfx.length());    	non-compiled	[CE]  ')'  expected	26	None	replace
90	[BUG]  [BUGGY]  Integer  pfx  =  createBigInteger(pfx.length()  -  1);  [CE]  ')'  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  pfx  =  createBigInteger(pfx.length()  -  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfx  =  createBigInteger(pfx.length()  -  1);	  Integer    pfx    =    createBigInteger(pfx.length());    	non-compiled	[CE]  ')'  expected	26	None	replace
91	[BUG]  [BUGGY]  if(pfx.startsWith( ".0x ")||  pfx.startsWith( ".0x "))  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( ".0x ")||  pfx.startsWith( ".0x "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( ".0x ")||  pfx.startsWith( ".0x "))  {	  if(pfx.startsWith(   "0x   ")||    pfx.startsWith(   "0x   "))    {    	non-compiled	[CE]  ')'  expected	15	None	replace
92	[BUG]  [BUGGY]  Integer  str  =  createBigInteger(pfx,  0);  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  str  =  createBigInteger(pfx,  0);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createBigInteger(pfx,  0);	  Integer    str    =    createBigInteger(pfx,    hex_prefixes);    	non-compiled	[CE]  ')'  expected	45	None	replace
93	[BUG]  [BUGGY]  Integer  str  =  createBigInteger(pfx,  1);  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  str  =  createBigInteger(pfx,  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createBigInteger(pfx,  1);	  Integer    str    =    createBigInteger(pfx,    hex_prefixes);    	non-compiled	[CE]  ')'  expected	45	None	replace
94	[BUG]  [BUGGY]  Integer  str  =  createBigInteger(pfx,  16);  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  str  =  createBigInteger(pfx,  16);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createBigInteger(pfx,  16);	  Integer    str    =    createBigInteger(pfx,    hex_prefixes);    	non-compiled	[CE]  ')'  expected	45	None	replace
95	[BUG]  [BUGGY]  Integer  str  =  createBigInteger(pfx,  4);  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  str  =  createBigInteger(pfx,  4);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createBigInteger(pfx,  4);	  Integer    str    =    createBigInteger(pfx,    hex_prefixes);    	non-compiled	[CE]  ')'  expected	45	None	replace
96	[BUG]  [BUGGY]  if(pfx.length()  ==  0  ||  pfx.startsWith( "- "))  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.length()  ==  0  ||  pfx.startsWith( "- "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.length()  ==  0  ||  pfx.startsWith( "- "))  {	  if(pfx.length()    ==    0    ||    pfx.startsWith(   ".   "))    {    	non-compiled	[CE]  ')'  expected	72	None	replace
97	[BUG]  [BUGGY]  if(pfx.length()  ==  0  ||  pfx.startsWith( ".java "))  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.length()  ==  0  ||  pfx.startsWith( ".java "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.length()  ==  0  ||  pfx.startsWith( ".java "))  {	  if(pfx.length()    ==    0    ||    pfx.startsWith(   ".   "))    {    	non-compiled	[CE]  ')'  expected	72	None	replace
98	[BUG]  [BUGGY]  if(pfx.length()  ==  0  &&  str.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.length()  ==  0  &&  str.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.length()  ==  0  &&  str.charAt(pfxLen  -  1)!=  '0')  {	  if(pfx.length()    ==    0    ||    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	68	None	replace
99	[BUG]  [BUGGY]  Integer  str  =  createBigInteger(pfx.length()  +  1);  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  str  =  createBigInteger(pfx.length()  +  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createBigInteger(pfx.length()  +  1);	  Integer    str    =    createBigInteger(pfx.length());    	non-compiled	[CE]  ')'  expected	46	None	replace
100	[BUG]  [BUGGY]  Integer  str  =  createBigInteger(pfx.length()  -  1);  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  str  =  createBigInteger(pfx.length()  -  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createBigInteger(pfx.length()  -  1);	  Integer    str    =    createBigInteger(pfx.length());    	non-compiled	[CE]  ')'  expected	46	None	replace
101	[BUG]  [BUGGY]  Integer  str  =  createInteger(pfx.length());  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  str  =  createInteger(pfx.length());  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createInteger(pfx.length());	  Integer    str    =    createBigInteger(pfx.length());    	non-compiled	[CE]  ')'  expected	46	None	replace
102	[BUG]  [BUGGY]  Integer  str  =  createLong(pfx.length());  [CE]  ')'  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  str  =  createLong(pfx.length());  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createLong(pfx.length());	  Integer    str    =    createBigInteger(pfx.length());    	non-compiled	[CE]  ')'  expected	46	None	replace
103	[BUG]  [BUGGY]  if(pfx.startsWith(pfx)||  pfx.startsWith(hex_prefixes))  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith(pfx)||  pfx.startsWith(hex_prefixes))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith(pfx)||  pfx.startsWith(hex_prefixes))  {	  if(pfx.startsWith(str)||    pfx.startsWith(hex_prefixes))    {    	non-compiled	[CE]  ')'  expected	58	None	replace
104	[BUG]  [BUGGY]  pfx  =  str.charAt(pfxLen  +  2);  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.charAt(pfxLen  +  2);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.charAt(pfxLen  +  2);	  pfx    =    str.charAt(pfxLen    +    1);    	non-compiled	[CE]  ')'  expected	12	None	replace
105	[BUG]  [BUGGY]  pfx  =  str.charAt(pfxLen  +  3);  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.charAt(pfxLen  +  3);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.charAt(pfxLen  +  3);	  pfx    =    str.charAt(pfxLen    +    1);    	non-compiled	[CE]  ')'  expected	12	None	replace
106	[BUG]  [BUGGY]  pfx  =  str.charAt(pfxLen  *  1);  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.charAt(pfxLen  *  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.charAt(pfxLen  *  1);	  pfx    =    str.charAt(pfxLen    +    1);    	non-compiled	[CE]  ')'  expected	12	None	replace
107	[BUG]  [BUGGY]  if(pfxLen  ==  0  &&  str.charAt(pfxLen  -  1)!=  '0'  ||  pfxLen  >  '9')  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfxLen  ==  0  &&  str.charAt(pfxLen  -  1)!=  '0'  ||  pfxLen  >  '9')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfxLen  ==  0  &&  str.charAt(pfxLen  -  1)!=  '0'  ||  pfxLen  >  '9')  {	  if(pfxLen    ==    0    &&    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	49	None	replace
108	[BUG]  [BUGGY]  pfx  =  str.substring(pfx.length()  -  2);  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.substring(pfx.length()  -  2);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.substring(pfx.length()  -  2);	  pfx    =    str.substring(pfx.length());    	non-compiled	[CE]  ')'  expected	9	None	replace
109	[BUG]  [BUGGY]  if(pfx.startsWith( ".- ")||  pfx.startsWith( ".- "))  {  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( ".- ")||  pfx.startsWith( ".- "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( ".- ")||  pfx.startsWith( ".- "))  {	  if(pfx.startsWith(   "-   ")||    pfx.startsWith(   "-   "))    {    	non-compiled	[CE]  ')'  expected	27	None	replace
110	[BUG]  [BUGGY]  if(pfx.startsWith( "- ")||  pfx.startsWith( ".- "))  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( "- ")||  pfx.startsWith( ".- "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "- ")||  pfx.startsWith( ".- "))  {	  if(pfx.startsWith(   "-   ")||    pfx.startsWith(   "-   "))    {    	non-compiled	[CE]  ')'  expected	27	None	replace
111	[BUG]  [BUGGY]  String  str  =  str.substring(0,  pfx.length();  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  String  str  =  str.substring(0,  pfx.length();  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	String  str  =  str.substring(0,  pfx.length();	  String    str    =    pfx.substring(0,    pfx.length();    	non-compiled	[CE]  ')'  expected	23	None	replace
112	[BUG]  [BUGGY]  if(pfxLen  ==  0  ||  pfx.startsWith(pfx)||  pfx.startsWith(pfx))  {  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfxLen  ==  0  ||  pfx.startsWith(pfx)||  pfx.startsWith(pfx))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfxLen  ==  0  ||  pfx.startsWith(pfx)||  pfx.startsWith(pfx))  {	  if(pfx.startsWith(pfx)||    pfx.startsWith(pfx))    {    	non-compiled	[CE]  ')'  expected	20	None	replace
113	[BUG]  [BUGGY]  char  pfxLen  =  str.charAt(pfx.length()  -  1);  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  char  pfxLen  =  str.charAt(pfx.length()  -  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	char  pfxLen  =  str.charAt(pfx.length()  -  1);	  char    pfxLen    =    str.length();    	non-compiled	[CE]  ')'  expected	39	None	replace
114	[BUG]  [BUGGY]  pfx  =  str.substring(0,  pfx.length()  -  4);  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.substring(0,  pfx.length()  -  4);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.substring(0,  pfx.length()  -  4);	  pfx    =    str.substring(0,    pfx.length());    	non-compiled	[CE]  ')'  expected	47	None	replace
115	[BUG]  [BUGGY]  if(pfxLen.startsWith( ". ")||  str.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfxLen.startsWith( ". ")||  str.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfxLen.startsWith( ". ")||  str.charAt(pfxLen  -  1)!=  '0')  {	  if(pfxLen.startsWith(str)||    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	43	None	replace
116	[BUG]  [BUGGY]  if(pfx.startsWith( "-0 ")||  pfx.startsWith( "-0 "))  {  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( "-0 ")||  pfx.startsWith( "-0 "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "-0 ")||  pfx.startsWith( "-0 "))  {	  if(pfx.startsWith(   ".0   ")||    pfx.startsWith(   ".0   "))    {    	non-compiled	[CE]  ')'  expected	17	None	replace
117	[BUG]  [BUGGY]  String  str  =  str.substring(0,  pfx.length());  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  String  str  =  str.substring(0,  pfx.length());  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	String  str  =  str.substring(0,  pfx.length());	  String    str    =    pfx.substring(0,    pfx.length());    	non-compiled	[CE]  ')'  expected	21	None	replace
118	[BUG]  [BUGGY]  Integer  pfx  =  createBigInteger(pfx.length  +  1);  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  pfx  =  createBigInteger(pfx.length  +  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfx  =  createBigInteger(pfx.length  +  1);	  Integer    pfx    =    createBigInteger(pfx    +    1);    	non-compiled	[CE]  ')'  expected	51	None	replace
119	[BUG]  [BUGGY]  if(pfx.startsWith( "- ")||  pfx.startsWith( "-- "))  {  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( "- ")||  pfx.startsWith( "-- "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "- ")||  pfx.startsWith( "-- "))  {	  if(pfx.startsWith(   "-   "))    {    	non-compiled	[CE]  ')'  expected	32	None	replace
120	[BUG]  [BUGGY]  if(pfx  ==  null  ||  pfx.length()  ==  0)  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx  ==  null  ||  pfx.length()  ==  0)  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx  ==  null  ||  pfx.length()  ==  0)  {	  if(pfx.length()    ==    0)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
121	[BUG]  [BUGGY]  if(pfx.length()!=  0)  {  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.length()!=  0)  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.length()!=  0)  {	  if(pfx.length()    ==    0)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
122	[BUG]  [BUGGY]  pfx  =  str.substring(pfx.length()).trim();  [CE]  ')'  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.substring(pfx.length()).trim();  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.substring(pfx.length()).trim();	  pfx    =    str.substring(pfx.length()    +    1);    	non-compiled	[CE]  ')'  expected	10	None	replace
123	[BUG]  [BUGGY]  if(pfx.startsWith( ".- ")||  pfx.startsWith( ".0 "))  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( ".- ")||  pfx.startsWith( ".0 "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( ".- ")||  pfx.startsWith( ".0 "))  {	  if(pfx.startsWith(   "-   ")||    pfx.startsWith(   ".0   "))    {    	non-compiled	[CE]  ')'  expected	28	None	replace
124	[BUG]  [BUGGY]  if(pfx.startsWith( "0x ")&&  pfx.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( "0x ")&&  pfx.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "0x ")&&  pfx.charAt(pfxLen  -  1)!=  '0')  {	  if(pfx.startsWith(   "0x   ")||    pfx.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	67	None	replace
125	[BUG]  [BUGGY]  String  str  =  hex_prefixes.substring(0,  pfxLen  +  1);  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  String  str  =  hex_prefixes.substring(0,  pfxLen  +  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	String  str  =  hex_prefixes.substring(0,  pfxLen  +  1);	  String    str    =    pfx.substring(0,    pfxLen    +    1);    	non-compiled	[CE]  ')'  expected	5	None	replace
126	[BUG]  [BUGGY]  Integer  pfx  =  createBigDecimal(pfx.length());  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  pfx  =  createBigDecimal(pfx.length());  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfx  =  createBigDecimal(pfx.length());	  Integer    pfx    =    createBigInteger(pfx.length());    	non-compiled	[CE]  ')'  expected	26	None	replace
127	[BUG]  [BUGGY]  if(pfx.endsWith( ".java ")||  pfx.startsWith( ".java "))  {  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.endsWith( ".java ")||  pfx.startsWith( ".java "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.endsWith( ".java ")||  pfx.startsWith( ".java "))  {	  if(pfx.endsWith(   ".java   "))    {    	non-compiled	[CE]  ')'  expected	71	None	replace
128	[BUG]  [BUGGY]  if(pfx.startsWith( ".java ")||  pfx.endsWith( ".java "))  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( ".java ")||  pfx.endsWith( ".java "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( ".java ")||  pfx.endsWith( ".java "))  {	  if(pfx.endsWith(   ".java   "))    {    	non-compiled	[CE]  ')'  expected	71	None	replace
129	[BUG]  [BUGGY]  int  pfxLen  =  hex_prefixes.length()  +  1;  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  int  pfxLen  =  hex_prefixes.length()  +  1;  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	int  pfxLen  =  hex_prefixes.length()  +  1;	  int    pfxLen    =    hex_prefixes.length();    	non-compiled	[CE]  ')'  expected	63	None	replace
130	[BUG]  [BUGGY]  pfx  =  str.charAt(pfxLen  +  4);  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.charAt(pfxLen  +  4);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.charAt(pfxLen  +  4);	  pfx    =    str.charAt(pfxLen    +    1);    	non-compiled	[CE]  ')'  expected	12	None	replace
131	[BUG]  [BUGGY]  pFxLen  =  str.length();  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pFxLen  =  str.length();  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pFxLen  =  str.length();	  pfxLen    =    str.length()    +    1;    	non-compiled	[CE]  ')'  expected	4	None	replace
132	[BUG]  [BUGGY]  if(pfx.startsWith(str)&&  pfx.startsWith(hex_prefixes))  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith(str)&&  pfx.startsWith(hex_prefixes))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith(str)&&  pfx.startsWith(hex_prefixes))  {	  if(pfx.startsWith(str)&&    pfx.startsWith(pfx))    {    	non-compiled	[CE]  ')'  expected	18	None	replace
133	[BUG]  [BUGGY]  if(pfx.charAt(pfxLen  -  1)!=  ')'  ||  pfxLen  >  0  ||  pfx.charAt(pfxLen  -  1)  ==  ')'  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.charAt(pfxLen  -  1)!=  ')'  ||  pfxLen  >  0  ||  pfx.charAt(pfxLen  -  1)  ==  ')'  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.charAt(pfxLen  -  1)!=  ')'  ||  pfxLen  >  0  ||  pfx.charAt(pfxLen  -  1)  ==  ')'  {	  if(pfx.charAt(pfxLen    -    1)!=    ')')    {    	non-compiled	[CE]  ')'  expected	31	None	replace
134	[BUG]  [BUGGY]  if(pfx.charAt(pfxLen  -  1)!=  ')'  ||  pfxLen  >  0  ||  pfx.charAt(pfxLen  -  1)!=  ')')  {  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.charAt(pfxLen  -  1)!=  ')'  ||  pfxLen  >  0  ||  pfx.charAt(pfxLen  -  1)!=  ')')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.charAt(pfxLen  -  1)!=  ')'  ||  pfxLen  >  0  ||  pfx.charAt(pfxLen  -  1)!=  ')')  {	  if(pfx.charAt(pfxLen    -    1)!=    ')')    {    	non-compiled	[CE]  ')'  expected	31	None	replace
135	[BUG]  [BUGGY]  if(pfxLen  ==  0  ||  str.startsWith(pfx)||  pfx.startsWith(pfx))  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfxLen  ==  0  ||  str.startsWith(pfx)||  pfx.startsWith(pfx))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfxLen  ==  0  ||  str.startsWith(pfx)||  pfx.startsWith(pfx))  {	  if(str.startsWith(pfx)||    pfx.startsWith(pfx))    {    	non-compiled	[CE]  ')'  expected	19	None	replace
136	[BUG]  [BUGGY]  if(pfx.startsWith(hex_prefixes)&&  pfx.startsWith(hex_prefixes))  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith(hex_prefixes)&&  pfx.startsWith(hex_prefixes))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith(hex_prefixes)&&  pfx.startsWith(hex_prefixes))  {	  if(pfx.startsWith(hex_prefixes)||    pfx.startsWith(pfx))    {    	non-compiled	[CE]  ')'  expected	57	None	replace
137	[BUG]  [BUGGY]  if(pfxLen  ==  0  ||  pfx.startsWith(hex_prefixes)||  pfx.startsWith(hex_prefixes))  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfxLen  ==  0  ||  pfx.startsWith(hex_prefixes)||  pfx.startsWith(hex_prefixes))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfxLen  ==  0  ||  pfx.startsWith(hex_prefixes)||  pfx.startsWith(hex_prefixes))  {	  if(pfx.startsWith(hex_prefixes)||    pfx.startsWith(pfx))    {    	non-compiled	[CE]  ')'  expected	57	None	replace
138	[BUG]  [BUGGY]  pfx  =  str.indexOf(')'  +  1;  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.indexOf(')'  +  1;  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.indexOf(')'  +  1;	  pfx    =    str.indexOf(')');    	non-compiled	[CE]  ')'  expected	54	None	replace
139	[BUG]  [BUGGY]  if(pfxLen  >  0  &&  pfx.startsWith(pfx)||  str.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfxLen  >  0  &&  pfx.startsWith(pfx)||  str.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfxLen  >  0  &&  pfx.startsWith(pfx)||  str.charAt(pfxLen  -  1)!=  '0')  {	  if(pfx.startsWith(pfx)||    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	42	None	replace
140	[BUG]  [BUGGY]  if(pfx.startsWith( ". ")||  str.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( ". ")||  str.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( ". ")||  str.charAt(pfxLen  -  1)!=  '0')  {	  if(pfx.startsWith(pfx)||    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	42	None	replace
141	[BUG]  [BUGGY]  Integer  str  =  createBigDecimal(pfx  -  1);  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  str  =  createBigDecimal(pfx  -  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createBigDecimal(pfx  -  1);	  Integer    str    =    createBigDecimal(pfx);    	non-compiled	[CE]  ')'  expected	66	None	replace
142	[BUG]  [BUGGY]  if(pfx.startsWith( "- ")||  pfx.startsWith(hex_prefixes))  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( "- ")||  pfx.startsWith(hex_prefixes))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "- ")||  pfx.startsWith(hex_prefixes))  {	  if(pfx.startsWith(str)||    pfx.startsWith(hex_prefixes))    {    	non-compiled	[CE]  ')'  expected	58	None	replace
143	[BUG]  [BUGGY]  if(pfx.startsWith(HEX_PREFIX)||  pfx.startsWith(hex_prefixes))  {  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith(HEX_PREFIX)||  pfx.startsWith(hex_prefixes))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith(HEX_PREFIX)||  pfx.startsWith(hex_prefixes))  {	  if(pfx.startsWith(str)||    pfx.startsWith(hex_prefixes))    {    	non-compiled	[CE]  ')'  expected	58	None	replace
144	[BUG]  [BUGGY]  String  str  =  str.substring(0,  pfxLen  +  2);  [CE]  ')'  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  String  str  =  str.substring(0,  pfxLen  +  2);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	String  str  =  str.substring(0,  pfxLen  +  2);	  String    str    =    pfx.substring(0,    pfxLen    +    2);    	non-compiled	[CE]  ')'  expected	7	None	replace
145	[BUG]  [BUGGY]  Integer  str  =  createBigDecimal(pfx.length());  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  str  =  createBigDecimal(pfx.length());  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createBigDecimal(pfx.length());	  Integer    str    =    createBigInteger(pfx.length());    	non-compiled	[CE]  ')'  expected	46	None	replace
146	[BUG]  [BUGGY]  Integer  pfx  =  createBigDecimal(pfx,  hex_prefixes);  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  pfx  =  createBigDecimal(pfx,  hex_prefixes);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfx  =  createBigDecimal(pfx,  hex_prefixes);	  Integer    pfx    =    createBigDecimal(pfx);    	non-compiled	[CE]  ')'  expected	52	None	replace
147	[BUG]  [BUGGY]  Integer  pfx  =  createBigDecimal(pfx  +  1);  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  pfx  =  createBigDecimal(pfx  +  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfx  =  createBigDecimal(pfx  +  1);	  Integer    pfx    =    createBigDecimal(pfx);    	non-compiled	[CE]  ')'  expected	52	None	replace
148	[BUG]  [BUGGY]  pfx  =  str.substring(pfxLen  -  1  +  1);  [CE]  ')'  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.substring(pfxLen  -  1  +  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.substring(pfxLen  -  1  +  1);	  pfx    =    str.substring(pfxLen    -    1);    	non-compiled	[CE]  ')'  expected	11	None	replace
149	[BUG]  [BUGGY]  if(pfx.startsWith( ".000 ")||  pfx.startsWith( ".000 "))  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( ".000 ")||  pfx.startsWith( ".000 "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( ".000 ")||  pfx.startsWith( ".000 "))  {	  if(pfx.startsWith(pfx)||    pfx.startsWith(   "0   "))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
150	[BUG]  [BUGGY]  Integer  str  =  createInteger(pfx  +  1);  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  str  =  createInteger(pfx  +  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createInteger(pfx  +  1);	  Integer    str    =    createInteger(pfx);    	non-compiled	[CE]  ')'  expected	44	None	replace
151	[BUG]  [BUGGY]  if(pfx.startsWith( "- ")||  pfx.endsWith( ".0 "))  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( "- ")||  pfx.endsWith( ".0 "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "- ")||  pfx.endsWith( ".0 "))  {	  if(pfx.startsWith(pfx)||    pfx.endsWith(   ".0   "))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
152	[BUG]  [BUGGY]  Integer  str  =  createBigInteger(hex_prefixes  -  1);  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  str  =  createBigInteger(hex_prefixes  -  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createBigInteger(hex_prefixes  -  1);	  Integer    str    =    createBigInteger(pfx    -    1);    	non-compiled	[CE]  ')'  expected	55	None	replace
153	[BUG]  [BUGGY]  Integer  str  =  createBigInteger(pfx  +  1);  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  str  =  createBigInteger(pfx  +  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createBigInteger(pfx  +  1);	  Integer    str    =    createBigInteger(pfx    -    1);    	non-compiled	[CE]  ')'  expected	55	None	replace
154	[BUG]  [BUGGY]  String  str  =  hex_prefixes.substring(0,  pfxLen  -  1);  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  String  str  =  hex_prefixes.substring(0,  pfxLen  -  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	String  str  =  hex_prefixes.substring(0,  pfxLen  -  1);	  String    str    =    pfx.substring(0,    pfxLen    -    1);    	non-compiled	[CE]  ')'  expected	6	None	replace
155	[BUG]  [BUGGY]  String  str  =  str.substring(0,  pfxLen  -  1);  [CE]  ')'  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  String  str  =  str.substring(0,  pfxLen  -  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	String  str  =  str.substring(0,  pfxLen  -  1);	  String    str    =    pfx.substring(0,    pfxLen    -    1);    	non-compiled	[CE]  ')'  expected	6	None	replace
156	[BUG]  [BUGGY]  Integer  pfx  =  createInteger(pfx.length);  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  pfx  =  createInteger(pfx.length);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfx  =  createInteger(pfx.length);	  Integer    pfx    =    createInteger(pfx);    	non-compiled	[CE]  ')'  expected	24	None	replace
157	[BUG]  [BUGGY]  pfx  +=  hex_prefixes.length();  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  +=  hex_prefixes.length();  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  +=  hex_prefixes.length();	  pfx    +=    str.length();    	non-compiled	[CE]  ')'  expected	65	None	replace
158	[BUG]  [BUGGY]  final  int  pfxLen  =  hex_prefixes.length();  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  final  int  pfxLen  =  hex_prefixes.length();  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	final  int  pfxLen  =  hex_prefixes.length();	  final    int    pfxLen    =    str.length();    	non-compiled	[CE]  ')'  expected	33	None	replace
159	[BUG]  [BUGGY]  final  int  pfxLen  =  str.length()  -  1;  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  final  int  pfxLen  =  str.length()  -  1;  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	final  int  pfxLen  =  str.length()  -  1;	  final    int    pfxLen    =    str.length();    	non-compiled	[CE]  ')'  expected	33	None	replace
160	[BUG]  [BUGGY]  if(pfx.length()  >  0)  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.length()  >  0)  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.length()  >  0)  {	  if(pfx.length()    ==    0)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
161	[BUG]  [BUGGY]  pfxLen  +=  str.length();  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfxLen  +=  str.length();  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfxLen  +=  str.length();	  pfxLen    =    str.length()    +    1;    	non-compiled	[CE]  ')'  expected	4	None	replace
162	[BUG]  [BUGGY]  String  str  =  pfx.substring(0,  pfx.length()));  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  String  str  =  pfx.substring(0,  pfx.length()));  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	String  str  =  pfx.substring(0,  pfx.length()));	  String    str    =    pfx.substring(0,    pfx.length()    +    1);    	non-compiled	[CE]  ')'  expected	22	None	replace
163	[BUG]  [BUGGY]  Integer  str  =  createBigInteger(pfx.length  -  1);  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  str  =  createBigInteger(pfx.length  -  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createBigInteger(pfx.length  -  1);	  Integer    str    =    createBigInteger(pfx    -    1);    	non-compiled	[CE]  ')'  expected	55	None	replace
164	[BUG]  [BUGGY]  String  str  =  pfx.substring(0,  pfx.length()  -  3);  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  String  str  =  pfx.substring(0,  pfx.length()  -  3);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	String  str  =  pfx.substring(0,  pfx.length()  -  3);	  String    str    =    pfx.substring(0,    pfx.length();    	non-compiled	[CE]  ')'  expected	23	None	replace
165	[BUG]  [BUGGY]  if(pfx.startsWith( "java/lang/Object ")||  pfx.startsWith( "java/lang/Object "))  {  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( "java/lang/Object ")||  pfx.startsWith( "java/lang/Object "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "java/lang/Object ")||  pfx.startsWith( "java/lang/Object "))  {	  if(pfx.startsWith(   ".java   ")||    pfx.startsWith(   ".java   "))    {    	non-compiled	[CE]  ')'  expected	56	None	replace
166	[BUG]  [BUGGY]  if(pfx.startsWith( "java/lang/ ")||  pfx.startsWith( "java/lang/ "))  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( "java/lang/ ")||  pfx.startsWith( "java/lang/ "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "java/lang/ ")||  pfx.startsWith( "java/lang/ "))  {	  if(pfx.startsWith(   ".java   ")||    pfx.startsWith(   ".java   "))    {    	non-compiled	[CE]  ')'  expected	56	None	replace
167	[BUG]  [BUGGY]  if(pfx.startsWith( ". ")||  pfx.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( ". ")||  pfx.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( ". ")||  pfx.charAt(pfxLen  -  1)!=  '0')  {	  if(pfx.startsWith(pfx)||    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	42	None	replace
168	[BUG]  [BUGGY]  if(pfx.startsWith( ".java ")||  pfx.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( ".java ")||  pfx.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( ".java ")||  pfx.charAt(pfxLen  -  1)!=  '0')  {	  if(pfx.startsWith(pfx)||    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	42	None	replace
169	[BUG]  [BUGGY]  if(pfx.startsWith( "- ")||  pfx.startsWith(pfx))  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( "- ")||  pfx.startsWith(pfx))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "- ")||  pfx.startsWith(pfx))  {	  if(str.startsWith(pfx)||    pfx.startsWith(pfx))    {    	non-compiled	[CE]  ')'  expected	19	None	replace
170	[BUG]  [BUGGY]  if(pfx.startsWith(pfx)||  pfx.startsWith(pfxLen))  {  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith(pfx)||  pfx.startsWith(pfxLen))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith(pfx)||  pfx.startsWith(pfxLen))  {	  if(str.startsWith(pfx)||    pfx.startsWith(pfx))    {    	non-compiled	[CE]  ')'  expected	19	None	replace
171	[BUG]  [BUGGY]  pfx  =  str.substring(0,  pfxLen  +  1,  hex_prefixes);  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.substring(0,  pfxLen  +  1,  hex_prefixes);  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.substring(0,  pfxLen  +  1,  hex_prefixes);	  pfx    =    str.substring(0,    pfxLen);    	non-compiled	[CE]  ')'  expected	53	None	replace
172	[BUG]  [BUGGY]  pfx  =  str.charAt(pfxLen  /  1);  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.charAt(pfxLen  /  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.charAt(pfxLen  /  1);	  pfx    =    str.charAt(pfxLen    -    1    +    1);    	non-compiled	[CE]  ')'  expected	35	None	replace
173	[BUG]  [BUGGY]  if(pfx.startsWith( "0.0 ")||  pfx.endsWith( ".0 "))  {  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( "0.0 ")||  pfx.endsWith( ".0 "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "0.0 ")||  pfx.endsWith( ".0 "))  {	  if(pfx.startsWith(   ".0   ")||    pfx.endsWith(   ".0   "))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
174	[BUG]  [BUGGY]  if(pfx.startsWith(hex_prefixes)||  pfx.startsWith( "- "))  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith(hex_prefixes)||  pfx.startsWith( "- "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith(hex_prefixes)||  pfx.startsWith( "- "))  {	  if(pfx.startsWith(hex_prefixes)||    pfx.startsWith(pfx))    {    	non-compiled	[CE]  ')'  expected	57	None	replace
175	[BUG]  [BUGGY]  String  str  =  pfx.substring(0,  pfx.length()  -  4);  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  String  str  =  pfx.substring(0,  pfx.length()  -  4);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	String  str  =  pfx.substring(0,  pfx.length()  -  4);	  String    str    =    pfx.substring(0,    pfx.length());    	non-compiled	[CE]  ')'  expected	21	None	replace
176	[BUG]  [BUGGY]  String  str  =  str.substring(0,  pfxLen  +  1);  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  String  str  =  str.substring(0,  pfxLen  +  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	String  str  =  str.substring(0,  pfxLen  +  1);	  String    str    =    pfx.substring(0,    pfxLen    +    1);    	non-compiled	[CE]  ')'  expected	5	None	replace
177	[BUG]  [BUGGY]  String  str  =  str.substring(0,  pfxLen  +  3);  [CE]  ')'  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  String  str  =  str.substring(0,  pfxLen  +  3);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	String  str  =  str.substring(0,  pfxLen  +  3);	  String    str    =    pfx.substring(0,    pfxLen    +    3);    	non-compiled	[CE]  ')'  expected	8	None	replace
178	[BUG]  [BUGGY]  Integer  str  =  createBigInteger(pfx,  2);  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  str  =  createBigInteger(pfx,  2);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createBigInteger(pfx,  2);	  Integer    str    =    createBigInteger(pfx,    hex_prefixes);    	non-compiled	[CE]  ')'  expected	45	None	replace
179	[BUG]  [BUGGY]  if(pfx.startsWith( "0x ")||  pfx.charAt(0)!=  '0')  {  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( "0x ")||  pfx.charAt(0)!=  '0')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "0x ")||  pfx.charAt(0)!=  '0')  {	  if(pfx.startsWith(   "0x   ")||    pfx.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	67	None	replace
180	[BUG]  [BUGGY]  if(pfx.startsWith( ".0 ")||  pfx.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( ".0 ")||  pfx.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( ".0 ")||  pfx.charAt(pfxLen  -  1)!=  '0')  {	  if(pfx.startsWith(   "0x   ")||    pfx.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	67	None	replace
181	[BUG]  [BUGGY]  if(pfxLen  ==  0  &&  str.charAt(pfxLen  -  1)!=  '0'  &&  pfxLen  <  =  '9')  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfxLen  ==  0  &&  str.charAt(pfxLen  -  1)!=  '0'  &&  pfxLen  <  =  '9')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfxLen  ==  0  &&  str.charAt(pfxLen  -  1)!=  '0'  &&  pfxLen  <  =  '9')  {	  if(pfxLen    ==    0    &&    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	49	None	replace
182	[BUG]  [BUGGY]  pfx  =  str.charAt(pfxLen  -  2  +  1);  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.charAt(pfxLen  -  2  +  1);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.charAt(pfxLen  -  2  +  1);	  pfx    =    str.charAt(pfxLen    -    2);    	non-compiled	[CE]  ')'  expected	34	None	replace
183	[BUG]  [BUGGY]  if(pfx.endsWith( ".0 ")||  pfx.endsWith( ".0 "))  {  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.endsWith( ".0 ")||  pfx.endsWith( ".0 "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.endsWith( ".0 ")||  pfx.endsWith( ".0 "))  {	  if(pfx.startsWith(   "0   ")||    pfx.endsWith(   ".0   "))    {    	non-compiled	[CE]  ')'  expected	60	None	replace
184	[BUG]  [BUGGY]  if(pfx.startsWith( "0.0 ")||  pfx.startsWith( "0.0 "))  {  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( "0.0 ")||  pfx.startsWith( "0.0 "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "0.0 ")||  pfx.startsWith( "0.0 "))  {	  if(pfx.startsWith(   ".0   ")||    pfx.startsWith(   ".0   "))    {    	non-compiled	[CE]  ')'  expected	17	None	replace
185	[BUG]  [BUGGY]  int  pfxLen  =  pfx.length()  -  2;  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  int  pfxLen  =  pfx.length()  -  2;  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	int  pfxLen  =  pfx.length()  -  2;	  int    pfxLen    =    pfx.length();    	non-compiled	[CE]  ')'  expected	37	None	replace
186	[BUG]  [BUGGY]  Integer  pfx  =  createInteger(pfx,  16);  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  pfx  =  createInteger(pfx,  16);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  pfx  =  createInteger(pfx,  16);	  Integer    pfx    =    createInteger(pfx);    	non-compiled	[CE]  ')'  expected	24	None	replace
187	[BUG]  [BUGGY]  Integer  str  =  createInteger(pfx.substring(0,  pfx.length()  -  1));  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  Integer  str  =  createInteger(pfx.substring(0,  pfx.length()  -  1));  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	Integer  str  =  createInteger(pfx.substring(0,  pfx.length()  -  1));	  Integer    str    =    createInteger(pfx);    	non-compiled	[CE]  ')'  expected	44	None	replace
188	[BUG]  [BUGGY]  pfxLen  =  pfx.length()  -  2;  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfxLen  =  pfx.length()  -  2;  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfxLen  =  pfx.length()  -  2;	  pfxLen    =    pfx.length();    	non-compiled	[CE]  ')'  expected	3	None	replace
189	[BUG]  [BUGGY]  if(pfx.startsWith( "- ")&&  pfx.startsWith( "- "))  {  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( "- ")&&  pfx.startsWith( "- "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "- ")&&  pfx.startsWith( "- "))  {	  if(pfx.startsWith(str)&&    pfx.startsWith(pfx))    {    	non-compiled	[CE]  ')'  expected	18	None	replace
190	[BUG]  [BUGGY]  pfx  =  pfx.indexOf(')');  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  pfx.indexOf(')');  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  pfx.indexOf(')');	  pfx    =    str.indexOf(')');    	non-compiled	[CE]  ')'  expected	54	None	replace
191	[BUG]  [BUGGY]  if(pfx.charAt(pfxLen  -  1)!=  ')'  ||  pfx.charAt(pfxLen  -  1)  ==  ')'  {  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.charAt(pfxLen  -  1)!=  ')'  ||  pfx.charAt(pfxLen  -  1)  ==  ')'  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.charAt(pfxLen  -  1)!=  ')'  ||  pfx.charAt(pfxLen  -  1)  ==  ')'  {	  if(pfx.charAt(pfxLen    -    1)!=    ')')    {    	non-compiled	[CE]  ')'  expected	31	None	replace
192	[BUG]  [BUGGY]  if(pfx.length()  ==  0  ||  pfx.charAt(pfxLen  -  1)!=  ')')  {  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.length()  ==  0  ||  pfx.charAt(pfxLen  -  1)!=  ')')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.length()  ==  0  ||  pfx.charAt(pfxLen  -  1)!=  ')')  {	  if(pfx.charAt(pfxLen    -    1)!=    ')')    {    	non-compiled	[CE]  ')'  expected	31	None	replace
193	[BUG]  [BUGGY]  if(pfx.charAt(pfxLen  -  1)!=  '0'  &&  pfxLen  <  =  pfx.length())  {  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.charAt(pfxLen  -  1)!=  '0'  &&  pfxLen  <  =  pfx.length())  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.charAt(pfxLen  -  1)!=  '0'  &&  pfxLen  <  =  pfx.length())  {	  if(pfx.charAt(pfxLen    -    1)!=    ')')    {    	non-compiled	[CE]  ')'  expected	31	None	replace
194	[BUG]  [BUGGY]  pfx  +=  hex.length();  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  +=  hex.length();  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  +=  hex.length();	  pfx    +=    str.length();    	non-compiled	[CE]  ')'  expected	65	None	replace
195	[BUG]  [BUGGY]  pfx  =  str.substring(0,  pfx.length()  -  3);  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  pfx  =  str.substring(0,  pfx.length()  -  3);  [BUGGY]      if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	pfx  =  str.substring(0,  pfx.length()  -  3);	  pfx    =    str.substring(0,    pfx.length());    	non-compiled	[CE]  ')'  expected	47	None	replace
196	[BUG]  [BUGGY]  if(pfx.startsWith( "/ ")||  pfx.startsWith( "/ "))  {  [CE]  ')'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.startsWith( "/ ")||  pfx.startsWith( "/ "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.startsWith( "/ ")||  pfx.startsWith( "/ "))  {	  if(pfx.startsWith(pfx)||    pfx.startsWith(pfx))    {    	non-compiled	[CE]  ')'  expected	20	None	replace
197	[BUG]  [BUGGY]  if(pfx.length()  ==  0  ||  pfx.endsWith( ".java "))  {  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfx.length()  ==  0  ||  pfx.endsWith( ".java "))  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfx.length()  ==  0  ||  pfx.endsWith( ".java "))  {	  if(pfx.endsWith(   ".java   "))    {    	non-compiled	[CE]  ')'  expected	71	None	replace
198	[BUG]  [BUGGY]  if(pfxLen  <  =  0  ||  str.charAt(pfxLen  -  1)!=  '0')  {  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (str  ==  null)  {  return  null;  }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {      [BUGGY]  if(pfxLen  <  =  0  ||  str.charAt(pfxLen  -  1)!=  '0')  {  [BUGGY]      pfxLen  +=  pfx.length();  break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.31622776601683794	461	461	1	replace	if(pfxLen  <  =  0  ||  str.charAt(pfxLen  -  1)!=  '0')  {	  if(pfxLen    ==    0    ||    str.charAt(pfxLen    -    1)!=    '0')    {    	non-compiled	[CE]  ')'  expected	48	None	replace
