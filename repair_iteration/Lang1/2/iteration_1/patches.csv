bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append('-',  pfxLen);  [CE]  ';'  expected  [FE]          NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  ((  Number)hex_prefixes).append('-',  pfxLen);  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append('-',  pfxLen);	      ((    Number)hex_prefixes).append('-');    	non-compiled	[CE]  ';'  expected	15	None	replace
2	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append('-'  +  pfxLen);  [CE]  ';'  expected  [FE]            NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  ((  Number)hex_prefixes).append('-'  +  pfxLen);  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append('-'  +  pfxLen);	      ((    Number)hex_prefixes).append('-');    	non-compiled	[CE]  ';'  expected	15	None	replace
3	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append('-').append(pfxLen);  [CE]  ';'  expected  [FE]              NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  ((  Number)hex_prefixes).append('-').append(pfxLen);  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append('-').append(pfxLen);	      ((    Number)hex_prefixes).append('-');    	non-compiled	[CE]  ';'  expected	15	None	replace
4	[BUG]  [BUGGY]  ((  Number)hex_prefixes).add(pfxLen);  [CE]  ';'  expected  [FE]          NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  ((  Number)hex_prefixes).add(pfxLen);  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).add(pfxLen);	      ((    Number)hex_prefixes).add(pfx);    	non-compiled	[CE]  ';'  expected	9	None	replace
5	[BUG]  [BUGGY]  ((  Number)hex_prefixes).add(pfx,  str);  [CE]  ';'  expected  [FE]            NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  ((  Number)hex_prefixes).add(pfx,  str);  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).add(pfx,  str);	      ((    Number)hex_prefixes).add(pfx);    	non-compiled	[CE]  ';'  expected	9	None	replace
6	[BUG]  [BUGGY]  ((  Number)hex_prefixes).add(pfxLen,  pfx);  [CE]  ';'  expected  [FE]              NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  ((  Number)hex_prefixes).add(pfxLen,  pfx);  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).add(pfxLen,  pfx);	      ((    Number)hex_prefixes).add(pfx);    	non-compiled	[CE]  ';'  expected	9	None	replace
7	[BUG]  [BUGGY]  ((  Number)hex_prefixes).add(pfx,  pfxLen);  [CE]  ';'  expected  [FE]                NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  ((  Number)hex_prefixes).add(pfx,  pfxLen);  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).add(pfx,  pfxLen);	      ((    Number)hex_prefixes).add(pfx);    	non-compiled	[CE]  ';'  expected	9	None	replace
8	[BUG]  [BUGGY]  ((  Number)hex_prefixes).reset();  [CE]  ';'  expected  [FE]        NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  ((  Number)hex_prefixes).reset();  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).reset();	      ((    Number)hex_prefixes).setLength(0);    	non-compiled	[CE]  ';'  expected	8	None	replace
9	[BUG]  [BUGGY]  ((  Number)hex_prefixes).setLength(1);  [CE]  ';'  expected  [FE]          NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  ((  Number)hex_prefixes).setLength(1);  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).setLength(1);	      ((    Number)hex_prefixes).setLength(0);    	non-compiled	[CE]  ';'  expected	8	None	replace
10	[BUG]  [BUGGY]  if(pfxLen  <  =  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]          NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  if(pfxLen  <  =  0)  {  break;  }  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  <  =  0)  {  break;  }	  if(pfxLen    ==    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
11	[BUG]  [BUGGY]  if(pfxLen  ==  1)  {  break;  }  [CE]  ';'  expected  [FE]            NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  if(pfxLen  ==  1)  {  break;  }  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  1)  {  break;  }	  if(pfxLen    ==    0)    {    break;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
12	[BUG]  [BUGGY]  if(pfxLen  >  0)  {  break;  }  [CE]  ';'  expected  [FE]              NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  if(pfxLen  >  0)  {  break;  }  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  >  0)  {  break;  }	  if(pfxLen    ==    0)    {    break;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
13	[BUG]  [BUGGY]  if(pfxLen  >  16)  {  return  createBigInteger(str);  }  [CE]  ';'  expected  [FE]        NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  if(pfxLen  >  16)  {  return  createBigInteger(str);  }  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  >  16)  {  return  createBigInteger(str);  }	  return    createBigInteger(str);    	non-compiled	[CE]  ';'  expected	13	None	replace
14	[BUG]  [BUGGY]  if(pfxLen  ==  0)  {  return  createBigInteger(str);  }  [CE]  ';'  expected  [FE]          NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  if(pfxLen  ==  0)  {  return  createBigInteger(str);  }  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  0)  {  return  createBigInteger(str);  }	  return    createBigInteger(str);    	non-compiled	[CE]  ';'  expected	13	None	replace
15	[BUG]  [BUGGY]  if(pfxLen  ==  16)  {  return  createBigInteger(str);  }  [CE]  ';'  expected  [FE]            NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  if(pfxLen  ==  16)  {  return  createBigInteger(str);  }  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  16)  {  return  createBigInteger(str);  }	  return    createBigInteger(str);    	non-compiled	[CE]  ';'  expected	13	None	replace
16	[BUG]  [BUGGY]  pfxLen  =  str.length()  +  1;  [CE]  ';'  expected  [FE]              NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  pfxLen  =  str.length()  +  1;  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pfxLen  =  str.length()  +  1;	      pfxLen    =    str.length()    +    pfx.length();    	non-compiled	[CE]  ';'  expected	4	None	replace
17	[BUG]  [BUGGY]  pfxLen  =  str.length()  +  4;  [CE]  ';'  expected  [FE]                NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  pfxLen  =  str.length()  +  4;  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pfxLen  =  str.length()  +  4;	      pfxLen    =    str.length()    +    pfx.length();    	non-compiled	[CE]  ';'  expected	4	None	replace
18	[BUG]  [BUGGY]  pfxLen  =  str.length()  +  2;  [CE]  ';'  expected  [FE]                  NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  pfxLen  =  str.length()  +  2;  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pfxLen  =  str.length()  +  2;	      pfxLen    =    str.length()    +    pfx.length();    	non-compiled	[CE]  ';'  expected	4	None	replace
19	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append(pfxLen);  [CE]  ';'  expected  [FE]        NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  ((  Number)hex_prefixes).append(pfxLen);  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append(pfxLen);	      ((    Number)hex_prefixes).append(pfx);    	non-compiled	[CE]  ';'  expected	14	None	replace
20	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append(pfxLen  +  1);  [CE]  ';'  expected  [FE]          NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  ((  Number)hex_prefixes).append(pfxLen  +  1);  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append(pfxLen  +  1);	      ((    Number)hex_prefixes).append(pfx);    	non-compiled	[CE]  ';'  expected	14	None	replace
21	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append(pfxLen  -  1);  [CE]  ';'  expected  [FE]            NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  ((  Number)hex_prefixes).append(pfxLen  -  1);  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append(pfxLen  -  1);	      ((    Number)hex_prefixes).append(pfx);    	non-compiled	[CE]  ';'  expected	14	None	replace
22	[BUG]  [BUGGY]  (pfxLen  ==  0)?  str.length()  :  pfx.length();  [CE]  not  a  statement  [FE]                NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  (pfxLen  ==  0)?  str.length()  :  pfx.length();  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	(pfxLen  ==  0)?  str.length()  :  pfx.length();	      if(pfxLen    ==    0)    {    pfxLen    =    str.length();    }    	non-compiled	[CE]  not  a  statement	5	None	replace
23	[BUG]  [BUGGY]  if(pfxLen  ==  1)  {  return  createBigInteger(pfx);  }  [CE]  ';'  expected  [FE]            NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  if(pfxLen  ==  1)  {  return  createBigInteger(pfx);  }  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  1)  {  return  createBigInteger(pfx);  }	      if(pfxLen    ==    0)    {    return    createBigInteger(pfx);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
24	[BUG]  [BUGGY]  if(pfxLen  >  0)  {  return  createBigInteger(pfx);  }  [CE]  ';'  expected  [FE]              NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  if(pfxLen  >  0)  {  return  createBigInteger(pfx);  }  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  >  0)  {  return  createBigInteger(pfx);  }	      if(pfxLen    ==    0)    {    return    createBigInteger(pfx);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
25	[BUG]  [BUGGY]  if(pfxLen  <  =  0)  {  return  createBigInteger(pfx);  }  [CE]  illegal  start  of  expression  [FE]                NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  if(pfxLen  <  =  0)  {  return  createBigInteger(pfx);  }  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  <  =  0)  {  return  createBigInteger(pfx);  }	      if(pfxLen    ==    0)    {    return    createBigInteger(pfx);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
26	[BUG]  [BUGGY]  pfxLen  =  1;  [CE]  ';'  expected  [FE]        NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  pfxLen  =  1;  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pfxLen  =  1;	  pfxLen    =    0;    	non-compiled	[CE]  ';'  expected	11	None	replace
27	[BUG]  [BUGGY]  pfxLen  =  4;  [CE]  ';'  expected  [FE]          NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  pfxLen  =  4;  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pfxLen  =  4;	  pfxLen    =    0;    	non-compiled	[CE]  ';'  expected	11	None	replace
28	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  str);  [CE]  ';'  expected  [FE]          NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  str);  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  str);	  throw    new    NumberFormatException(   "Invalid    number:   "    +    pfx);    	non-compiled	[CE]  ';'  expected	7	None	replace
29	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen);  [CE]  ';'  expected  [FE]            NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen);  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen);	  throw    new    NumberFormatException(   "Invalid    number:   "    +    pfx);    	non-compiled	[CE]  ';'  expected	7	None	replace
30	[BUG]  [BUGGY]  if(pfxLen  ==  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  pfx);  }  [CE]  ';'  expected  [FE]              NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  if(pfxLen  ==  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  pfx);  }  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  pfx);  }	  throw    new    NumberFormatException(   "Invalid    number:   "    +    pfx);    	non-compiled	[CE]  ';'  expected	7	None	replace
31	[BUG]  [BUGGY]  pfxLen  =  str.length()  -  1;  [CE]  ';'  expected  [FE]        NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  pfxLen  =  str.length()  -  1;  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pfxLen  =  str.length()  -  1;	      pfxLen    =    str.length();    	non-compiled	[CE]  ';'  expected	1	None	replace
32	[BUG]  [BUGGY]  pfxLen  +=  str.length()  +  1;  [CE]  ';'  expected  [FE]          NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  pfxLen  +=  str.length()  +  1;  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pfxLen  +=  str.length()  +  1;	      pfxLen    +=    str.length();    	non-compiled	[CE]  ';'  expected	2	None	replace
33	[BUG]  [BUGGY]  pfxLen  +=  pfx.length();  [CE]  ';'  expected  [FE]            NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  pfxLen  +=  pfx.length();  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pfxLen  +=  pfx.length();	      pfxLen    +=    str.length();    	non-compiled	[CE]  ';'  expected	2	None	replace
34	[BUG]  [BUGGY]  if(pfxLen  ==  0)  {  throw  new  NumberFormatException( " ");  }  [CE]  ';'  expected  [FE]        NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  if(pfxLen  ==  0)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  0)  {  throw  new  NumberFormatException( " ");  }	  throw    new    NumberFormatException(   "   ");    	non-compiled	[CE]  ';'  expected	6	None	replace
35	[BUG]  [BUGGY]  if(pfxLen  ==  1)  {  pfxLen  +=  str.length();  }  [CE]  ';'  expected  [FE]            NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  if(pfxLen  ==  1)  {  pfxLen  +=  str.length();  }  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  1)  {  pfxLen  +=  str.length();  }	      if(pfxLen    ==    0)    {    pfxLen    +=    str.length();    }    	non-compiled	[CE]  ';'  expected	3	None	replace
36	[BUG]  [BUGGY]  (pfxLen  ==  0)&&  str.charAt(pfxLen  -  1)!=  ';')  {  pfxLen  =  str.length();  }  [CE]  not  a  statement  [FE]                NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  (pfxLen  ==  0)&&  str.charAt(pfxLen  -  1)!=  ';')  {  pfxLen  =  str.length();  }  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	(pfxLen  ==  0)&&  str.charAt(pfxLen  -  1)!=  ';')  {  pfxLen  =  str.length();  }	      if(pfxLen    ==    0)    {    pfxLen    =    str.length();    }    	non-compiled	[CE]  not  a  statement	5	None	replace
37	[BUG]  [BUGGY]  (pfxLen  ==  0)&&  str.charAt(pfxLen  -  1)!=  ':')  {  pfxLen  =  str.length();  }  [CE]  not  a  statement  [FE]                  NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  (pfxLen  ==  0)&&  str.charAt(pfxLen  -  1)!=  ':')  {  pfxLen  =  str.length();  }  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	(pfxLen  ==  0)&&  str.charAt(pfxLen  -  1)!=  ':')  {  pfxLen  =  str.length();  }	      if(pfxLen    ==    0)    {    pfxLen    =    str.length();    }    	non-compiled	[CE]  not  a  statement	5	None	replace
38	[BUG]  [BUGGY]  if(pfxLen  ==  -1)  {  throw  new  NumberFormatException( " ");  }  [CE]  ';'  expected  [FE]        NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  if(pfxLen  ==  -1)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  -1)  {  throw  new  NumberFormatException( " ");  }	  throw    new    NumberFormatException(   "   ");    	non-compiled	[CE]  ';'  expected	6	None	replace
39	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  hex_prefixes);  [CE]  ';'  expected  [FE]          NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  hex_prefixes);  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  hex_prefixes);	  throw    new    NumberFormatException(   "Invalid    number:   "    +    pfx);    	non-compiled	[CE]  ';'  expected	7	None	replace
40	[BUG]  [BUGGY]  ((  Number)hex_prefixes).add(pfxLen  -  1);  [CE]  ';'  expected  [FE]          NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  ((  Number)hex_prefixes).add(pfxLen  -  1);  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).add(pfxLen  -  1);	      ((    Number)hex_prefixes).add(pfx);    	non-compiled	[CE]  ';'  expected	9	None	replace
41	[BUG]  [BUGGY]  if(pfxLen!=  0)  {  break;  }  [CE]  ';'  expected  [FE]          NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  if(pfxLen!=  0)  {  break;  }  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen!=  0)  {  break;  }	  if(pfxLen    ==    0)    {    break;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
42	[BUG]  [BUGGY]  return  createBigDecimal(pfxLen);  [CE]  ';'  expected  [FE]        NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  return  createBigDecimal(pfxLen);  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	return  createBigDecimal(pfxLen);	  return    createBigInteger(str);    	non-compiled	[CE]  ';'  expected	13	None	replace
43	[BUG]  [BUGGY]  return  createBigInteger(pfxLen);  [CE]  ';'  expected  [FE]          NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  return  createBigInteger(pfxLen);  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	return  createBigInteger(pfxLen);	  return    createBigInteger(str);    	non-compiled	[CE]  ';'  expected	13	None	replace
44	[BUG]  [BUGGY]  return  createBigDecimal(pfx);  [CE]  ';'  expected  [FE]            NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  return  createBigDecimal(pfx);  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	return  createBigDecimal(pfx);	  return    createBigInteger(str);    	non-compiled	[CE]  ';'  expected	13	None	replace
45	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append(pfx  +  1);  [CE]  ';'  expected  [FE]        NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  ((  Number)hex_prefixes).append(pfx  +  1);  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append(pfx  +  1);	      ((    Number)hex_prefixes).append(pfx);    	non-compiled	[CE]  ';'  expected	14	None	replace
46	[BUG]  [BUGGY]  pfxLen  +=  hex_prefixes.length();  [CE]  ';'  expected  [FE]          NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  pfxLen  +=  hex_prefixes.length();  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pfxLen  +=  hex_prefixes.length();	      pfxLen    +=    str.length();    	non-compiled	[CE]  ';'  expected	2	None	replace
47	[BUG]  [BUGGY]  if(hexLen  ==  0)  {  return  createBigInteger(str);  }  [CE]  ';'  expected  [FE]            NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  if(hexLen  ==  0)  {  return  createBigInteger(str);  }  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(hexLen  ==  0)  {  return  createBigInteger(str);  }	      if(pfxLen    ==    0)    {    return    createBigInteger(pfx);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
48	[BUG]  [BUGGY]  if(pfxLen  ==  0)  {  pfxLen  +=  hex_prefixes.length();  }  [CE]  ';'  expected  [FE]            NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  if(pfxLen  ==  0)  {  pfxLen  +=  hex_prefixes.length();  }  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  0)  {  pfxLen  +=  hex_prefixes.length();  }	      if(pfxLen    ==    0)    {    pfxLen    +=    str.length();    }    	non-compiled	[CE]  ';'  expected	3	None	replace
49	[BUG]  [BUGGY]  if(pfxLen  ==  0  ||  hex_prefixes!=  null)  {  break;  }  [CE]  ';'  expected  [FE]          NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  if(pfxLen  ==  0  ||  hex_prefixes!=  null)  {  break;  }  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  0  ||  hex_prefixes!=  null)  {  break;  }	  if(pfxLen    ==    0)    {    break;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
50	[BUG]  [BUGGY]  pfxLen  +=  str.length()  -  1;  [CE]  ';'  expected  [FE]          NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  pfxLen  +=  str.length()  -  1;  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pfxLen  +=  str.length()  -  1;	      pfxLen    +=    str.length();    	non-compiled	[CE]  ';'  expected	2	None	replace
51	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfx,  hex_prefixes);  [CE]  ';'  expected  [FE]          NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfx,  hex_prefixes);  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  pfx,  hex_prefixes);	  throw    new    NumberFormatException(   "Invalid    number:   "    +    pfx);    	non-compiled	[CE]  ';'  expected	7	None	replace
52	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen,  hex_prefixes);  [CE]  ';'  expected  [FE]            NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen,  hex_prefixes);  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen,  hex_prefixes);	  throw    new    NumberFormatException(   "Invalid    number:   "    +    pfx);    	non-compiled	[CE]  ';'  expected	7	None	replace
53	[BUG]  [BUGGY]  if(pfxLen  ==  1)  {  return  createBigInteger(str);  }  [CE]  ';'  expected  [FE]            NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  if(pfxLen  ==  1)  {  return  createBigInteger(str);  }  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  1)  {  return  createBigInteger(str);  }	      if(pfxLen    ==    0)    {    return    createBigInteger(pfx);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
54	[BUG]  [BUGGY]  if(pfxLen  >  0)  {  return  createBigInteger(str);  }  [CE]  ';'  expected  [FE]              NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  if(pfxLen  >  0)  {  return  createBigInteger(str);  }  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  >  0)  {  return  createBigInteger(str);  }	      if(pfxLen    ==    0)    {    return    createBigInteger(pfx);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
55	[BUG]  [BUGGY]  ((  Number)hex_prefixes).add(pfx  +  1);  [CE]  ';'  expected  [FE]          NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  ((  Number)hex_prefixes).add(pfx  +  1);  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).add(pfx  +  1);	      ((    Number)hex_prefixes).add(pfx);    	non-compiled	[CE]  ';'  expected	9	None	replace
56	[BUG]  [BUGGY]  throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ "'  is  not  a  valid  string. ");  [CE]  ';'  expected  [FE]        NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ "'  is  not  a  valid  string. ");  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ "'  is  not  a  valid  string. ");	  throw    new    NumberFormatException(   "   ");    	non-compiled	[CE]  ';'  expected	6	None	replace
57	[BUG]  [BUGGY]  throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ "'  is  not  a  valid  number. ");  [CE]  ';'  expected  [FE]          NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ "'  is  not  a  valid  number. ");  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ "'  is  not  a  valid  number. ");	  throw    new    NumberFormatException(   "   ");    	non-compiled	[CE]  ';'  expected	6	None	replace
58	[BUG]  [BUGGY]  return  createBigInteger(pfx);  [CE]  ';'  expected  [FE]        NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  return  createBigInteger(pfx);  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	return  createBigInteger(pfx);	  return    createBigInteger(str);    	non-compiled	[CE]  ';'  expected	13	None	replace
59	[BUG]  [BUGGY]  return  createBigDecimal(str);  [CE]  ';'  expected  [FE]          NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  return  createBigDecimal(str);  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	return  createBigDecimal(str);	  return    createBigInteger(str);    	non-compiled	[CE]  ';'  expected	13	None	replace
60	[BUG]  [BUGGY]  return  createLong(pfx);  [CE]  ';'  expected  [FE]            NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  return  createLong(pfx);  [BUGGY]    }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	return  createLong(pfx);	  return    createBigInteger(str);    	non-compiled	[CE]  ';'  expected	13	None	replace
61	[BUG]  [BUGGY]  pendPath(str.charAt(0)),  pfxLen  +=  str.length();  [CE]  ';'  expected  [FE]            NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  pendPath(str.charAt(0)),  pfxLen  +=  str.length();  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pendPath(str.charAt(0)),  pfxLen  +=  str.length();	      if(pfxLen    ==    0)    {    pfxLen    +=    str.length();    }    	non-compiled	[CE]  ';'  expected	3	None	replace
62	[BUG]  [BUGGY]  pendPath(str.charAt(0))  +  pfxLen  +=  str.length();  [CE]  ';'  expected  [FE]              NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  pendPath(str.charAt(0))  +  pfxLen  +=  str.length();  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pendPath(str.charAt(0))  +  pfxLen  +=  str.length();	      if(pfxLen    ==    0)    {    pfxLen    +=    str.length();    }    	non-compiled	[CE]  ';'  expected	3	None	replace
63	[BUG]  [BUGGY]  if(pfxLen  ==  1)  {  pfxLen  =  str.length();  }  [CE]  ';'  expected  [FE]                NumberFormatException    [CONTEXT]    }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(   "A  blank  string  is  not  a  valid  number   ");  }  final  String[]  hex_prefixes  =  {   "0x   ",     "0X   ",     "-0x   ",     "-0X   ",     "#   ",     "-#   "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();    [BUGGY]  if(pfxLen  ==  1)  {  pfxLen  =  str.length();  }  [BUGGY]    break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  1)  {  pfxLen  =  str.length();  }	      if(pfxLen    ==    0)    {    pfxLen    =    str.length();    }    	non-compiled	[CE]  ';'  expected	5	None	replace
