bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ((  Number)hex_prefixes).add(pfxLen  +  1);  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).add(pfxLen  +  1);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).add(pfxLen  +  1);	  ((    Number)hex_prefixes).add(pfxLen    -    1);    	non-compiled	[CE]  ';'  expected	40	None	replace
2	[BUG]  [BUGGY]  ((  Number)hex_prefixes).add(pfx.length  -  1);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).add(pfx.length  -  1);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).add(pfx.length  -  1);	  ((    Number)hex_prefixes).add(pfxLen    -    1);    	non-compiled	[CE]  ';'  expected	40	None	replace
3	[BUG]  [BUGGY]  ((  Number)hex_prefixes).add(pfxLen  -  2);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).add(pfxLen  -  2);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).add(pfxLen  -  2);	  ((    Number)hex_prefixes).add(pfxLen    -    1);    	non-compiled	[CE]  ';'  expected	40	None	replace
4	[BUG]  [BUGGY]  if(pfxLen  ==  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen);  }  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  ==  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen);  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen);  }	  throw    new    NumberFormatException(   "Invalid    number:   "    +    pfxLen);    	non-compiled	[CE]  ';'  expected	29	None	replace
5	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen  + "  for  str: "  +  str);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen  + "  for  str: "  +  str);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen  + "  for  str: "  +  str);	  throw    new    NumberFormatException(   "Invalid    number:   "    +    pfxLen);    	non-compiled	[CE]  ';'  expected	29	None	replace
6	[BUG]  [BUGGY]  Throwables.throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ "'  is  not  a  valid  string. ");  [CE]  <identifier>  expected  [FE]            NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  Throwables.throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ "'  is  not  a  valid  string. ");  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	Throwables.throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ "'  is  not  a  valid  string. ");	  throw    new    NumberFormatException(   "The    number    '   "    +    str.substring(pfxLen)+   "'    is    not    a    valid    string.   ");    	non-compiled	[CE]  <identifier>  expected	56	None	replace
7	[BUG]  [BUGGY]  if(pfxLen  ==  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  hex_prefixes);  }  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  ==  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  hex_prefixes);  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  hex_prefixes);  }	  throw    new    NumberFormatException(   "Invalid    number:   "    +    hex_prefixes);    	non-compiled	[CE]  ';'  expected	39	None	replace
8	[BUG]  [BUGGY]  pfxLen  =  pfx.length();  [CE]  ';'  expected  [FE]            NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pfxLen  =  pfx.length();  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pfxLen  =  pfx.length();	  pfxLen    =    str.length()    -    1;    	non-compiled	[CE]  ';'  expected	31	None	replace
9	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append('-',  pfxLen  +  1);  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append('-',  pfxLen  +  1);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append('-',  pfxLen  +  1);	  ((    Number)hex_prefixes).append('-',    pfxLen);    	non-compiled	[CE]  ';'  expected	1	None	replace
10	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append('-',  str.length()  -  pfxLen);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append('-',  str.length()  -  pfxLen);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append('-',  str.length()  -  pfxLen);	  ((    Number)hex_prefixes).append('-',    pfxLen);    	non-compiled	[CE]  ';'  expected	1	None	replace
11	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append('-',  pfxLen  +  1,  str.length());  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append('-',  pfxLen  +  1,  str.length());  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append('-',  pfxLen  +  1,  str.length());	  ((    Number)hex_prefixes).append('-',    pfxLen);    	non-compiled	[CE]  ';'  expected	1	None	replace
12	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append('-',  pfxLen  -  1);  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append('-',  pfxLen  -  1);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append('-',  pfxLen  -  1);	  ((    Number)hex_prefixes).append('-',    pfxLen);    	non-compiled	[CE]  ';'  expected	1	None	replace
13	[BUG]  [BUGGY]  if(pfxLen  ==  1)  {  throw  new  NumberFormatException( "Invalid  number: "  +  pfx);  }  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  ==  1)  {  throw  new  NumberFormatException( "Invalid  number: "  +  pfx);  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  1)  {  throw  new  NumberFormatException( "Invalid  number: "  +  pfx);  }	  if(pfxLen    ==    0)    {    throw    new    NumberFormatException(   "Invalid    number:   "    +    pfx);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
14	[BUG]  [BUGGY]  ||  pfxLen  ==  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  pfx);  }  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ||  pfxLen  ==  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  pfx);  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	||  pfxLen  ==  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  pfx);  }	  if(pfxLen    ==    0)    {    throw    new    NumberFormatException(   "Invalid    number:   "    +    pfx);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
15	[BUG]  [BUGGY]  if(pfxLen  <  =  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  pfx);  }  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  <  =  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  pfx);  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  <  =  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  pfx);  }	  if(pfxLen    ==    0)    {    throw    new    NumberFormatException(   "Invalid    number:   "    +    pfx);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
16	[BUG]  [BUGGY]  ((  Number)hex_prefixes).add(pfxLen,  str);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).add(pfxLen,  str);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).add(pfxLen,  str);	  ((    Number)hex_prefixes).add(pfxLen,    pfx);    	non-compiled	[CE]  ';'  expected	6	None	replace
17	[BUG]  [BUGGY]  ((  Number)hex_prefixes).add(pfxLen,  hex_prefixes);  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).add(pfxLen,  hex_prefixes);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).add(pfxLen,  hex_prefixes);	  ((    Number)hex_prefixes).add(pfxLen,    pfx);    	non-compiled	[CE]  ';'  expected	6	None	replace
18	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append(pfxLen  +  2);  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append(pfxLen  +  2);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append(pfxLen  +  2);	  ((    Number)hex_prefixes).append(pfxLen    +    1);    	non-compiled	[CE]  ';'  expected	20	None	replace
19	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append(pfxLen  /  1);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append(pfxLen  /  1);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append(pfxLen  /  1);	  ((    Number)hex_prefixes).append(pfxLen    +    1);    	non-compiled	[CE]  ';'  expected	20	None	replace
20	[BUG]  [BUGGY]  if(pfxLen  ==  1)  {  return  createBigDecimal(pfx);  }  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  ==  1)  {  return  createBigDecimal(pfx);  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  1)  {  return  createBigDecimal(pfx);  }	  if(pfxLen    ==    1)    {    return    createBigInteger(pfx);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
21	[BUG]  [BUGGY]  if(pfxLen  ==  2)  {  return  createBigInteger(pfx);  }  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  ==  2)  {  return  createBigInteger(pfx);  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  2)  {  return  createBigInteger(pfx);  }	  if(pfxLen    ==    1)    {    return    createBigInteger(pfx);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
22	[BUG]  [BUGGY]  if(pfxLen  ==  1)  {  return  createBigInteger(0);  }  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  ==  1)  {  return  createBigInteger(0);  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  1)  {  return  createBigInteger(0);  }	  if(pfxLen    ==    1)    {    return    createBigInteger(pfx);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
23	[BUG]  [BUGGY]  if(pfxLen  >  1)  {  return  createBigInteger(str);  }  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  >  1)  {  return  createBigInteger(str);  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  >  1)  {  return  createBigInteger(str);  }	  if(pfxLen    ==    1)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
24	[BUG]  [BUGGY]  if(pfxLen  ==  1)  {  return  createNumber(str);  }  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  ==  1)  {  return  createNumber(str);  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  1)  {  return  createNumber(str);  }	  if(pfxLen    ==    1)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
25	[BUG]  [BUGGY]  if(pfxLen  ==  1)  {  return  createInteger(str);  }  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  ==  1)  {  return  createInteger(str);  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  1)  {  return  createInteger(str);  }	  if(pfxLen    ==    1)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
26	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append('-'  +  pfxLen  +  1);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append('-'  +  pfxLen  +  1);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append('-'  +  pfxLen  +  1);	  ((    Number)hex_prefixes).append('-'    +    pfxLen);    	non-compiled	[CE]  ';'  expected	2	None	replace
27	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append('-'  +  str.length());  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append('-'  +  str.length());  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append('-'  +  str.length());	  ((    Number)hex_prefixes).append('-'    +    pfxLen);    	non-compiled	[CE]  ';'  expected	2	None	replace
28	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append('-'  +  str.length()  -  pfxLen);  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append('-'  +  str.length()  -  pfxLen);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append('-'  +  str.length()  -  pfxLen);	  ((    Number)hex_prefixes).append('-'    +    pfxLen);    	non-compiled	[CE]  ';'  expected	2	None	replace
29	[BUG]  [BUGGY]  if(pfxLen  >=  0)  {  break;  }  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  >=  0)  {  break;  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  >=  0)  {  break;  }	  if(pfxLen!=    0)    {    break;    }    	non-compiled	[CE]  ';'  expected	41	None	replace
30	[BUG]  [BUGGY]  if(pfxLen  <  1)  {  pfxLen  +=  str.length();  }  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  <  1)  {  pfxLen  +=  str.length();  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  <  1)  {  pfxLen  +=  str.length();  }	  if(pfxLen    ==    1)    {    pfxLen    +=    str.length();    }    	non-compiled	[CE]  ';'  expected	35	None	replace
31	[BUG]  [BUGGY]  Throwables.throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ "'  is  not  a  valid  number. ");  [CE]  <identifier>  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  Throwables.throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ "'  is  not  a  valid  number. ");  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	Throwables.throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ "'  is  not  a  valid  number. ");	  throw    new    NumberFormatException(   "The    number    '   "    +    str.substring(pfxLen)+   "'    is    not    a    valid    number.   ");    	non-compiled	[CE]  <identifier>  expected	57	None	replace
32	[BUG]  [BUGGY]  throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ ",'  is  not  a  valid  number. ");  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ ",'  is  not  a  valid  number. ");  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ ",'  is  not  a  valid  number. ");	  throw    new    NumberFormatException(   "The    number    '   "    +    str.substring(pfxLen)+   "'    is    not    a    valid    number.   ");    	non-compiled	[CE]  ';'  expected	57	None	replace
33	[BUG]  [BUGGY]  return  createBigDecimal(pfx,  str);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  return  createBigDecimal(pfx,  str);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	return  createBigDecimal(pfx,  str);	  return    createBigDecimal(pfx);    	non-compiled	[CE]  ';'  expected	44	None	replace
34	[BUG]  [BUGGY]  (pfxLen  ==  1)?  str.length()  :  pfx.length();  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  (pfxLen  ==  1)?  str.length()  :  pfx.length();  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	(pfxLen  ==  1)?  str.length()  :  pfx.length();	  (pfxLen    ==    0)?    str.length()    :    pfx.length();    	non-compiled	[CE]  not  a  statement	22	None	replace
35	[BUG]  [BUGGY]  (pfxLen  ==  2)?  str.length()  :  pfx.length();  [CE]  not  a  statement  [FE]                      NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  (pfxLen  ==  2)?  str.length()  :  pfx.length();  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	(pfxLen  ==  2)?  str.length()  :  pfx.length();	  (pfxLen    ==    0)?    str.length()    :    pfx.length();    	non-compiled	[CE]  not  a  statement	22	None	replace
36	[BUG]  [BUGGY]  (pfxLen  ==  0)?  str.length()  :  pfx.charAt(pfxLen);  [CE]  not  a  statement  [FE]                        NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  (pfxLen  ==  0)?  str.length()  :  pfx.charAt(pfxLen);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	(pfxLen  ==  0)?  str.length()  :  pfx.charAt(pfxLen);	  (pfxLen    ==    0)?    str.length()    :    pfx.length();    	non-compiled	[CE]  not  a  statement	22	None	replace
37	[BUG]  [BUGGY]  ((  Number)hex_prefixes).add(pfx,  mant);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).add(pfx,  mant);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).add(pfx,  mant);	  ((    Number)hex_prefixes).add(pfx,    str);    	non-compiled	[CE]  ';'  expected	5	None	replace
38	[BUG]  [BUGGY]  ((  Number)hex_prefixes).add(pfx,  exp);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).add(pfx,  exp);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).add(pfx,  exp);	  ((    Number)hex_prefixes).add(pfx,    str);    	non-compiled	[CE]  ';'  expected	5	None	replace
39	[BUG]  [BUGGY]  ((  Number)hex_prefixes).setLength(2);  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).setLength(2);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).setLength(2);	  ((    Number)hex_prefixes).setLength(1);    	non-compiled	[CE]  ';'  expected	9	None	replace
40	[BUG]  [BUGGY]  ((  Number)hex_prefixes).setPosition(1);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).setPosition(1);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).setPosition(1);	  ((    Number)hex_prefixes).setLength(1);    	non-compiled	[CE]  ';'  expected	9	None	replace
41	[BUG]  [BUGGY]  if(pfxLen  <  =  0)  {  return  createBigInteger(str);  }  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  <  =  0)  {  return  createBigInteger(str);  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  <  =  0)  {  return  createBigInteger(str);  }	  if(pfxLen    ==    0)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
42	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append(pfxLen  -  2);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append(pfxLen  -  2);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append(pfxLen  -  2);	  ((    Number)hex_prefixes).append(pfxLen    -    1);    	non-compiled	[CE]  ';'  expected	21	None	replace
43	[BUG]  [BUGGY]  (pfxLen  ==  1)&&  str.charAt(pfxLen  -  1)!=  ';')  {  pfxLen  =  str.length();  }  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  (pfxLen  ==  1)&&  str.charAt(pfxLen  -  1)!=  ';')  {  pfxLen  =  str.length();  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	(pfxLen  ==  1)&&  str.charAt(pfxLen  -  1)!=  ';')  {  pfxLen  =  str.length();  }	  (pfxLen    ==    0)&&    str.charAt(pfxLen    -    1)!=    ';')    {    pfxLen    =    str.length();    }    	non-compiled	[CE]  not  a  statement	36	None	replace
44	[BUG]  [BUGGY]  (pfxLen  >=  0)&&  str.charAt(pfxLen  -  1)!=  ';')  {  pfxLen  =  str.length();  }  [CE]  not  a  statement  [FE]                      NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  (pfxLen  >=  0)&&  str.charAt(pfxLen  -  1)!=  ';')  {  pfxLen  =  str.length();  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	(pfxLen  >=  0)&&  str.charAt(pfxLen  -  1)!=  ';')  {  pfxLen  =  str.length();  }	  (pfxLen    ==    0)&&    str.charAt(pfxLen    -    1)!=    ';')    {    pfxLen    =    str.length();    }    	non-compiled	[CE]  not  a  statement	36	None	replace
45	[BUG]  [BUGGY]  (pfxLen  ==  0)&&  str.charAt(pfxLen  -  1)  ==  ';')  {  pfxLen  =  str.length();  }  [CE]  not  a  statement  [FE]                        NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  (pfxLen  ==  0)&&  str.charAt(pfxLen  -  1)  ==  ';')  {  pfxLen  =  str.length();  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	(pfxLen  ==  0)&&  str.charAt(pfxLen  -  1)  ==  ';')  {  pfxLen  =  str.length();  }	  (pfxLen    ==    0)&&    str.charAt(pfxLen    -    1)!=    ';')    {    pfxLen    =    str.length();    }    	non-compiled	[CE]  not  a  statement	36	None	replace
46	[BUG]  [BUGGY]  pfxLen  =  2;  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pfxLen  =  2;  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pfxLen  =  2;	  pfxLen    =    4;    	non-compiled	[CE]  ';'  expected	27	None	replace
47	[BUG]  [BUGGY]  if(pfxLen  >=  16)  {  return  createBigInteger(str);  }  [CE]  ';'  expected  [FE]            NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  >=  16)  {  return  createBigInteger(str);  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  >=  16)  {  return  createBigInteger(str);  }	  if(pfxLen    >    16)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
48	[BUG]  [BUGGY]  if(pfxLen  <  =  16)  {  return  createBigInteger(str);  }  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  <  =  16)  {  return  createBigInteger(str);  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  <  =  16)  {  return  createBigInteger(str);  }	  if(pfxLen    >    16)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
49	[BUG]  [BUGGY]  ||  pfxLen  ==  0)  {  throw  new  NumberFormatException( " ");  }  [CE]  illegal  start  of  expression  [FE]            NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ||  pfxLen  ==  0)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	||  pfxLen  ==  0)  {  throw  new  NumberFormatException( " ");  }	  if(pfxLen    ==    0)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
50	[BUG]  [BUGGY]  if(pfxLen  >  0)  {  throw  new  NumberFormatException( " ");  }  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  >  0)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  >  0)  {  throw  new  NumberFormatException( " ");  }	  if(pfxLen    ==    0)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ';'  expected	34	None	replace
51	[BUG]  [BUGGY]  if(pfxLen  <  =  0)  {  throw  new  NumberFormatException( " ");  }  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  <  =  0)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  <  =  0)  {  throw  new  NumberFormatException( " ");  }	  if(pfxLen    ==    0)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
52	[BUG]  [BUGGY]  (pfxLen  ==  1)&&  str.charAt(pfxLen  -  1)!=  ':')  {  pfxLen  =  str.length();  }  [CE]  not  a  statement  [FE]                      NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  (pfxLen  ==  1)&&  str.charAt(pfxLen  -  1)!=  ':')  {  pfxLen  =  str.length();  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	(pfxLen  ==  1)&&  str.charAt(pfxLen  -  1)!=  ':')  {  pfxLen  =  str.length();  }	  (pfxLen    ==    0)&&    str.charAt(pfxLen    -    1)!=    ':')    {    pfxLen    =    str.length();    }    	non-compiled	[CE]  not  a  statement	37	None	replace
53	[BUG]  [BUGGY]  (pfxLen  ==  0)&&  str.charAt(pfxLen  -  1)  ==  ':')  {  pfxLen  =  str.length();  }  [CE]  not  a  statement  [FE]                        NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  (pfxLen  ==  0)&&  str.charAt(pfxLen  -  1)  ==  ':')  {  pfxLen  =  str.length();  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	(pfxLen  ==  0)&&  str.charAt(pfxLen  -  1)  ==  ':')  {  pfxLen  =  str.length();  }	  (pfxLen    ==    0)&&    str.charAt(pfxLen    -    1)!=    ':')    {    pfxLen    =    str.length();    }    	non-compiled	[CE]  not  a  statement	37	None	replace
54	[BUG]  [BUGGY]  (pfxLen  >=  0)&&  str.charAt(pfxLen  -  1)!=  ':')  {  pfxLen  =  str.length();  }  [CE]  not  a  statement  [FE]                          NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  (pfxLen  >=  0)&&  str.charAt(pfxLen  -  1)!=  ':')  {  pfxLen  =  str.length();  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	(pfxLen  >=  0)&&  str.charAt(pfxLen  -  1)!=  ':')  {  pfxLen  =  str.length();  }	  (pfxLen    ==    0)&&    str.charAt(pfxLen    -    1)!=    ':')    {    pfxLen    =    str.length();    }    	non-compiled	[CE]  not  a  statement	37	None	replace
55	[BUG]  [BUGGY]  ((  Number)hex_prefixes).add(pfx,  pfxLen  +  1);  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).add(pfx,  pfxLen  +  1);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).add(pfx,  pfxLen  +  1);	  ((    Number)hex_prefixes).add(pfx    +    1);    	non-compiled	[CE]  ';'  expected	55	None	replace
56	[BUG]  [BUGGY]  ((  Number)hex_prefixes).add(pfx.length  +  1);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).add(pfx.length  +  1);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).add(pfx.length  +  1);	  ((    Number)hex_prefixes).add(pfx    +    1);    	non-compiled	[CE]  ';'  expected	55	None	replace
57	[BUG]  [BUGGY]  ((  Number)hex_prefixes).add(pfx,  0);  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).add(pfx,  0);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).add(pfx,  0);	  ((    Number)hex_prefixes).add(pfx,    pfxLen);    	non-compiled	[CE]  ';'  expected	7	None	replace
58	[BUG]  [BUGGY]  ((  Number)hex_prefixes).add(pfx,  1);  [CE]  ';'  expected  [FE]                      NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).add(pfx,  1);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).add(pfx,  1);	  ((    Number)hex_prefixes).add(pfx,    pfxLen);    	non-compiled	[CE]  ';'  expected	7	None	replace
59	[BUG]  [BUGGY]  ((  Number)hex_prefixes).add(pfx,  str.length());  [CE]  ';'  expected  [FE]                        NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).add(pfx,  str.length());  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).add(pfx,  str.length());	  ((    Number)hex_prefixes).add(pfx,    pfxLen);    	non-compiled	[CE]  ';'  expected	7	None	replace
60	[BUG]  [BUGGY]  if(pfxLen  ==  1)  {  pfxLen  =  str.length()  +  1;  }  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  ==  1)  {  pfxLen  =  str.length()  +  1;  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  1)  {  pfxLen  =  str.length()  +  1;  }	  if(pfxLen    ==    1)    {    pfxLen    =    str.length();    }    	non-compiled	[CE]  ';'  expected	63	None	replace
61	[BUG]  [BUGGY]  if(pfxLen  ==  0)  {  return  createBigDecimal(str);  }  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  ==  0)  {  return  createBigDecimal(str);  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  0)  {  return  createBigDecimal(str);  }	  return    createBigDecimal(str);    	non-compiled	[CE]  ';'  expected	59	None	replace
62	[BUG]  [BUGGY]  if(pfxLen  ==  0  ||  hex_prefixes  ==  null)  {  break;  }  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  ==  0  ||  hex_prefixes  ==  null)  {  break;  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  0  ||  hex_prefixes  ==  null)  {  break;  }	  if(pfxLen    ==    0    ||    hex_prefixes!=    null)    {    break;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
63	[BUG]  [BUGGY]  if(pfxLen  >=  0  ||  hex_prefixes!=  null)  {  break;  }  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  >=  0  ||  hex_prefixes!=  null)  {  break;  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  >=  0  ||  hex_prefixes!=  null)  {  break;  }	  if(pfxLen    ==    0    ||    hex_prefixes!=    null)    {    break;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
64	[BUG]  [BUGGY]  if(pfxLen  <  =  1)  {  break;  }  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  <  =  1)  {  break;  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  <  =  1)  {  break;  }	  if(pfxLen    <    =    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
65	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen  + ",  hex_prefixes);  [CE]  unclosed  string  literal  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen  + ",  hex_prefixes);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen  + ",  hex_prefixes);	  throw    new    NumberFormatException(   "Invalid    number:   "    +    pfxLen,    hex_prefixes);    	non-compiled	[CE]  unclosed  string  literal	52	None	replace
66	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen,  str);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen,  str);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen,  str);	  throw    new    NumberFormatException(   "Invalid    number:   "    +    pfxLen,    hex_prefixes);    	non-compiled	[CE]  ';'  expected	52	None	replace
67	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  str,  pfxLen);  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  str,  pfxLen);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  str,  pfxLen);	  throw    new    NumberFormatException(   "Invalid    number:   "    +    pfxLen,    hex_prefixes);    	non-compiled	[CE]  ';'  expected	52	None	replace
68	[BUG]  [BUGGY]  pfxLen  +=  pfx.length()  +  1;  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pfxLen  +=  pfx.length()  +  1;  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pfxLen  +=  pfx.length()  +  1;	  pfxLen    +=    pfx.length();    	non-compiled	[CE]  ';'  expected	33	None	replace
69	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  str.substring(pfxLen));  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  str.substring(pfxLen));  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  str.substring(pfxLen));	  throw    new    NumberFormatException(   "Invalid    number:   "    +    str);    	non-compiled	[CE]  ';'  expected	28	None	replace
70	[BUG]  [BUGGY]  ((  Number)hex_prefixes).set(pfxLen);  [CE]  ';'  expected  [FE]            NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).set(pfxLen);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).set(pfxLen);	  ((    Number)hex_prefixes).reset();    	non-compiled	[CE]  ';'  expected	8	None	replace
71	[BUG]  [BUGGY]  ((  Number)hex_prefixes).set(pfx,  pfxLen);  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).set(pfx,  pfxLen);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).set(pfx,  pfxLen);	  ((    Number)hex_prefixes).reset();    	non-compiled	[CE]  ';'  expected	8	None	replace
72	[BUG]  [BUGGY]  ((  Number)hex_prefixes).addValue(pfx,  pfxLen);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).addValue(pfx,  pfxLen);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).addValue(pfx,  pfxLen);	  ((    Number)hex_prefixes).reset();    	non-compiled	[CE]  ';'  expected	8	None	replace
73	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append('-').append(pfxLen  +  1);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append('-').append(pfxLen  +  1);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append('-').append(pfxLen  +  1);	  ((    Number)hex_prefixes).append('-').append(pfxLen);    	non-compiled	[CE]  ';'  expected	3	None	replace
74	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append('-').append(pfxLen  -  1);  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append('-').append(pfxLen  -  1);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append('-').append(pfxLen  -  1);	  ((    Number)hex_prefixes).append('-').append(pfxLen);    	non-compiled	[CE]  ';'  expected	3	None	replace
75	[BUG]  [BUGGY]  ((  Number)hex_prefixes).toString().append('-').append(pfxLen);  [CE]  ';'  expected  [FE]                      NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).toString().append('-').append(pfxLen);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).toString().append('-').append(pfxLen);	  ((    Number)hex_prefixes).append('-').append(pfxLen);    	non-compiled	[CE]  ';'  expected	3	None	replace
76	[BUG]  [BUGGY]  ((  Number)hex_prefixes).toCharArray().append('-').append(pfxLen);  [CE]  ';'  expected  [FE]                        NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).toCharArray().append('-').append(pfxLen);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).toCharArray().append('-').append(pfxLen);	  ((    Number)hex_prefixes).append('-').append(pfxLen);    	non-compiled	[CE]  ';'  expected	3	None	replace
77	[BUG]  [BUGGY]  if(pfxLen  ==  0)  {  return  createBigInteger(pfxLen);  }  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  ==  0)  {  return  createBigInteger(pfxLen);  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  0)  {  return  createBigInteger(pfxLen);  }	  return    createBigInteger(pfxLen);    	non-compiled	[CE]  ';'  expected	43	None	replace
78	[BUG]  [BUGGY]  if(pfxLen  <  =  1)  {  return  createBigInteger(pfx);  }  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  <  =  1)  {  return  createBigInteger(pfx);  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  <  =  1)  {  return  createBigInteger(pfx);  }	  if(pfxLen    <    =    0)    {    return    createBigInteger(pfx);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
79	[BUG]  [BUGGY]  if(pfxLen!=  0)  {  return  createBigInteger(pfx);  }  [CE]  ';'  expected  [FE]                      NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen!=  0)  {  return  createBigInteger(pfx);  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen!=  0)  {  return  createBigInteger(pfx);  }	  if(pfxLen    <    =    0)    {    return    createBigInteger(pfx);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
80	[BUG]  [BUGGY]  if(pfxLen  >=  0)  {  return  createBigInteger(pfx);  }  [CE]  ';'  expected  [FE]                        NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  >=  0)  {  return  createBigInteger(pfx);  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  >=  0)  {  return  createBigInteger(pfx);  }	  if(pfxLen    <    =    0)    {    return    createBigInteger(pfx);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
81	[BUG]  [BUGGY]  if(pfxLen!=  0)  {  return  createBigInteger(str);  }  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen!=  0)  {  return  createBigInteger(str);  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen!=  0)  {  return  createBigInteger(str);  }	  if(pfxLen    >    0)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
82	[BUG]  [BUGGY]  if(pfxLen  >=  0)  {  return  createBigInteger(str);  }  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  >=  0)  {  return  createBigInteger(str);  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  >=  0)  {  return  createBigInteger(str);  }	  if(pfxLen    >    0)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
83	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append(pfx.length  +  1);  [CE]  ';'  expected  [FE]            NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append(pfx.length  +  1);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append(pfx.length  +  1);	  ((    Number)hex_prefixes).append(pfx    +    1);    	non-compiled	[CE]  ';'  expected	45	None	replace
84	[BUG]  [BUGGY]  pfxLen  +=  string.length();  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pfxLen  +=  string.length();  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pfxLen  +=  string.length();	  pfxLen    +=    str.length()    +    1;    	non-compiled	[CE]  ';'  expected	32	None	replace
85	[BUG]  [BUGGY]  pendPath(str.charAt(0),  pfxLen  +=  str.length();  [CE]  ')'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pendPath(str.charAt(0),  pfxLen  +=  str.length();  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pendPath(str.charAt(0),  pfxLen  +=  str.length();	  pendPath(str.charAt(0)),    pfxLen    +=    str.length();    	non-compiled	[CE]  ')'  expected	61	None	replace
86	[BUG]  [BUGGY]  pendPath(str.charAt(0),  pfxLen  +=  str.length());  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pendPath(str.charAt(0),  pfxLen  +=  str.length());  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pendPath(str.charAt(0),  pfxLen  +=  str.length());	  pendPath(str.charAt(0)),    pfxLen    +=    str.length();    	non-compiled	[CE]  ';'  expected	61	None	replace
87	[BUG]  [BUGGY]  pendPath(pfx.charAt(0)),  pfxLen  +=  str.length();  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pendPath(pfx.charAt(0)),  pfxLen  +=  str.length();  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pendPath(pfx.charAt(0)),  pfxLen  +=  str.length();	  pendPath(str.charAt(0)),    pfxLen    +=    str.length();    	non-compiled	[CE]  ';'  expected	61	None	replace
88	[BUG]  [BUGGY]  pendPath(str.charAt(0),  pfxLen  +=  pfx.length();  [CE]  ')'  expected  [FE]                      NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pendPath(str.charAt(0),  pfxLen  +=  pfx.length();  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pendPath(str.charAt(0),  pfxLen  +=  pfx.length();	  pendPath(str.charAt(0)),    pfxLen    +=    str.length();    	non-compiled	[CE]  ')'  expected	61	None	replace
89	[BUG]  [BUGGY]  if(pfxLen  ==  1)  {  throw  new  NumberFormatException( " ");  }  [CE]  ';'  expected  [FE]            NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  ==  1)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  1)  {  throw  new  NumberFormatException( " ");  }	  if(pfxLen    ==    -1)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ';'  expected	38	None	replace
90	[BUG]  [BUGGY]  return  createLong(str);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  return  createLong(str);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	return  createLong(str);	  return    createLong(pfx);    	non-compiled	[CE]  ';'  expected	60	None	replace
91	[BUG]  [BUGGY]  return  createBigDecimal(pfxLen  +  1);  [CE]  ';'  expected  [FE]            NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  return  createBigDecimal(pfxLen  +  1);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	return  createBigDecimal(pfxLen  +  1);	  return    createBigDecimal(pfxLen);    	non-compiled	[CE]  ';'  expected	42	None	replace
92	[BUG]  [BUGGY]  pfxLen  =  createBigDecimal(pfx);  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pfxLen  =  createBigDecimal(pfx);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pfxLen  =  createBigDecimal(pfx);	  return    createBigDecimal(pfxLen);    	non-compiled	[CE]  ';'  expected	42	None	replace
93	[BUG]  [BUGGY]  return  createBigDecimal(pfxLen,  str);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  return  createBigDecimal(pfxLen,  str);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	return  createBigDecimal(pfxLen,  str);	  return    createBigDecimal(pfxLen);    	non-compiled	[CE]  ';'  expected	42	None	replace
94	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfx,  pfxLen);  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfx,  pfxLen);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  pfx,  pfxLen);	  throw    new    NumberFormatException(   "Invalid    number:   "    +    pfx,    hex_prefixes);    	non-compiled	[CE]  ';'  expected	51	None	replace
95	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  str,  hex_prefixes);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  str,  hex_prefixes);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  str,  hex_prefixes);	  throw    new    NumberFormatException(   "Invalid    number:   "    +    pfx,    hex_prefixes);    	non-compiled	[CE]  ';'  expected	51	None	replace
96	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  str,  pfx);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  str,  pfx);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  str,  pfx);	  throw    new    NumberFormatException(   "Invalid    number:   "    +    pfx,    hex_prefixes);    	non-compiled	[CE]  ';'  expected	51	None	replace
97	[BUG]  [BUGGY]  pendLength  +=  hex_prefixes.length();  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pendLength  +=  hex_prefixes.length();  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pendLength  +=  hex_prefixes.length();	  if(pfxLen    ==    0)    {    pfxLen    +=    hex_prefixes.length();    }    	non-compiled	[CE]  ';'  expected	48	None	replace
98	[BUG]  [BUGGY]  if(pfxLen  <  1)  {  break;  }  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  <  1)  {  break;  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  <  1)  {  break;  }	  if(pfxLen    ==    1)    {    break;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
99	[BUG]  [BUGGY]  if(pfxLen!=  1)  {  break;  }  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen!=  1)  {  break;  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen!=  1)  {  break;  }	  if(pfxLen    ==    1)    {    break;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
100	[BUG]  [BUGGY]  if(pfxLen  >=  1)  {  break;  }  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  >=  1)  {  break;  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  >=  1)  {  break;  }	  if(pfxLen    ==    1)    {    break;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
101	[BUG]  [BUGGY]  pendPath(str.charAt(0))+  pfxLen  +=  pfx.length();  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pendPath(str.charAt(0))+  pfxLen  +=  pfx.length();  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pendPath(str.charAt(0))+  pfxLen  +=  pfx.length();	  pendPath(str.charAt(0))    +    pfxLen    +=    str.length();    	non-compiled	[CE]  ';'  expected	62	None	replace
102	[BUG]  [BUGGY]  pendPath(pfx.charAt(0))+  pfxLen  +=  str.length();  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pendPath(pfx.charAt(0))+  pfxLen  +=  str.length();  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pendPath(pfx.charAt(0))+  pfxLen  +=  str.length();	  pendPath(str.charAt(0))    +    pfxLen    +=    str.length();    	non-compiled	[CE]  ';'  expected	62	None	replace
103	[BUG]  [BUGGY]  pfxLen  -=  hex_prefixes.length();  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pfxLen  -=  hex_prefixes.length();  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pfxLen  -=  hex_prefixes.length();	  pfxLen    +=    hex_prefixes.length();    	non-compiled	[CE]  ';'  expected	46	None	replace
104	[BUG]  [BUGGY]  if(pfxLen!=  -1)  {  throw  new  NumberFormatException( " ");  }  [CE]  ';'  expected  [FE]            NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen!=  -1)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen!=  -1)  {  throw  new  NumberFormatException( " ");  }	  if(pfxLen    ==    -1)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ';'  expected	38	None	replace
105	[BUG]  [BUGGY]  if(pfxLen!=  0)  {  throw  new  NumberFormatException( " ");  }  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen!=  0)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen!=  0)  {  throw  new  NumberFormatException( " ");  }	  if(pfxLen    ==    -1)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ';'  expected	38	None	replace
106	[BUG]  [BUGGY]  return  createInteger(pfxLen);  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  return  createInteger(pfxLen);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	return  createInteger(pfxLen);	  return    createBigDecimal(str);    	non-compiled	[CE]  ';'  expected	59	None	replace
107	[BUG]  [BUGGY]  (pfxLen  ==  0)&&  str.charAt(0)  ==  ':')  {  pfxLen  =  str.length();  }  [CE]  not  a  statement  [FE]                      NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  (pfxLen  ==  0)&&  str.charAt(0)  ==  ':')  {  pfxLen  =  str.length();  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	(pfxLen  ==  0)&&  str.charAt(0)  ==  ':')  {  pfxLen  =  str.length();  }	  (pfxLen    ==    0)&&    str.charAt(pfxLen    -    1)!=    ':')    {    pfxLen    =    str.length();    }    	non-compiled	[CE]  not  a  statement	37	None	replace
108	[BUG]  [BUGGY]  pfxLen  +=  SHORT_ZERO;  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pfxLen  +=  SHORT_ZERO;  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pfxLen  +=  SHORT_ZERO;	  pfxLen    +=    str.length()    +    1;    	non-compiled	[CE]  ';'  expected	32	None	replace
109	[BUG]  [BUGGY]  if(pfxLen  >  1)  {  break;  }  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  >  1)  {  break;  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  >  1)  {  break;  }	  if(pfxLen    ==    1)    {    break;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
110	[BUG]  [BUGGY]  if(pfxLen  ==  0)  {  throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ "'  is  not  a  valid  number. ");  }  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  ==  0)  {  throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ "'  is  not  a  valid  number. ");  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  0)  {  throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ "'  is  not  a  valid  number. ");  }	  throw    new    NumberFormatException(   "The    number    '   "    +    str.substring(pfxLen)+   "'    is    not    a    valid    number.   ");    	non-compiled	[CE]  ';'  expected	57	None	replace
111	[BUG]  [BUGGY]  return  createBigInteger(pfxLen  +  1);  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  return  createBigInteger(pfxLen  +  1);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	return  createBigInteger(pfxLen  +  1);	  return    createBigInteger(pfxLen);    	non-compiled	[CE]  ';'  expected	43	None	replace
112	[BUG]  [BUGGY]  (pfxLen  ==  0)?  str.length()  :  pfx.substring(0,  pfxLen);  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  (pfxLen  ==  0)?  str.length()  :  pfx.substring(0,  pfxLen);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	(pfxLen  ==  0)?  str.length()  :  pfx.substring(0,  pfxLen);	  (pfxLen    ==    0)?    str.length()    :    pfx.length();    	non-compiled	[CE]  not  a  statement	22	None	replace
113	[BUG]  [BUGGY]  (pfxLen  ==  0)?  str.length()  :  pfx.length()  +  1;  [CE]  not  a  statement  [FE]                      NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  (pfxLen  ==  0)?  str.length()  :  pfx.length()  +  1;  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	(pfxLen  ==  0)?  str.length()  :  pfx.length()  +  1;	  (pfxLen    ==    0)?    str.length()    :    pfx.length();    	non-compiled	[CE]  not  a  statement	22	None	replace
114	[BUG]  [BUGGY]  ((  Number)hex_prefixes).add(pfx,  hex_prefixes);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).add(pfx,  hex_prefixes);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).add(pfx,  hex_prefixes);	  ((    Number)hex_prefixes).add(pfxLen,    pfx);    	non-compiled	[CE]  ';'  expected	6	None	replace
115	[BUG]  [BUGGY]  ((  Number)hex_prefixes).add(pfx,  hexLen);  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).add(pfx,  hexLen);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).add(pfx,  hexLen);	  ((    Number)hex_prefixes).add(pfxLen,    pfx);    	non-compiled	[CE]  ';'  expected	6	None	replace
116	[BUG]  [BUGGY]  if(pfxLen  ==  1)  {  return  createBigDecimal(str);  }  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  ==  1)  {  return  createBigDecimal(str);  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  1)  {  return  createBigDecimal(str);  }	  if(pfxLen    ==    1)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
117	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append('-',  12);  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append('-',  12);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append('-',  12);	  ((    Number)hex_prefixes).append('-',    pfxLen);    	non-compiled	[CE]  ';'  expected	1	None	replace
118	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append('-',  4);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append('-',  4);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append('-',  4);	  ((    Number)hex_prefixes).append('-',    pfxLen);    	non-compiled	[CE]  ';'  expected	1	None	replace
119	[BUG]  [BUGGY]  if(pfxLen  ==  0)  {  throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ "'  is  not  a  valid  string. ");  }  [CE]  ';'  expected  [FE]            NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  ==  0)  {  throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ "'  is  not  a  valid  string. ");  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  0)  {  throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ "'  is  not  a  valid  string. ");  }	  throw    new    NumberFormatException(   "The    number    '   "    +    str.substring(pfxLen)+   "'    is    not    a    valid    string.   ");    	non-compiled	[CE]  ';'  expected	56	None	replace
120	[BUG]  [BUGGY]  throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ ",'  is  not  a  valid  string. ");  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ ",'  is  not  a  valid  string. ");  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ ",'  is  not  a  valid  string. ");	  throw    new    NumberFormatException(   "The    number    '   "    +    str.substring(pfxLen)+   "'    is    not    a    valid    string.   ");    	non-compiled	[CE]  ';'  expected	56	None	replace
121	[BUG]  [BUGGY]  if(hexLen  >  0)  {  return  createBigInteger(str);  }  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(hexLen  >  0)  {  return  createBigInteger(str);  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(hexLen  >  0)  {  return  createBigInteger(str);  }	  if(hexLen    ==    0)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ';'  expected	47	None	replace
122	[BUG]  [BUGGY]  if(hexLen  ==  0)  {  return  createBigInteger(pfxLen);  }  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(hexLen  ==  0)  {  return  createBigInteger(pfxLen);  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(hexLen  ==  0)  {  return  createBigInteger(pfxLen);  }	  if(hexLen    ==    0)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ';'  expected	47	None	replace
123	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  hexLen);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  hexLen);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  hexLen);	  throw    new    NumberFormatException(   "Invalid    number:   "    +    pfxLen);    	non-compiled	[CE]  ';'  expected	29	None	replace
124	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen  + ", ");  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen  + ", ");  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen  + ", ");	  throw    new    NumberFormatException(   "Invalid    number:   "    +    pfxLen);    	non-compiled	[CE]  ';'  expected	29	None	replace
125	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen  + ";n ");  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen  + ";n ");  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen  + ";n ");	  throw    new    NumberFormatException(   "Invalid    number:   "    +    pfxLen);    	non-compiled	[CE]  ';'  expected	29	None	replace
126	[BUG]  [BUGGY]  ((  Number)hex_prefixes).setPosition(0,  pfxLen);  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).setPosition(0,  pfxLen);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).setPosition(0,  pfxLen);	  ((    Number)hex_prefixes).setLength(1);    	non-compiled	[CE]  ';'  expected	9	None	replace
127	[BUG]  [BUGGY]  ((  Number)hex_prefixes).setPosition(pfxLen);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).setPosition(pfxLen);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).setPosition(pfxLen);	  ((    Number)hex_prefixes).setLength(1);    	non-compiled	[CE]  ';'  expected	9	None	replace
128	[BUG]  [BUGGY]  ((  Number)hex_prefixes).setValue(pfxLen);  [CE]  ';'  expected  [FE]            NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).setValue(pfxLen);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).setValue(pfxLen);	  ((    Number)hex_prefixes).reset();    	non-compiled	[CE]  ';'  expected	8	None	replace
129	[BUG]  [BUGGY]  pendPath(str.charAt(0))+  pfxLen  +=  hex_prefixes.length();  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pendPath(str.charAt(0))+  pfxLen  +=  hex_prefixes.length();  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pendPath(str.charAt(0))+  pfxLen  +=  hex_prefixes.length();	  pendPath(str.charAt(0))    +    pfxLen    +=    str.length();    	non-compiled	[CE]  ';'  expected	62	None	replace
130	[BUG]  [BUGGY]  pendPath(str.charAt(0))+  1  +=  str.length();  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pendPath(str.charAt(0))+  1  +=  str.length();  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pendPath(str.charAt(0))+  1  +=  str.length();	  pendPath(str.charAt(0))    +    pfxLen    +=    str.length();    	non-compiled	[CE]  ';'  expected	62	None	replace
131	[BUG]  [BUGGY]  return  createBigDecimal(pfxLen  -  1);  [CE]  ';'  expected  [FE]            NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  return  createBigDecimal(pfxLen  -  1);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	return  createBigDecimal(pfxLen  -  1);	  return    createBigDecimal(pfxLen);    	non-compiled	[CE]  ';'  expected	42	None	replace
132	[BUG]  [BUGGY]  return  createBigDecimal(pfxLen,  hex_prefixes);  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  return  createBigDecimal(pfxLen,  hex_prefixes);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	return  createBigDecimal(pfxLen,  hex_prefixes);	  return    createBigDecimal(pfxLen);    	non-compiled	[CE]  ';'  expected	42	None	replace
133	[BUG]  [BUGGY]  if(pfxLen!=  0  ||  hex_prefixes  ==  null)  {  break;  }  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen!=  0  ||  hex_prefixes  ==  null)  {  break;  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen!=  0  ||  hex_prefixes  ==  null)  {  break;  }	  if(pfxLen    ==    0    ||    hex_prefixes!=    null)    {    break;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
134	[BUG]  [BUGGY]  if(pfxLen  >=  0  ||  hex_prefixes  ==  null)  {  break;  }  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  >=  0  ||  hex_prefixes  ==  null)  {  break;  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  >=  0  ||  hex_prefixes  ==  null)  {  break;  }	  if(pfxLen    ==    0    ||    hex_prefixes!=    null)    {    break;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
135	[BUG]  [BUGGY]  if(pfxLen  >  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  pfx);  }  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  >  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  pfx);  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  >  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  pfx);  }	  if(pfxLen    ==    0)    {    throw    new    NumberFormatException(   "Invalid    number:   "    +    pfx);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
136	[BUG]  [BUGGY]  if(pfxLen!=  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  pfx);  }  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen!=  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  pfx);  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen!=  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  pfx);  }	  if(pfxLen    ==    0)    {    throw    new    NumberFormatException(   "Invalid    number:   "    +    pfx);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
137	[BUG]  [BUGGY]  if(pfxLen  ==  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  str);  }  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  ==  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  str);  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  0)  {  throw  new  NumberFormatException( "Invalid  number: "  +  str);  }	  throw    new    NumberFormatException(   "Invalid    number:   "    +    str);    	non-compiled	[CE]  ';'  expected	28	None	replace
138	[BUG]  [BUGGY]  return  createBigDecimal(pfx,  hex_prefixes);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  return  createBigDecimal(pfx,  hex_prefixes);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	return  createBigDecimal(pfx,  hex_prefixes);	  return    createBigDecimal(pfx);    	non-compiled	[CE]  ';'  expected	44	None	replace
139	[BUG]  [BUGGY]  pfxLen  =  str.trim().length();  [CE]  ';'  expected  [FE]            NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pfxLen  =  str.trim().length();  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pfxLen  =  str.trim().length();	  pfxLen    =    str.length()    -    1;    	non-compiled	[CE]  ';'  expected	31	None	replace
140	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  hex_prefixes,  pfxLen);  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  hex_prefixes,  pfxLen);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  hex_prefixes,  pfxLen);	  throw    new    NumberFormatException(   "Invalid    number:   "    +    hex_prefixes);    	non-compiled	[CE]  ';'  expected	39	None	replace
141	[BUG]  [BUGGY]  if(pfxLen!=  16)  {  return  createBigInteger(str);  }  [CE]  ';'  expected  [FE]            NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen!=  16)  {  return  createBigInteger(str);  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen!=  16)  {  return  createBigInteger(str);  }	  if(pfxLen    >    16)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
142	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append('-'  +  str);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append('-'  +  str);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append('-'  +  str);	  ((    Number)hex_prefixes).append('-'    +    pfxLen);    	non-compiled	[CE]  ';'  expected	2	None	replace
143	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append('-'  +  len);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append('-'  +  len);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append('-'  +  len);	  ((    Number)hex_prefixes).append('-'    +    pfxLen);    	non-compiled	[CE]  ';'  expected	2	None	replace
144	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append('-').append(pfx);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append('-').append(pfx);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append('-').append(pfx);	  ((    Number)hex_prefixes).append('-').append(pfxLen);    	non-compiled	[CE]  ';'  expected	3	None	replace
145	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append('-').append(pfxLen  +  2);  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append('-').append(pfxLen  +  2);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append('-').append(pfxLen  +  2);	  ((    Number)hex_prefixes).append('-').append(pfxLen);    	non-compiled	[CE]  ';'  expected	3	None	replace
146	[BUG]  [BUGGY]  (pfxLen  ==  0)&&  str.charAt(0)  ==  ';')  {  pfxLen  =  str.length();  }  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  (pfxLen  ==  0)&&  str.charAt(0)  ==  ';')  {  pfxLen  =  str.length();  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	(pfxLen  ==  0)&&  str.charAt(0)  ==  ';')  {  pfxLen  =  str.length();  }	  (pfxLen    ==    0)&&    str.charAt(pfxLen    -    1)!=    ';')    {    pfxLen    =    str.length();    }    	non-compiled	[CE]  not  a  statement	36	None	replace
147	[BUG]  [BUGGY]  return  createInteger(pfx);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  return  createInteger(pfx);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	return  createInteger(pfx);	  return    createLong(pfx);    	non-compiled	[CE]  ';'  expected	60	None	replace
148	[BUG]  [BUGGY]  return  createLong(pfxLen);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  return  createLong(pfxLen);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	return  createLong(pfxLen);	  return    createLong(pfx);    	non-compiled	[CE]  ';'  expected	60	None	replace
149	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append('0');  [CE]  ';'  expected  [FE]            NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append('0');  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append('0');	  ((    Number)hex_prefixes).append(pfxLen);    	non-compiled	[CE]  ';'  expected	19	None	replace
150	[BUG]  [BUGGY]  pfxLen  -=  pfx.length();  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pfxLen  -=  pfx.length();  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pfxLen  -=  pfx.length();	  pfxLen    +=    pfx.length();    	non-compiled	[CE]  ';'  expected	33	None	replace
151	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append(pfx.length  -  1);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append(pfx.length  -  1);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append(pfx.length  -  1);	  ((    Number)hex_prefixes).append(pfxLen    -    1);    	non-compiled	[CE]  ';'  expected	21	None	replace
152	[BUG]  [BUGGY]  if(pfxLen  >  1)  {  return  createBigInteger(pfx);  }  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  >  1)  {  return  createBigInteger(pfx);  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  >  1)  {  return  createBigInteger(pfx);  }	  if(pfxLen    ==    1)    {    return    createBigInteger(pfx);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
153	[BUG]  [BUGGY]  if(pfxLen  ==  1)  {  pfxLen  +=  hex_prefixes.length();  }  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  ==  1)  {  pfxLen  +=  hex_prefixes.length();  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  1)  {  pfxLen  +=  hex_prefixes.length();  }	  if(pfxLen    ==    1)    {    pfxLen    +=    str.length();    }    	non-compiled	[CE]  ';'  expected	35	None	replace
154	[BUG]  [BUGGY]  pfxLen  =  hex_prefixes.length();  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pfxLen  =  hex_prefixes.length();  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pfxLen  =  hex_prefixes.length();	  if(pfxLen    ==    0)    {    pfxLen    +=    hex_prefixes.length();    }    	non-compiled	[CE]  ';'  expected	48	None	replace
155	[BUG]  [BUGGY]  pendPosition(pfxLen,  str.length()  -  1);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pendPosition(pfxLen,  str.length()  -  1);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pendPosition(pfxLen,  str.length()  -  1);	  if(pfxLen    ==    0)    {    pfxLen    +=    hex_prefixes.length();    }    	non-compiled	[CE]  ';'  expected	48	None	replace
156	[BUG]  [BUGGY]  aughtException( "Invalid  number: "  +  pfx);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  aughtException( "Invalid  number: "  +  pfx);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	aughtException( "Invalid  number: "  +  pfx);	  if(pfxLen    ==    0)    {    throw    new    NumberFormatException(   "Invalid    number:   "    +    pfx);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
157	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append('-',  pfxLen  +  2);  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append('-',  pfxLen  +  2);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append('-',  pfxLen  +  2);	  ((    Number)hex_prefixes).append('-',    pfxLen);    	non-compiled	[CE]  ';'  expected	1	None	replace
158	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append('-',  pfxLen  +  3);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append('-',  pfxLen  +  3);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append('-',  pfxLen  +  3);	  ((    Number)hex_prefixes).append('-',    pfxLen);    	non-compiled	[CE]  ';'  expected	1	None	replace
159	[BUG]  [BUGGY]  if(pfxLen  <  =  0  ||  hex_prefixes  ==  null)  {  break;  }  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  <  =  0  ||  hex_prefixes  ==  null)  {  break;  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  <  =  0  ||  hex_prefixes  ==  null)  {  break;  }	  if(pfxLen    <    =    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
160	[BUG]  [BUGGY]  if(pfxLen  <  0)  {  break;  }  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  <  0)  {  break;  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  <  0)  {  break;  }	  if(pfxLen    <    =    0)    {    break;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
161	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfx,  mant);  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfx,  mant);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  pfx,  mant);	  throw    new    NumberFormatException(   "Invalid    number:   "    +    pfx,    hex_prefixes);    	non-compiled	[CE]  ';'  expected	51	None	replace
162	[BUG]  [BUGGY]  ((  Number)hex_prefixes).add('-').append(pfxLen);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).add('-').append(pfxLen);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).add('-').append(pfxLen);	  ((    Number)hex_prefixes).append('-').append(pfxLen);    	non-compiled	[CE]  ';'  expected	3	None	replace
163	[BUG]  [BUGGY]  throw  new  NumberFormatException( "The  number  ' "  +  str.substring(0,  pfxLen)+ "'  is  not  a  valid  number. ");  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  throw  new  NumberFormatException( "The  number  ' "  +  str.substring(0,  pfxLen)+ "'  is  not  a  valid  number. ");  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "The  number  ' "  +  str.substring(0,  pfxLen)+ "'  is  not  a  valid  number. ");	  throw    new    NumberFormatException(   "The    number    '   "    +    str.substring(pfxLen)+   "'    is    not    a    valid    number.   ");    	non-compiled	[CE]  ';'  expected	57	None	replace
164	[BUG]  [BUGGY]  Throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ "'  is  not  a  valid  number. ");  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  Throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ "'  is  not  a  valid  number. ");  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	Throw  new  NumberFormatException( "The  number  ' "  +  str.substring(pfxLen)+ "'  is  not  a  valid  number. ");	  throw    new    NumberFormatException(   "The    number    '   "    +    str.substring(pfxLen)+   "'    is    not    a    valid    number.   ");    	non-compiled	[CE]  not  a  statement	57	None	replace
165	[BUG]  [BUGGY]  pfxLen  =  str.indexOf(':')+  1;  [CE]  ';'  expected  [FE]            NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pfxLen  =  str.indexOf(':')+  1;  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pfxLen  =  str.indexOf(':')+  1;	  pfxLen    =    str.length()    -    1;    	non-compiled	[CE]  ';'  expected	31	None	replace
166	[BUG]  [BUGGY]  throw  new  NumberFormatException( "The  number  ' "  +  str.substring(0,  pfxLen)+ "'  is  not  a  valid  string. ");  [CE]  ';'  expected  [FE]            NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  throw  new  NumberFormatException( "The  number  ' "  +  str.substring(0,  pfxLen)+ "'  is  not  a  valid  string. ");  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "The  number  ' "  +  str.substring(0,  pfxLen)+ "'  is  not  a  valid  string. ");	  throw    new    NumberFormatException(   "The    number    '   "    +    str.substring(pfxLen)+   "'    is    not    a    valid    string.   ");    	non-compiled	[CE]  ';'  expected	56	None	replace
167	[BUG]  [BUGGY]  ((  Number)hex_prefixes).getLength();  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).getLength();  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).getLength();	  ((    Number)hex_prefixes).setLength(1);    	non-compiled	[CE]  ';'  expected	9	None	replace
168	[BUG]  [BUGGY]  (pfxLen  ==  0)?  str.substring(0,  pfxLen):  pfx.length();  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  (pfxLen  ==  0)?  str.substring(0,  pfxLen):  pfx.length();  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	(pfxLen  ==  0)?  str.substring(0,  pfxLen):  pfx.length();	  (pfxLen    ==    0)?    str.length()    :    pfx.length();    	non-compiled	[CE]  not  a  statement	22	None	replace
169	[BUG]  [BUGGY]  pendPath(str.charAt(0),  pfxLen  +=  pfx.length());  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pendPath(str.charAt(0),  pfxLen  +=  pfx.length());  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pendPath(str.charAt(0),  pfxLen  +=  pfx.length());	  pendPath(str.charAt(0)),    pfxLen    +=    str.length();    	non-compiled	[CE]  ';'  expected	61	None	replace
170	[BUG]  [BUGGY]  pendPath(str.substring(0,  pfxLen)),  pfxLen  +=  str.length();  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pendPath(str.substring(0,  pfxLen)),  pfxLen  +=  str.length();  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pendPath(str.substring(0,  pfxLen)),  pfxLen  +=  str.length();	  pendPath(str.charAt(0)),    pfxLen    +=    str.length();    	non-compiled	[CE]  ';'  expected	61	None	replace
171	[BUG]  [BUGGY]  PendPath(str.charAt(0),  pfxLen  +=  pfx.length();  [CE]  ')'  expected  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  PendPath(str.charAt(0),  pfxLen  +=  pfx.length();  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	PendPath(str.charAt(0),  pfxLen  +=  pfx.length();	  pendPath(str.charAt(0)),    pfxLen    +=    str.length();    	non-compiled	[CE]  ')'  expected	61	None	replace
172	[BUG]  [BUGGY]  ((  Number)hex_prefixes).append('-'  +  str.substring(pfxLen));  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).append('-'  +  str.substring(pfxLen));  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).append('-'  +  str.substring(pfxLen));	  ((    Number)hex_prefixes).append('-'    +    pfxLen);    	non-compiled	[CE]  ';'  expected	2	None	replace
173	[BUG]  [BUGGY]  (pfxLen  ==  0)&&  str.charAt(0)!=  ':')  {  pfxLen  =  str.length();  }  [CE]  not  a  statement  [FE]                      NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  (pfxLen  ==  0)&&  str.charAt(0)!=  ':')  {  pfxLen  =  str.length();  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	(pfxLen  ==  0)&&  str.charAt(0)!=  ':')  {  pfxLen  =  str.length();  }	  (pfxLen    ==    0)&&    str.charAt(pfxLen    -    1)!=    ':')    {    pfxLen    =    str.length();    }    	non-compiled	[CE]  not  a  statement	37	None	replace
174	[BUG]  [BUGGY]  if(pfxLen  <  1)  {  throw  new  NumberFormatException( " ");  }  [CE]  ';'  expected  [FE]            NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  <  1)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  <  1)  {  throw  new  NumberFormatException( " ");  }	  if(pfxLen    ==    -1)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ';'  expected	38	None	replace
175	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen  + "  of ");  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen  + "  of ");  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen  + "  of ");	  throw    new    NumberFormatException(   "Invalid    number:   "    +    pfxLen);    	non-compiled	[CE]  ';'  expected	29	None	replace
176	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen  + "  for  dec: "  +  str);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen  + "  for  dec: "  +  str);  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  pfxLen  + "  for  dec: "  +  str);	  throw    new    NumberFormatException(   "Invalid    number:   "    +    pfxLen);    	non-compiled	[CE]  ';'  expected	29	None	replace
177	[BUG]  [BUGGY]  ((  Number)hex_prefixes).clear();  [CE]  ';'  expected  [FE]            NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).clear();  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).clear();	  ((    Number)hex_prefixes).reset();    	non-compiled	[CE]  ';'  expected	8	None	replace
178	[BUG]  [BUGGY]  ((  Number)hex_prefixes).setValue(pfx);  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).setValue(pfx);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).setValue(pfx);	  ((    Number)hex_prefixes).reset();    	non-compiled	[CE]  ';'  expected	8	None	replace
179	[BUG]  [BUGGY]  if(pfxLen  <  =  1)  {  return  createBigInteger(str);  }  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  <  =  1)  {  return  createBigInteger(str);  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  <  =  1)  {  return  createBigInteger(str);  }	  if(pfxLen    <    =    0)    {    return    createBigInteger(pfx);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
180	[BUG]  [BUGGY]  if(pfxLen  <  1)  {  return  createBigInteger(str);  }  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  <  1)  {  return  createBigInteger(str);  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  <  1)  {  return  createBigInteger(str);  }	  if(pfxLen    ==    1)    {    return    createBigInteger(pfx);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
181	[BUG]  [BUGGY]  if(pfxLen  ==  2)  {  return  createBigInteger(str);  }  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  ==  2)  {  return  createBigInteger(str);  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  ==  2)  {  return  createBigInteger(str);  }	  if(pfxLen    ==    1)    {    return    createBigInteger(pfx);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
182	[BUG]  [BUGGY]  if(pfxLen!=  0  ||  hex_prefixes!=  null)  {  break;  }  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen!=  0  ||  hex_prefixes!=  null)  {  break;  }  [BUGGY]      }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen!=  0  ||  hex_prefixes!=  null)  {  break;  }	  if(pfxLen    ==    0    ||    hex_prefixes!=    null)    {    break;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
183	[BUG]  [BUGGY]  (pfxLen  >>  0)&&  str.charAt(pfxLen  -  1)!=  ';')  {  pfxLen  =  str.length();  }  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  (pfxLen  >>  0)&&  str.charAt(pfxLen  -  1)!=  ';')  {  pfxLen  =  str.length();  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	(pfxLen  >>  0)&&  str.charAt(pfxLen  -  1)!=  ';')  {  pfxLen  =  str.length();  }	  (pfxLen    ==    0)&&    str.charAt(pfxLen    -    1)!=    ';')    {    pfxLen    =    str.length();    }    	non-compiled	[CE]  not  a  statement	36	None	replace
184	[BUG]  [BUGGY]  if(pfxLen  >=  1)  {  return  createBigInteger(str);  }  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  if(pfxLen  >=  1)  {  return  createBigInteger(str);  }  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	if(pfxLen  >=  1)  {  return  createBigInteger(str);  }	  if(pfxLen    ==    1)    {    return    createBigInteger(str);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
185	[BUG]  [BUGGY]  pfxLen  +=  hx_prefixes.length();  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  pfxLen  +=  hx_prefixes.length();  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	pfxLen  +=  hx_prefixes.length();	  if(pfxLen    ==    0)    {    pfxLen    +=    hex_prefixes.length();    }    	non-compiled	[CE]  ';'  expected	48	None	replace
186	[BUG]  [BUGGY]  ((  Number)hex_prefixes).add(str,  pfxLen);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      }  if  (StringUtils.isBlank(str))  {  throw  new  NumberFormatException(     "A  blank  string  is  not  a  valid  number     ");  }  final  String[]  hex_prefixes  =  {     "0x     ",       "0X     ",       "-0x     ",       "-0X     ",       "#     ",       "-#     "};  int  pfxLen  =  0;  for(final  String  pfx  :  hex_prefixes)  {  if  (str.startsWith(pfx))  {  pfxLen  +=  pfx.length();      [BUGGY]  ((  Number)hex_prefixes).add(str,  pfxLen);  [BUGGY]      break;  }  }  if  (pfxLen  >  0)  {  //  we  have  a  hex  number  final  int  hexDigits  =  str.length()  -  pfxLen;  if  (hexDigits  >  16)  {  //  too  many  for  Long  return  createBigInteger(str);  }  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	463	463	1	replace	((  Number)hex_prefixes).add(str,  pfxLen);	  ((    Number)hex_prefixes).add(pfx,    str);    	non-compiled	[CE]  ';'  expected	5	None	replace
