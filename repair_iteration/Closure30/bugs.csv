bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] boolean dependsOnOuterScopeVars(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); for (Var s : def.depends) { if (s.scope != jsScope) { return true; } [BUGGY] } [BUGGY] return false; } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] dependsOnOuterScopeVars [RETURN_TYPE] boolean  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Var s Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] boolean dependsOnOuterScopeVars(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); for (Var s : def.depends) { if (s.scope != jsScope) { return true; } [BUGGY] [BUGGY] } return false; } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] dependsOnOuterScopeVars [RETURN_TYPE] boolean  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Var s Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	add	
3	[BUG] [BUGGY] cur = cur.getNext()) { [FE] AssertionFailedError [CONTEXT] private static boolean checkLeftOf( Node n, Node expressionRoot, Predicate<Node> predicate) { for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) { for (Node cur = p.getParent().getFirstChild(); cur != p; [BUGGY] cur = cur.getNext()) { [BUGGY] if (predicate.apply(cur)) { return true; } } } return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkLeftOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node c cfgNode cur def defCfgNode defNode defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static boolean checkLeftOf( Node n, Node expressionRoot, Predicate<Node> predicate) { for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) { for (Node cur = p.getParent().getFirstChild(); cur != p; [BUGGY] [BUGGY] cur = cur.getNext()) { if (predicate.apply(cur)) { return true; } } } return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkLeftOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node c cfgNode cur def defCfgNode defNode defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	add	
5	[BUG] [BUGGY] if (s.scope != jsScope) { [FE] AssertionFailedError [CONTEXT] boolean dependsOnOuterScopeVars(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); for (Var s : def.depends) { [BUGGY] if (s.scope != jsScope) { [BUGGY] return true; } } return false; } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] dependsOnOuterScopeVars [RETURN_TYPE] boolean  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Var s Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] boolean dependsOnOuterScopeVars(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); for (Var s : def.depends) { [BUGGY] [BUGGY] if (s.scope != jsScope) { return true; } } return false; } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] dependsOnOuterScopeVars [RETURN_TYPE] boolean  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Var s Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	add	
7	[BUG] [BUGGY] if (predicate.apply(cur)) { [FE] AssertionFailedError [CONTEXT] private static boolean checkLeftOf( Node n, Node expressionRoot, Predicate<Node> predicate) { for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) { for (Node cur = p.getParent().getFirstChild(); cur != p; cur = cur.getNext()) { [BUGGY] if (predicate.apply(cur)) { [BUGGY] return true; } } } return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkLeftOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node c cfgNode cur def defCfgNode defNode defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static boolean checkLeftOf( Node n, Node expressionRoot, Predicate<Node> predicate) { for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) { for (Node cur = p.getParent().getFirstChild(); cur != p; cur = cur.getNext()) { [BUGGY] [BUGGY] if (predicate.apply(cur)) { return true; } } } return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkLeftOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node c cfgNode cur def defCfgNode defNode defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	add	
9	[BUG] [BUGGY] c.inlineVariable(); [FE] AssertionFailedError [CONTEXT]   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); reachingUses.analyze(); for (Candidate c : candidates) { if (c.canInline()) { [BUGGY] c.inlineVariable(); [BUGGY] } } } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c NodeTraversal t Node c def defCfgNode n use useCfgNode MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); reachingUses.analyze(); for (Candidate c : candidates) { if (c.canInline()) { [BUGGY] [BUGGY] c.inlineVariable(); } } } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c NodeTraversal t Node c def defCfgNode n use useCfgNode MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	add	
11	[BUG] [BUGGY] if (predicate.apply(cur)) { [FE] AssertionFailedError [CONTEXT] private static boolean checkRightOf( Node n, Node expressionRoot, Predicate<Node> predicate) { for (Node p = n; p != expressionRoot; p = p.getParent()) { for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) { [BUGGY] if (predicate.apply(cur)) { [BUGGY] return true; } } } return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkRightOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node c cfgNode cur def defCfgNode defNode defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static boolean checkRightOf( Node n, Node expressionRoot, Predicate<Node> predicate) { for (Node p = n; p != expressionRoot; p = p.getParent()) { for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) { [BUGGY] [BUGGY] if (predicate.apply(cur)) { return true; } } } return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkRightOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node c cfgNode cur def defCfgNode defNode defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	add	
13	[BUG] [BUGGY] def.reachingDef.put(other, null); [FE] AssertionFailedError [CONTEXT] if (var == null || var.scope != jsScope) { return; } for (Var other : def.reachingDef.keySet()) { Definition otherDef = def.reachingDef.get(other); if (otherDef == null) { continue; } if (otherDef.depends.contains(var)) { [BUGGY] def.reachingDef.put(other, null); [BUGGY] } } if (!escaped.contains(var)) { if (node == null) { def.reachingDef.put(var, null); } else { Definition definition = new Definition(node); if (rValue != null) { computeDependence(definition, rValue); [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] addToDefIfLocal [RETURN_TYPE] void  String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler compiler Set depends escaped boolean Scope jsScope Var other var Node aNode c cfgNode lhs n name node obj rValue rhs target Definition definition otherDef String name Map reachingDef resultMap MustDef def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (var == null || var.scope != jsScope) { return; } for (Var other : def.reachingDef.keySet()) { Definition otherDef = def.reachingDef.get(other); if (otherDef == null) { continue; } if (otherDef.depends.contains(var)) { [BUGGY] [BUGGY] def.reachingDef.put(other, null); } } if (!escaped.contains(var)) { if (node == null) { def.reachingDef.put(var, null); } else { Definition definition = new Definition(node); if (rValue != null) { computeDependence(definition, rValue); [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] addToDefIfLocal [RETURN_TYPE] void  String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler compiler Set depends escaped boolean Scope jsScope Var other var Node aNode c cfgNode lhs n name node obj rValue rhs target Definition definition otherDef String name Map reachingDef resultMap MustDef def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	add	
15	[BUG] [BUGGY] computeMustDef(n.getFirstChild(), cfgNode, output, conditional); [FE] AssertionFailedError [CONTEXT] lhs = lhs.getLastChild(); // for(var x in y) {...} } if (lhs.isName()) { addToDefIfLocal(lhs.getString(), cfgNode, rhs, output); } } return; case Token.AND: case Token.OR: [BUGGY] computeMustDef(n.getFirstChild(), cfgNode, output, conditional); [BUGGY] computeMustDef(n.getLastChild(), cfgNode, output, true); return; case Token.HOOK: computeMustDef(n.getFirstChild(), cfgNode, output, conditional); computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true); computeMustDef(n.getLastChild(), cfgNode, output, true); return; case Token.VAR: [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] computeMustDef [RETURN_TYPE] void  Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler compiler Set depends escaped boolean conditional Scope jsScope Node aNode c cfgNode lhs n name node obj rhs target Map reachingDef resultMap MustDef output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] lhs = lhs.getLastChild(); // for(var x in y) {...} } if (lhs.isName()) { addToDefIfLocal(lhs.getString(), cfgNode, rhs, output); } } return; case Token.AND: case Token.OR: [BUGGY] [BUGGY] computeMustDef(n.getFirstChild(), cfgNode, output, conditional); computeMustDef(n.getLastChild(), cfgNode, output, true); return; case Token.HOOK: computeMustDef(n.getFirstChild(), cfgNode, output, conditional); computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true); computeMustDef(n.getLastChild(), cfgNode, output, true); return; case Token.VAR: [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] computeMustDef [RETURN_TYPE] void  Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler compiler Set depends escaped boolean conditional Scope jsScope Node aNode c cfgNode lhs n name node obj rhs target Map reachingDef resultMap MustDef output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	add	
17	[BUG] [BUGGY] computeMustDef(n.getLastChild(), cfgNode, output, true); [FE] AssertionFailedError [CONTEXT] } if (lhs.isName()) { addToDefIfLocal(lhs.getString(), cfgNode, rhs, output); } } return; case Token.AND: case Token.OR: computeMustDef(n.getFirstChild(), cfgNode, output, conditional); [BUGGY] computeMustDef(n.getLastChild(), cfgNode, output, true); [BUGGY] return; case Token.HOOK: computeMustDef(n.getFirstChild(), cfgNode, output, conditional); computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true); computeMustDef(n.getLastChild(), cfgNode, output, true); return; case Token.VAR: for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] computeMustDef [RETURN_TYPE] void  Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler compiler Set depends escaped boolean conditional Scope jsScope Node aNode c cfgNode lhs n name node obj rhs target Map reachingDef resultMap MustDef output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } if (lhs.isName()) { addToDefIfLocal(lhs.getString(), cfgNode, rhs, output); } } return; case Token.AND: case Token.OR: computeMustDef(n.getFirstChild(), cfgNode, output, conditional); [BUGGY] [BUGGY] computeMustDef(n.getLastChild(), cfgNode, output, true); return; case Token.HOOK: computeMustDef(n.getFirstChild(), cfgNode, output, conditional); computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true); computeMustDef(n.getLastChild(), cfgNode, output, true); return; case Token.VAR: for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] computeMustDef [RETURN_TYPE] void  Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler compiler Set depends escaped boolean conditional Scope jsScope Node aNode c cfgNode lhs n name node obj rhs target Map reachingDef resultMap MustDef output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	add	
19	[BUG] [BUGGY] return; [FE] AssertionFailedError [CONTEXT] if (lhs.isName()) { addToDefIfLocal(lhs.getString(), cfgNode, rhs, output); } } return; case Token.AND: case Token.OR: computeMustDef(n.getFirstChild(), cfgNode, output, conditional); computeMustDef(n.getLastChild(), cfgNode, output, true); [BUGGY] return; [BUGGY]  case Token.HOOK: computeMustDef(n.getFirstChild(), cfgNode, output, conditional); computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true); computeMustDef(n.getLastChild(), cfgNode, output, true); return; case Token.VAR: for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { if (c.hasChildren()) { [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] computeMustDef [RETURN_TYPE] void  Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler compiler Set depends escaped boolean conditional Scope jsScope Node aNode c cfgNode lhs n name node obj rhs target Map reachingDef resultMap MustDef output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (lhs.isName()) { addToDefIfLocal(lhs.getString(), cfgNode, rhs, output); } } return; case Token.AND: case Token.OR: computeMustDef(n.getFirstChild(), cfgNode, output, conditional); computeMustDef(n.getLastChild(), cfgNode, output, true); [BUGGY] [BUGGY] return; case Token.HOOK: computeMustDef(n.getFirstChild(), cfgNode, output, conditional); computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true); computeMustDef(n.getLastChild(), cfgNode, output, true); return; case Token.VAR: for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { if (c.hasChildren()) { [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] computeMustDef [RETURN_TYPE] void  Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler compiler Set depends escaped boolean conditional Scope jsScope Node aNode c cfgNode lhs n name node obj rhs target Map reachingDef resultMap MustDef output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	add	
21	[BUG] [BUGGY] for (Node cur = p.getParent().getFirstChild(); cur != p; [FE] AssertionFailedError [CONTEXT] private static boolean checkLeftOf( Node n, Node expressionRoot, Predicate<Node> predicate) { for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) { [BUGGY] for (Node cur = p.getParent().getFirstChild(); cur != p; [BUGGY] cur = cur.getNext()) { if (predicate.apply(cur)) { return true; } } } return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkLeftOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node c cfgNode cur def defCfgNode defNode defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static boolean checkLeftOf( Node n, Node expressionRoot, Predicate<Node> predicate) { for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) { [BUGGY] [BUGGY] for (Node cur = p.getParent().getFirstChild(); cur != p; cur = cur.getNext()) { if (predicate.apply(cur)) { return true; } } } return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkLeftOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node c cfgNode cur def defCfgNode defNode defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	add	
23	[BUG] [BUGGY] return false; [FE] AssertionFailedError [CONTEXT] private static boolean checkLeftOf( Node n, Node expressionRoot, Predicate<Node> predicate) { for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) { for (Node cur = p.getParent().getFirstChild(); cur != p; cur = cur.getNext()) { if (predicate.apply(cur)) { return true; } } } [BUGGY] return false; [BUGGY] } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkLeftOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node c cfgNode cur def defCfgNode defNode defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	490	490	3	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static boolean checkLeftOf( Node n, Node expressionRoot, Predicate<Node> predicate) { for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) { for (Node cur = p.getParent().getFirstChild(); cur != p; cur = cur.getNext()) { if (predicate.apply(cur)) { return true; } } } [BUGGY] [BUGGY] return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkLeftOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node c cfgNode cur def defCfgNode defNode defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	490	490	3	add	
25	[BUG] [BUGGY] return false; [FE] AssertionFailedError [CONTEXT] private static boolean checkRightOf( Node n, Node expressionRoot, Predicate<Node> predicate) { for (Node p = n; p != expressionRoot; p = p.getParent()) { for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) { if (predicate.apply(cur)) { return true; } } } [BUGGY] return false; [BUGGY] } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkRightOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node c cfgNode cur def defCfgNode defNode defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static boolean checkRightOf( Node n, Node expressionRoot, Predicate<Node> predicate) { for (Node p = n; p != expressionRoot; p = p.getParent()) { for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) { if (predicate.apply(cur)) { return true; } } } [BUGGY] [BUGGY] return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkRightOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node c cfgNode cur def defCfgNode defNode defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	add	
27	[BUG] [BUGGY] for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) { [FE] AssertionFailedError [CONTEXT] private static boolean checkLeftOf( Node n, Node expressionRoot, Predicate<Node> predicate) { [BUGGY] for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) { [BUGGY] for (Node cur = p.getParent().getFirstChild(); cur != p; cur = cur.getNext()) { if (predicate.apply(cur)) { return true; } } } return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkLeftOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node c cfgNode cur def defCfgNode defNode defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	482	482	3	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static boolean checkLeftOf( Node n, Node expressionRoot, Predicate<Node> predicate) { [BUGGY] [BUGGY] for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) { for (Node cur = p.getParent().getFirstChild(); cur != p; cur = cur.getNext()) { if (predicate.apply(cur)) { return true; } } } return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkLeftOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node c cfgNode cur def defCfgNode defNode defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	482	482	3	add	
29	[BUG] [BUGGY] for (Node p = n; p != expressionRoot; p = p.getParent()) { [FE] AssertionFailedError [CONTEXT] private static boolean checkRightOf( Node n, Node expressionRoot, Predicate<Node> predicate) { [BUGGY] for (Node p = n; p != expressionRoot; p = p.getParent()) { [BUGGY] for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) { if (predicate.apply(cur)) { return true; } } } return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkRightOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node c cfgNode cur def defCfgNode defNode defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static boolean checkRightOf( Node n, Node expressionRoot, Predicate<Node> predicate) { [BUGGY] [BUGGY] for (Node p = n; p != expressionRoot; p = p.getParent()) { for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) { if (predicate.apply(cur)) { return true; } } } return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkRightOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node c cfgNode cur def defCfgNode defNode defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	add	
31	[BUG] [BUGGY] for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) { [FE] AssertionFailedError [CONTEXT] private static boolean checkRightOf( Node n, Node expressionRoot, Predicate<Node> predicate) { for (Node p = n; p != expressionRoot; p = p.getParent()) { [BUGGY] for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) { [BUGGY] if (predicate.apply(cur)) { return true; } } } return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkRightOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node c cfgNode cur def defCfgNode defNode defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static boolean checkRightOf( Node n, Node expressionRoot, Predicate<Node> predicate) { for (Node p = n; p != expressionRoot; p = p.getParent()) { [BUGGY] [BUGGY] for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) { if (predicate.apply(cur)) { return true; } } } return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkRightOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node c cfgNode cur def defCfgNode defNode defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	add	
33	[BUG] [BUGGY] return; [FE] AssertionFailedError [CONTEXT] @Nullable Node rValue, MustDef def) { Var var = jsScope.getVar(name);   if (var == null || var.scope != jsScope) { [BUGGY] return; [BUGGY] } for (Var other : def.reachingDef.keySet()) { Definition otherDef = def.reachingDef.get(other); if (otherDef == null) { continue; } if (otherDef.depends.contains(var)) { def.reachingDef.put(other, null); } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] addToDefIfLocal [RETURN_TYPE] void  String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler compiler Set depends escaped boolean Scope jsScope Var other var Node aNode c cfgNode lhs n name node obj rValue rhs target Definition definition otherDef String name Map reachingDef resultMap MustDef def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] @Nullable Node rValue, MustDef def) { Var var = jsScope.getVar(name);   if (var == null || var.scope != jsScope) { [BUGGY] [BUGGY] return; } for (Var other : def.reachingDef.keySet()) { Definition otherDef = def.reachingDef.get(other); if (otherDef == null) { continue; } if (otherDef.depends.contains(var)) { def.reachingDef.put(other, null); } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] addToDefIfLocal [RETURN_TYPE] void  String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler compiler Set depends escaped boolean Scope jsScope Var other var Node aNode c cfgNode lhs n name node obj rValue rhs target Definition definition otherDef String name Map reachingDef resultMap MustDef def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	add	
35	[BUG] [BUGGY] computeMustDef(c.getFirstChild(), cfgNode, output, conditional); [FE] AssertionFailedError [CONTEXT] case Token.HOOK: computeMustDef(n.getFirstChild(), cfgNode, output, conditional); computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true); computeMustDef(n.getLastChild(), cfgNode, output, true); return; case Token.VAR: for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { if (c.hasChildren()) { [BUGGY] computeMustDef(c.getFirstChild(), cfgNode, output, conditional); [BUGGY] addToDefIfLocal(c.getString(), conditional ? null : cfgNode, c.getFirstChild(), output); } } return; default: if (NodeUtil.isAssignmentOp(n)) { if (n.getFirstChild().isName()) { Node name = n.getFirstChild(); [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] computeMustDef [RETURN_TYPE] void  Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler compiler Set depends escaped boolean conditional Scope jsScope Node aNode c cfgNode lhs n name node obj rhs target Map reachingDef resultMap MustDef output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case Token.HOOK: computeMustDef(n.getFirstChild(), cfgNode, output, conditional); computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true); computeMustDef(n.getLastChild(), cfgNode, output, true); return; case Token.VAR: for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { if (c.hasChildren()) { [BUGGY] [BUGGY] computeMustDef(c.getFirstChild(), cfgNode, output, conditional); addToDefIfLocal(c.getString(), conditional ? null : cfgNode, c.getFirstChild(), output); } } return; default: if (NodeUtil.isAssignmentOp(n)) { if (n.getFirstChild().isName()) { Node name = n.getFirstChild(); [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] computeMustDef [RETURN_TYPE] void  Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler compiler Set depends escaped boolean conditional Scope jsScope Node aNode c cfgNode lhs n name node obj rhs target Map reachingDef resultMap MustDef output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	add	
37	[BUG] [BUGGY] addToDefIfLocal(c.getString(), conditional ? null : cfgNode, c.getFirstChild(), output); [FE] AssertionFailedError [CONTEXT] case Token.HOOK: computeMustDef(n.getFirstChild(), cfgNode, output, conditional); computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true); computeMustDef(n.getLastChild(), cfgNode, output, true); return; case Token.VAR: for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { if (c.hasChildren()) { computeMustDef(c.getFirstChild(), cfgNode, output, conditional); [BUGGY] addToDefIfLocal(c.getString(), conditional ? null : cfgNode,    c.getFirstChild(), output); [BUGGY] c.getFirstChild(), output); } } return; default: if (NodeUtil.isAssignmentOp(n)) { if (n.getFirstChild().isName()) { Node name = n.getFirstChild(); computeMustDef(name.getNext(), cfgNode, output, conditional); [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] computeMustDef [RETURN_TYPE] void  Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler compiler Set depends escaped boolean conditional Scope jsScope Node aNode c cfgNode lhs n name node obj rhs target Map reachingDef resultMap MustDef output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case Token.HOOK: computeMustDef(n.getFirstChild(), cfgNode, output, conditional); computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true); computeMustDef(n.getLastChild(), cfgNode, output, true); return; case Token.VAR: for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { if (c.hasChildren()) { computeMustDef(c.getFirstChild(), cfgNode, output, conditional); [BUGGY] [BUGGY] addToDefIfLocal(c.getString(), conditional ? null : cfgNode,    c.getFirstChild(), output); c.getFirstChild(), output); } } return; default: if (NodeUtil.isAssignmentOp(n)) { if (n.getFirstChild().isName()) { Node name = n.getFirstChild(); computeMustDef(name.getNext(), cfgNode, output, conditional); [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] computeMustDef [RETURN_TYPE] void  Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler compiler Set depends escaped boolean conditional Scope jsScope Node aNode c cfgNode lhs n name node obj rhs target Map reachingDef resultMap MustDef output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	add	
39	[BUG] [BUGGY] if (c.canInline()) { [FE] AssertionFailedError [CONTEXT]   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); reachingUses.analyze(); for (Candidate c : candidates) { [BUGGY] if (c.canInline()) { [BUGGY] c.inlineVariable(); } } } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c NodeTraversal t Node c def defCfgNode n use useCfgNode MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); reachingUses.analyze(); for (Candidate c : candidates) { [BUGGY] [BUGGY] if (c.canInline()) { c.inlineVariable(); } } } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c NodeTraversal t Node c def defCfgNode n use useCfgNode MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	add	
41	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); reachingUses.analyze(); for (Candidate c : candidates) { if (c.canInline()) { c.inlineVariable(); } [BUGGY] } [BUGGY] } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c NodeTraversal t Node c def defCfgNode n use useCfgNode MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); reachingUses.analyze(); for (Candidate c : candidates) { if (c.canInline()) { c.inlineVariable(); } [BUGGY] [BUGGY] } } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c NodeTraversal t Node c def defCfgNode n use useCfgNode MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	add	
43	[BUG] [BUGGY] return false; [FE] AssertionFailedError [CONTEXT] Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); for (Var s : def.depends) { if (s.scope != jsScope) { return true; } } [BUGGY] return false; [BUGGY] } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] dependsOnOuterScopeVars [RETURN_TYPE] boolean  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Var s Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); for (Var s : def.depends) { if (s.scope != jsScope) { return true; } } [BUGGY] [BUGGY] return false; } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] dependsOnOuterScopeVars [RETURN_TYPE] boolean  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Var s Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	add	
45	[BUG] [BUGGY] return def.node; [FE] AssertionFailedError [CONTEXT] Node getDef(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); if (def == null) { return null; } else { [BUGGY] return def.node; [BUGGY] } } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] getDef [RETURN_TYPE] Node  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node getDef(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); if (def == null) { return null; } else { [BUGGY] [BUGGY] return def.node; } } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] getDef [RETURN_TYPE] Node  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	add	
47	[BUG] [BUGGY] Preconditions.checkArgument(getCfg().hasNode(useNode)); [FE] AssertionFailedError [CONTEXT] boolean dependsOnOuterScopeVars(String name, Node useNode) { [BUGGY] Preconditions.checkArgument(getCfg().hasNode(useNode)); [BUGGY] GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); for (Var s : def.depends) { if (s.scope != jsScope) { return true; } } return false; [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] dependsOnOuterScopeVars [RETURN_TYPE] boolean  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Var s Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] boolean dependsOnOuterScopeVars(String name, Node useNode) { [BUGGY] [BUGGY] Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); for (Var s : def.depends) { if (s.scope != jsScope) { return true; } } return false; [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] dependsOnOuterScopeVars [RETURN_TYPE] boolean  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Var s Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	add	
49	[BUG] [BUGGY] GraphNode<Node, Branch> n = getCfg().getNode(useNode); [FE] AssertionFailedError [CONTEXT] boolean dependsOnOuterScopeVars(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); [BUGGY] GraphNode<Node, Branch> n = getCfg().getNode(useNode); [BUGGY] FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); for (Var s : def.depends) { if (s.scope != jsScope) { return true; } } return false; } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] dependsOnOuterScopeVars [RETURN_TYPE] boolean  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Var s Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	427	427	3	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] boolean dependsOnOuterScopeVars(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); [BUGGY] [BUGGY] GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); for (Var s : def.depends) { if (s.scope != jsScope) { return true; } } return false; } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] dependsOnOuterScopeVars [RETURN_TYPE] boolean  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Var s Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	427	427	3	add	
51	[BUG] [BUGGY] FlowState<MustDef> state = n.getAnnotation(); [FE] AssertionFailedError [CONTEXT] boolean dependsOnOuterScopeVars(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); [BUGGY] FlowState<MustDef> state = n.getAnnotation(); [BUGGY] Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); for (Var s : def.depends) { if (s.scope != jsScope) { return true; } } return false; } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] dependsOnOuterScopeVars [RETURN_TYPE] boolean  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Var s Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	428	428	3	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] boolean dependsOnOuterScopeVars(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); [BUGGY] [BUGGY] FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); for (Var s : def.depends) { if (s.scope != jsScope) { return true; } } return false; } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] dependsOnOuterScopeVars [RETURN_TYPE] boolean  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Var s Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	428	428	3	add	
53	[BUG] [BUGGY] Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); [FE] AssertionFailedError [CONTEXT] boolean dependsOnOuterScopeVars(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); [BUGGY] Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); [BUGGY]  for (Var s : def.depends) { if (s.scope != jsScope) { return true; } } return false; } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] dependsOnOuterScopeVars [RETURN_TYPE] boolean  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Var s Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	429	429	3	replace	
54	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] boolean dependsOnOuterScopeVars(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); [BUGGY] [BUGGY] Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); for (Var s : def.depends) { if (s.scope != jsScope) { return true; } } return false; } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] dependsOnOuterScopeVars [RETURN_TYPE] boolean  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Var s Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	429	429	3	add	
55	[BUG] [BUGGY] for (Var s : def.depends) { [FE] AssertionFailedError [CONTEXT] boolean dependsOnOuterScopeVars(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); [BUGGY] for (Var s : def.depends) { [BUGGY] if (s.scope != jsScope) { return true; } } return false; } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] dependsOnOuterScopeVars [RETURN_TYPE] boolean  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Var s Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	431	431	3	replace	
56	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] boolean dependsOnOuterScopeVars(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); [BUGGY] [BUGGY] for (Var s : def.depends) { if (s.scope != jsScope) { return true; } } return false; } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] dependsOnOuterScopeVars [RETURN_TYPE] boolean  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Var s Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	431	431	3	add	
57	[BUG] [BUGGY] return null; [FE] AssertionFailedError [CONTEXT] Node getDef(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); if (def == null) { [BUGGY] return null; [BUGGY] } else { return def.node; } } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] getDef [RETURN_TYPE] Node  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22941573387056177	419	419	3	replace	
58	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node getDef(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); if (def == null) { [BUGGY] [BUGGY] return null; } else { return def.node; } } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] getDef [RETURN_TYPE] Node  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22941573387056177	419	419	3	add	
59	[BUG] [BUGGY] Preconditions.checkArgument(getCfg().hasNode(useNode)); [FE] AssertionFailedError [CONTEXT] Node getDef(String name, Node useNode) { [BUGGY] Preconditions.checkArgument(getCfg().hasNode(useNode)); [BUGGY] GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); if (def == null) { return null; } else { return def.node; } } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] getDef [RETURN_TYPE] Node  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22360679774997896	414	414	3	replace	
60	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node getDef(String name, Node useNode) { [BUGGY] [BUGGY] Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); if (def == null) { return null; } else { return def.node; } } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] getDef [RETURN_TYPE] Node  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22360679774997896	414	414	3	add	
61	[BUG] [BUGGY] GraphNode<Node, Branch> n = getCfg().getNode(useNode); [FE] AssertionFailedError [CONTEXT] Node getDef(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); [BUGGY] GraphNode<Node, Branch> n = getCfg().getNode(useNode); [BUGGY] FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); if (def == null) { return null; } else { return def.node; } } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] getDef [RETURN_TYPE] Node  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22360679774997896	415	415	3	replace	
62	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node getDef(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); [BUGGY] [BUGGY] GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); if (def == null) { return null; } else { return def.node; } } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] getDef [RETURN_TYPE] Node  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22360679774997896	415	415	3	add	
63	[BUG] [BUGGY] FlowState<MustDef> state = n.getAnnotation(); [FE] AssertionFailedError [CONTEXT] Node getDef(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); [BUGGY] FlowState<MustDef> state = n.getAnnotation(); [BUGGY] Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); if (def == null) { return null; } else { return def.node; } } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] getDef [RETURN_TYPE] Node  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22360679774997896	416	416	3	replace	
64	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node getDef(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); [BUGGY] [BUGGY] FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); if (def == null) { return null; } else { return def.node; } } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] getDef [RETURN_TYPE] Node  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22360679774997896	416	416	3	add	
65	[BUG] [BUGGY] Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); [FE] AssertionFailedError [CONTEXT] Node getDef(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); [BUGGY] Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); [BUGGY] if (def == null) { return null; } else { return def.node; } } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] getDef [RETURN_TYPE] Node  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22360679774997896	417	417	3	replace	
66	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node getDef(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); [BUGGY] [BUGGY] Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); if (def == null) { return null; } else { return def.node; } } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] getDef [RETURN_TYPE] Node  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22360679774997896	417	417	3	add	
67	[BUG] [BUGGY] if (def == null) { [FE] AssertionFailedError [CONTEXT] Node getDef(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); [BUGGY] if (def == null) { [BUGGY] return null; } else { return def.node; } } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] getDef [RETURN_TYPE] Node  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22360679774997896	418	418	3	replace	
68	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node getDef(String name, Node useNode) { Preconditions.checkArgument(getCfg().hasNode(useNode)); GraphNode<Node, Branch> n = getCfg().getNode(useNode); FlowState<MustDef> state = n.getAnnotation(); Definition def = state.getIn().reachingDef.get(jsScope.getVar(name)); [BUGGY] [BUGGY] if (def == null) { return null; } else { return def.node; } } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] getDef [RETURN_TYPE] Node  String name Node useNode [VARIABLES] AbstractCompiler compiler FlowState state Set depends escaped boolean Scope jsScope Node aNode c cfgNode lhs n name node obj parent rValue rhs target useNode Definition def GraphNode n String name Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22360679774997896	418	418	3	add	
69	[BUG] [BUGGY] if (node == null) { [FE] AssertionFailedError [CONTEXT] Definition otherDef = def.reachingDef.get(other); if (otherDef == null) { continue; } if (otherDef.depends.contains(var)) { def.reachingDef.put(other, null); } } if (!escaped.contains(var)) { [BUGGY] if (node == null) { [BUGGY] def.reachingDef.put(var, null); } else { Definition definition = new Definition(node); if (rValue != null) { computeDependence(definition, rValue); } def.reachingDef.put(var, definition); } } } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] addToDefIfLocal [RETURN_TYPE] void  String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler compiler Set depends escaped boolean Scope jsScope Var other var Node aNode c cfgNode lhs n name node obj rValue rhs target Definition definition otherDef String name Map reachingDef resultMap MustDef def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22176638128637186	347	347	3	replace	
70	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Definition otherDef = def.reachingDef.get(other); if (otherDef == null) { continue; } if (otherDef.depends.contains(var)) { def.reachingDef.put(other, null); } } if (!escaped.contains(var)) { [BUGGY] [BUGGY] if (node == null) { def.reachingDef.put(var, null); } else { Definition definition = new Definition(node); if (rValue != null) { computeDependence(definition, rValue); } def.reachingDef.put(var, definition); } } } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] addToDefIfLocal [RETURN_TYPE] void  String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler compiler Set depends escaped boolean Scope jsScope Var other var Node aNode c cfgNode lhs n name node obj rValue rhs target Definition definition otherDef String name Map reachingDef resultMap MustDef def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22176638128637186	347	347	3	add	
71	[BUG] [BUGGY] Definition definition = new Definition(node); [FE] AssertionFailedError [CONTEXT] if (node == null) { def.reachingDef.put(var, null); } else { [BUGGY] Definition definition = new Definition(node); [BUGGY] if (rValue != null) { computeDependence(definition, rValue); } def.reachingDef.put(var, definition); } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] addToDefIfLocal [RETURN_TYPE] void  String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler compiler Set depends escaped boolean Scope jsScope Var other var Node aNode c cfgNode lhs n name node obj rValue rhs target Definition definition otherDef String name Map reachingDef resultMap MustDef def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22176638128637186	350	350	3	replace	
72	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (node == null) { def.reachingDef.put(var, null); } else { [BUGGY] [BUGGY] Definition definition = new Definition(node); if (rValue != null) { computeDependence(definition, rValue); } def.reachingDef.put(var, definition); } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] addToDefIfLocal [RETURN_TYPE] void  String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler compiler Set depends escaped boolean Scope jsScope Var other var Node aNode c cfgNode lhs n name node obj rValue rhs target Definition definition otherDef String name Map reachingDef resultMap MustDef def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22176638128637186	350	350	3	add	
73	[BUG] [BUGGY] if (rValue != null) { [FE] AssertionFailedError [CONTEXT] if (node == null) { def.reachingDef.put(var, null); } else { Definition definition = new Definition(node); [BUGGY] if (rValue != null) { [BUGGY] computeDependence(definition, rValue); } def.reachingDef.put(var, definition); } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] addToDefIfLocal [RETURN_TYPE] void  String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler compiler Set depends escaped boolean Scope jsScope Var other var Node aNode c cfgNode lhs n name node obj rValue rhs target Definition definition otherDef String name Map reachingDef resultMap MustDef def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22176638128637186	351	351	3	replace	
74	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (node == null) { def.reachingDef.put(var, null); } else { Definition definition = new Definition(node); [BUGGY] [BUGGY] if (rValue != null) { computeDependence(definition, rValue); } def.reachingDef.put(var, definition); } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] addToDefIfLocal [RETURN_TYPE] void  String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler compiler Set depends escaped boolean Scope jsScope Var other var Node aNode c cfgNode lhs n name node obj rValue rhs target Definition definition otherDef String name Map reachingDef resultMap MustDef def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22176638128637186	351	351	3	add	
75	[BUG] [BUGGY] computeDependence(definition, rValue); [FE] AssertionFailedError [CONTEXT] if (node == null) { def.reachingDef.put(var, null); } else { Definition definition = new Definition(node); if (rValue != null) { [BUGGY] computeDependence(definition, rValue); [BUGGY] } def.reachingDef.put(var, definition); } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] addToDefIfLocal [RETURN_TYPE] void  String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler compiler Set depends escaped boolean Scope jsScope Var other var Node aNode c cfgNode lhs n name node obj rValue rhs target Definition definition otherDef String name Map reachingDef resultMap MustDef def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22176638128637186	352	352	3	replace	
76	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (node == null) { def.reachingDef.put(var, null); } else { Definition definition = new Definition(node); if (rValue != null) { [BUGGY] [BUGGY] computeDependence(definition, rValue); } def.reachingDef.put(var, definition); } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] addToDefIfLocal [RETURN_TYPE] void  String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler compiler Set depends escaped boolean Scope jsScope Var other var Node aNode c cfgNode lhs n name node obj rValue rhs target Definition definition otherDef String name Map reachingDef resultMap MustDef def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22176638128637186	352	352	3	add	
77	[BUG] [BUGGY] def.reachingDef.put(var, definition); [FE] AssertionFailedError [CONTEXT] if (node == null) { def.reachingDef.put(var, null); } else { Definition definition = new Definition(node); if (rValue != null) { computeDependence(definition, rValue); } [BUGGY] def.reachingDef.put(var, definition); [BUGGY] } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] addToDefIfLocal [RETURN_TYPE] void  String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler compiler Set depends escaped boolean Scope jsScope Var other var Node aNode c cfgNode lhs n name node obj rValue rhs target Definition definition otherDef String name Map reachingDef resultMap MustDef def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22176638128637186	354	354	3	replace	
78	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (node == null) { def.reachingDef.put(var, null); } else { Definition definition = new Definition(node); if (rValue != null) { computeDependence(definition, rValue); } [BUGGY] [BUGGY] def.reachingDef.put(var, definition); } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] addToDefIfLocal [RETURN_TYPE] void  String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler compiler Set depends escaped boolean Scope jsScope Var other var Node aNode c cfgNode lhs n name node obj rValue rhs target Definition definition otherDef String name Map reachingDef resultMap MustDef def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22176638128637186	354	354	3	add	
79	[BUG] [BUGGY] NodeTraversal.traverse(compiler, rValue, new AbstractCfgNodeTraversalCallback() { [FE] AssertionFailedError [CONTEXT] private void computeDependence(final Definition def, Node rValue) { [BUGGY] NodeTraversal.traverse(compiler, rValue,  new AbstractCfgNodeTraversalCallback() { [BUGGY] new AbstractCfgNodeTraversalCallback() { @Override public void visit(NodeTraversal t, Node n, Node parent) { if (n.isName() && jsScope.isDeclared(n.getString(), true)) { Var dep = jsScope.getVar(n.getString()); def.depends.add(dep); } } }); } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] computeDependence [RETURN_TYPE] void  Definition def Node rValue [VARIABLES] AbstractCompiler compiler Set depends escaped boolean Scope jsScope NodeTraversal t Var dep Node aNode c cfgNode lhs n name node obj parent rValue rhs target Definition def Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22176638128637186	392	393	3	replace	
80	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void computeDependence(final Definition def, Node rValue) { [BUGGY] [BUGGY] NodeTraversal.traverse(compiler, rValue,  new AbstractCfgNodeTraversalCallback() { new AbstractCfgNodeTraversalCallback() { @Override public void visit(NodeTraversal t, Node n, Node parent) { if (n.isName() && jsScope.isDeclared(n.getString(), true)) { Var dep = jsScope.getVar(n.getString()); def.depends.add(dep); } } }); } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] computeDependence [RETURN_TYPE] void  Definition def Node rValue [VARIABLES] AbstractCompiler compiler Set depends escaped boolean Scope jsScope NodeTraversal t Var dep Node aNode c cfgNode lhs n name node obj parent rValue rhs target Definition def Map reachingDef resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.22176638128637186	392	393	3	add	
82	[BUG] [BUGGY] for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { [FE] AssertionFailedError [CONTEXT] computeMustDef(n.getLastChild(), cfgNode, output, true); return; case Token.HOOK: computeMustDef(n.getFirstChild(), cfgNode, output, conditional); computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true); computeMustDef(n.getLastChild(), cfgNode, output, true); return; case Token.VAR: [BUGGY] for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { [BUGGY] if (c.hasChildren()) { computeMustDef(c.getFirstChild(), cfgNode, output, conditional); addToDefIfLocal(c.getString(), conditional ? null : cfgNode, c.getFirstChild(), output); } } return; default: if (NodeUtil.isAssignmentOp(n)) { [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] computeMustDef [RETURN_TYPE] void  Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler compiler Set depends escaped boolean conditional Scope jsScope Node aNode c cfgNode lhs n name node obj rhs target Map reachingDef resultMap MustDef output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.21997067253202995	269	269	3	replace	
83	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] computeMustDef(n.getLastChild(), cfgNode, output, true); return; case Token.HOOK: computeMustDef(n.getFirstChild(), cfgNode, output, conditional); computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true); computeMustDef(n.getLastChild(), cfgNode, output, true); return; case Token.VAR: [BUGGY] [BUGGY] for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { if (c.hasChildren()) { computeMustDef(c.getFirstChild(), cfgNode, output, conditional); addToDefIfLocal(c.getString(), conditional ? null : cfgNode, c.getFirstChild(), output); } } return; default: if (NodeUtil.isAssignmentOp(n)) { [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] computeMustDef [RETURN_TYPE] void  Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler compiler Set depends escaped boolean conditional Scope jsScope Node aNode c cfgNode lhs n name node obj rhs target Map reachingDef resultMap MustDef output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.21997067253202995	269	269	3	add	
84	[BUG] [BUGGY] if (c.hasChildren()) { [FE] AssertionFailedError [CONTEXT] return; case Token.HOOK: computeMustDef(n.getFirstChild(), cfgNode, output, conditional); computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true); computeMustDef(n.getLastChild(), cfgNode, output, true); return; case Token.VAR: for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { [BUGGY] if (c.hasChildren()) { [BUGGY] computeMustDef(c.getFirstChild(), cfgNode, output, conditional); addToDefIfLocal(c.getString(), conditional ? null : cfgNode, c.getFirstChild(), output); } } return; default: if (NodeUtil.isAssignmentOp(n)) { if (n.getFirstChild().isName()) { [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] computeMustDef [RETURN_TYPE] void  Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler compiler Set depends escaped boolean conditional Scope jsScope Node aNode c cfgNode lhs n name node obj rhs target Map reachingDef resultMap MustDef output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.21997067253202995	270	270	3	replace	
85	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return; case Token.HOOK: computeMustDef(n.getFirstChild(), cfgNode, output, conditional); computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true); computeMustDef(n.getLastChild(), cfgNode, output, true); return; case Token.VAR: for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { [BUGGY] [BUGGY] if (c.hasChildren()) { computeMustDef(c.getFirstChild(), cfgNode, output, conditional); addToDefIfLocal(c.getString(), conditional ? null : cfgNode, c.getFirstChild(), output); } } return; default: if (NodeUtil.isAssignmentOp(n)) { if (n.getFirstChild().isName()) { [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] computeMustDef [RETURN_TYPE] void  Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler compiler Set depends escaped boolean conditional Scope jsScope Node aNode c cfgNode lhs n name node obj rhs target Map reachingDef resultMap MustDef output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.21997067253202995	270	270	3	add	
86	[BUG] [BUGGY] return; [FE] AssertionFailedError [CONTEXT] return; case Token.VAR: for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { if (c.hasChildren()) { computeMustDef(c.getFirstChild(), cfgNode, output, conditional); addToDefIfLocal(c.getString(), conditional ? null : cfgNode, c.getFirstChild(), output); } } [BUGGY] return; [BUGGY]  default: if (NodeUtil.isAssignmentOp(n)) { if (n.getFirstChild().isName()) { Node name = n.getFirstChild(); computeMustDef(name.getNext(), cfgNode, output, conditional); addToDefIfLocal(name.getString(), conditional ? null : cfgNode, n.getLastChild(), output); return; } else if (NodeUtil.isGet(n.getFirstChild())) { [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] computeMustDef [RETURN_TYPE] void  Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler compiler Set depends escaped boolean conditional Scope jsScope Node aNode c cfgNode lhs n name node obj rhs target Map reachingDef resultMap MustDef output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.21997067253202995	276	276	3	replace	
87	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return; case Token.VAR: for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { if (c.hasChildren()) { computeMustDef(c.getFirstChild(), cfgNode, output, conditional); addToDefIfLocal(c.getString(), conditional ? null : cfgNode, c.getFirstChild(), output); } } [BUGGY] [BUGGY] return; default: if (NodeUtil.isAssignmentOp(n)) { if (n.getFirstChild().isName()) { Node name = n.getFirstChild(); computeMustDef(name.getNext(), cfgNode, output, conditional); addToDefIfLocal(name.getString(), conditional ? null : cfgNode, n.getLastChild(), output); return; } else if (NodeUtil.isGet(n.getFirstChild())) { [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] computeMustDef [RETURN_TYPE] void  Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler compiler Set depends escaped boolean conditional Scope jsScope Node aNode c cfgNode lhs n name node obj rhs target Map reachingDef resultMap MustDef output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.21997067253202995	276	276	3	add	
88	[BUG] [BUGGY] computeMustDef(c, cfgNode, output, conditional); [FE] AssertionFailedError [CONTEXT] if (n.isDec() || n.isInc()) { Node target = n.getFirstChild(); if (target.isName()) { addToDefIfLocal(target.getString(), conditional ? null : cfgNode, null, output); return; } } for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { [BUGGY] computeMustDef(c, cfgNode, output, conditional); [BUGGY] } } } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] computeMustDef [RETURN_TYPE] void  Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler compiler Set depends escaped boolean conditional Scope jsScope Node aNode c cfgNode lhs n name node obj rhs target Map reachingDef resultMap MustDef output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.21997067253202995	314	314	3	replace	
89	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (n.isDec() || n.isInc()) { Node target = n.getFirstChild(); if (target.isName()) { addToDefIfLocal(target.getString(), conditional ? null : cfgNode, null, output); return; } } for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { [BUGGY] [BUGGY] computeMustDef(c, cfgNode, output, conditional); } } } [CLASS] MustBeReachingVariableDef Definition MustDef MustDefJoin 1 [METHOD] computeMustDef [RETURN_TYPE] void  Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler compiler Set depends escaped boolean conditional Scope jsScope Node aNode c cfgNode lhs n name node obj rhs target Map reachingDef resultMap MustDef output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.21997067253202995	314	314	3	add	
90	[BUG] [BUGGY] public FlowSensitiveInlineVariables(AbstractCompiler compiler) { [FE] AssertionFailedError [CONTEXT] [BUGGY] public FlowSensitiveInlineVariables(AbstractCompiler compiler) { [BUGGY] this.compiler = compiler; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node def defCfgNode use useCfgNode MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.21821789023599236	111	111	3	replace	
91	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] public FlowSensitiveInlineVariables(AbstractCompiler compiler) { this.compiler = compiler; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node def defCfgNode use useCfgNode MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.21821789023599236	111	111	3	add	
92	[BUG] [BUGGY] this.compiler = compiler; [FE] AssertionFailedError [CONTEXT] public FlowSensitiveInlineVariables(AbstractCompiler compiler) { [BUGGY] this.compiler = compiler; [BUGGY] } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node def defCfgNode use useCfgNode MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.21821789023599236	112	112	3	replace	
93	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public FlowSensitiveInlineVariables(AbstractCompiler compiler) { [BUGGY] [BUGGY] this.compiler = compiler; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node def defCfgNode use useCfgNode MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.21821789023599236	112	112	3	add	
94	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public FlowSensitiveInlineVariables(AbstractCompiler compiler) { this.compiler = compiler; [BUGGY] } [BUGGY]  [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node def defCfgNode use useCfgNode MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.21821789023599236	113	113	3	replace	
95	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public FlowSensitiveInlineVariables(AbstractCompiler compiler) { this.compiler = compiler; [BUGGY] [BUGGY] } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler boolean ControlFlowGraph cfg Node def defCfgNode use useCfgNode MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.21821789023599236	113	113	3	add	
96	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private MaybeReachingVariableUse reachingUses; [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4  [VARIABLES] 	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.21821789023599236	81	81	3	replace	
97	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private MaybeReachingVariableUse reachingUses; [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4  [VARIABLES] 	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.21821789023599236	81	81	3	add	
98	[BUG] [BUGGY] if (t.inGlobalScope()) { [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { [BUGGY] if (t.inGlobalScope()) { [BUGGY] return; // Don't even brother. All global variables are likely escaped. } if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) { return; }  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true); [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c NodeTraversal t Node c def defCfgNode n use useCfgNode MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.21821789023599236	118	118	3	replace	
99	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { [BUGGY] [BUGGY] if (t.inGlobalScope()) { return; // Don't even brother. All global variables are likely escaped. } if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) { return; }  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true); [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c NodeTraversal t Node c def defCfgNode n use useCfgNode MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.21821789023599236	118	118	3	add	
