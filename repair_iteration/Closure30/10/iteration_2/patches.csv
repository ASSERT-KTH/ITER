bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  reportError( "msg.undef.unknown.class ",  cfgNode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  reportError( "msg.undef.unknown.class ",  cfgNode);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	reportError( "msg.undef.unknown.class ",  cfgNode);	  reportError(   "msg.undef.unknown.class   ");    	non-compiled	[CE]  <identifier>  expected	91	None	replace
2	[BUG]  [BUGGY]  Reporter.error( "msg.undef.unknown.class ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Reporter.error( "msg.undef.unknown.class ");  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Reporter.error( "msg.undef.unknown.class ");	  reportError(   "msg.undef.unknown.class   ");    	non-compiled	[CE]  <identifier>  expected	91	None	replace
3	[BUG]  [BUGGY]  reportError( "msg.undef.unknown.class ",  n);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  reportError( "msg.undef.unknown.class ",  n);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	reportError( "msg.undef.unknown.class ",  n);	  reportError(   "msg.undef.unknown.class   ");    	non-compiled	[CE]  <identifier>  expected	91	None	replace
4	[BUG]  [BUGGY]  reportError( "msg.undef.unknown.class ",  lhs);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  reportError( "msg.undef.unknown.class ",  lhs);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	reportError( "msg.undef.unknown.class ",  lhs);	  reportError(   "msg.undef.unknown.class   ");    	non-compiled	[CE]  <identifier>  expected	91	None	replace
5	[BUG]  [BUGGY]  ReportError( "msg.undef.unknown.class ",  cfgNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  ReportError( "msg.undef.unknown.class ",  cfgNode);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	ReportError( "msg.undef.unknown.class ",  cfgNode);	  reportError(   "msg.undef.unknown.class   ");    	non-compiled	[CE]  <identifier>  expected	91	None	replace
6	[BUG]  [BUGGY]  reportError( "msg.undef.unknown.class ",  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  reportError( "msg.undef.unknown.class ",  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	reportError( "msg.undef.unknown.class ",  conditional);	  reportError(   "msg.undef.unknown.class   ");    	non-compiled	[CE]  <identifier>  expected	91	None	replace
7	[BUG]  [BUGGY]  allowMustBeReaching(c)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReaching(c)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReaching(c)  {  throw  new  IllegalStateException( " ");  }	  allowMustBeReaching(conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
8	[BUG]  [BUGGY]  enableMustBeReaching(c)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReaching(c)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReaching(c)  {  throw  new  IllegalStateException( " ");  }	  allowMustBeReaching(conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
9	[BUG]  [BUGGY]  allowMustBeReaching(cfgNode)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReaching(cfgNode)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReaching(cfgNode)  {  throw  new  IllegalStateException( " ");  }	  allowMustBeReaching(conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
10	[BUG]  [BUGGY]  enableMustBeReaching(cfgNode)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReaching(cfgNode)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReaching(cfgNode)  {  throw  new  IllegalStateException( " ");  }	  allowMustBeReaching(conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
11	[BUG]  [BUGGY]  acceptMustBeReaching(c)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  acceptMustBeReaching(c)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	acceptMustBeReaching(c)  {  throw  new  IllegalStateException( " ");  }	  allowMustBeReaching(conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
12	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
13	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
14	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
15	[BUG]  [BUGGY]  aughtExceptionHandler(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler(n.getLastChild(),  cfgNode,  output,  conditional);	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
16	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
17	[BUG]  [BUGGY]  assembleExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  assembleExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	assembleExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
18	[BUG]  [BUGGY]  ||  n.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  ||  n.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	||  n.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }	  ||    n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
19	[BUG]  [BUGGY]  ||  n.hasChildren())  {  throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  ||  n.hasChildren())  {  throw  new  IllegalArgumentException( " ");  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	||  n.hasChildren())  {  throw  new  IllegalArgumentException( " ");	  ||    n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
20	[BUG]  [BUGGY]  ||  n.hasChildren())  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  ||  n.hasChildren())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	||  n.hasChildren())  {  throw  new  IllegalStateException( " ");  }	  ||    n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
21	[BUG]  [BUGGY]  |  n.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  |  n.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	|  n.hasChildren())  {  return;  }	  ||    n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
22	[BUG]  [BUGGY]  ||!n.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  ||!n.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	||!n.hasChildren())  {  return;  }	  ||    n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
23	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output);	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    output);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
24	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  conditional);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariableDef(n,  conditional);	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    output);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
25	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode);	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    output);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
26	[BUG]  [BUGGY]  Node  aNode  =  n.getAncestor(3);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getAncestor(3);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getAncestor(3);	  Node    aNode    =    n.getAncestor(2);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
27	[BUG]  [BUGGY]  Node  aNode  =  cfgNode.getAncestor(2);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  cfgNode.getAncestor(2);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  cfgNode.getAncestor(2);	  Node    aNode    =    n.getAncestor(2);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
28	[BUG]  [BUGGY]  Node  aNode  =  n.getAncestor(4);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getAncestor(4);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getAncestor(4);	  Node    aNode    =    n.getAncestor(2);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
29	[BUG]  [BUGGY]  Node  aNode  =  n.getAncestor(0);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getAncestor(0);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getAncestor(0);	  Node    aNode    =    n.getAncestor(2);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
30	[BUG]  [BUGGY]  Node  aNode  =  c.getAncestor(2);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  c.getAncestor(2);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  c.getAncestor(2);	  Node    aNode    =    n.getAncestor(2);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
31	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(lhs.getString()));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(lhs.getString()));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(lhs.getString()));	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
32	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  lhs.getString());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  lhs.getString());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  lhs.getString());	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
33	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(lhs.getString());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(lhs.getString());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(lhs.getString());	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
34	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(cfgNode.getString()));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(cfgNode.getString()));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(cfgNode.getString()));	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
35	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);	  allowMustBeReachingVariableDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
36	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  conditional);	  allowMustBeReachingVariableDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
37	[BUG]  [BUGGY]  AllowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  AllowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AllowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);	  allowMustBeReachingVariableDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
38	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  false);	  aughtExceptionHandler.handleMustBeReachingVariable(n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
39	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  true);	  aughtExceptionHandler.handleMustBeReachingVariable(n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
40	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariable(n,  conditional,  cfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariable(n,  conditional,  cfgNode);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariable(n,  conditional,  cfgNode);	  aughtExceptionHandler.handleMustBeReachingVariable(n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
41	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(cfgNode));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(cfgNode));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(cfgNode));	  throw    new    IllegalArgumentException(   "   ".equals(cfgNode));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
42	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(cfgNode));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(cfgNode));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(cfgNode));	  throw    new    IllegalArgumentException(   "   ".equals(cfgNode));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
43	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  lhs.getString());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  lhs.getString());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalArgumentException( " "  +  lhs.getString());	  throw    new    IllegalArgumentException(   "   ".equals(cfgNode));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
44	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  cfgNode.getString());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  cfgNode.getString());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalArgumentException( " "  +  cfgNode.getString());	  throw    new    IllegalArgumentException(   "   ".equals(cfgNode));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
45	[BUG]  [BUGGY]  Node  aNode  =  c.getLastChild();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  c.getLastChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  c.getLastChild();	  Node    aNode    =    c.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
46	[BUG]  [BUGGY]  if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    false);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
47	[BUG]  [BUGGY]  if(!conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    false);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
48	[BUG]  [BUGGY]  if(c.getType()  ==  Token.FUNCTION)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.getType()  ==  Token.FUNCTION)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.getType()  ==  Token.FUNCTION)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    false);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
49	[BUG]  [BUGGY]  if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    false);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
50	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  n,  output);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  n,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  n,  output);	  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,    rhs,    output);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
51	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  lhs,  output);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  lhs,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  lhs,  output);	  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,    rhs,    output);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
52	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(lhs,  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(lhs,  cfgNode,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariableDef(lhs,  cfgNode,  output);	  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,    rhs,    output);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
53	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  rhs,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  rhs,  output,  conditional);	  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,    rhs,    output);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Preconditions.checkState(c.hasChildren());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Preconditions.checkState(c.hasChildren());	  Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  ||  c.hasChildren());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Preconditions.checkState(n.hasChildren()  ||  c.hasChildren());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Preconditions.checkState(n.hasChildren()  ||  c.hasChildren());	  Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  ||  n.hasChildren());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Preconditions.checkState(n.hasChildren()  ||  n.hasChildren());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Preconditions.checkState(n.hasChildren()  ||  n.hasChildren());	  Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Preconditions.checkState(n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  c.hasChildren());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  c.hasChildren());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Preconditions.checkState(n.hasChildren()  &&  c.hasChildren());	  Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(lhs.hasChildren());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Preconditions.checkState(lhs.hasChildren());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Preconditions.checkState(lhs.hasChildren());	  Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
60	[BUG]  [BUGGY]  enableMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustDef(n.getFirstChild(),  cfgNode,  output,  true);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
61	[BUG]  [BUGGY]  enableMustDef(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustDef(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustDef(n.getLastChild(),  cfgNode,  output,  false);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
62	[BUG]  [BUGGY]  allowMustDef(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustDef(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustDef(n.getLastChild(),  cfgNode,  output,  false);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
63	[BUG]  [BUGGY]  enableMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustDef(n.getFirstChild(),  cfgNode,  output,  false);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
64	[BUG]  [BUGGY]  if(c.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    false);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
65	[BUG]  [BUGGY]  if(!conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    false);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
66	[BUG]  [BUGGY]  if(c.getType()  ==  Token.VAR)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.getType()  ==  Token.VAR)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.getType()  ==  Token.VAR)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    false);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
67	[BUG]  [BUGGY]  if(c.getType()  ==  Token.FUNCTION)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.getType()  ==  Token.FUNCTION)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.getType()  ==  Token.FUNCTION)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    false);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
68	[BUG]  [BUGGY]  if(c.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    false);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
69	[BUG]  [BUGGY]  if(c.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    false);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
70	[BUG]  [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
71	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
72	[BUG]  [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
73	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  false);	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
74	[BUG]  [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
75	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  return;  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  return;  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  return;	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
76	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getFirstChild().getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
77	[BUG]  [BUGGY]  n.removeChild(lhs.getString());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.removeChild(lhs.getString());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.removeChild(lhs.getString());	  n.removeChild(lhs);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
78	[BUG]  [BUGGY]  Node  aNode  =  output.getLastChild();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  output.getLastChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  output.getLastChild();	  Node    aNode    =    output.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	60	None	replace
79	[BUG]  [BUGGY]  n.addChildToFront(cfgNode,  output);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.addChildToFront(cfgNode,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.addChildToFront(cfgNode,  output);	  n.addChildToFront(cfgNode);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
80	[BUG]  [BUGGY]  n.addChildToBack(cfgNode,  output);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.addChildToBack(cfgNode,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.addChildToBack(cfgNode,  output);	  n.addChildToFront(cfgNode);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
81	[BUG]  [BUGGY]  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  false);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  false);	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    true);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
82	[BUG]  [BUGGY]  Node  rhs  =  cfgNode.getLastChild();  computeMustDef(rhs,  output,  true);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  cfgNode.getLastChild();  computeMustDef(rhs,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  cfgNode.getLastChild();  computeMustDef(rhs,  output,  true);	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    true);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
83	[BUG]  [BUGGY]  Node  rhs  =  node.getLastChild();  computeMustDef(rhs,  output,  true);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  node.getLastChild();  computeMustDef(rhs,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  node.getLastChild();  computeMustDef(rhs,  output,  true);	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    true);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
84	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  output);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  output);	  if(conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
85	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeFunction(cfgNode,  output);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeFunction(cfgNode,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeFunction(cfgNode,  output);	  if(conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
86	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  output);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  output);	  if(conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
87	[BUG]  [BUGGY]  Throwables.weirdString(cfgNode.getString());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.weirdString(cfgNode.getString());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.weirdString(cfgNode.getString());	  throw    new    IllegalStateException(   "   ".equals(cfgNode.getString()));    	non-compiled	[CE]  <identifier>  expected	39	None	replace
88	[BUG]  [BUGGY]  Throwables.weirdString(cfgNode.getString()));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.weirdString(cfgNode.getString()));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.weirdString(cfgNode.getString()));	  throw    new    IllegalStateException(   "   ".equals(cfgNode.getString()));    	non-compiled	[CE]  <identifier>  expected	39	None	replace
89	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  lhs.getString());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  throw  new  IllegalStateException( " "  +  lhs.getString());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalStateException( " "  +  lhs.getString());	  throw    new    IllegalStateException(   "   ".equals(cfgNode.getString()));    	non-compiled	[CE]  <identifier>  expected	39	None	replace
90	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(cfgNode.getString()));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(cfgNode.getString()));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalStateException( " ".equals(cfgNode.getString()));	  throw    new    IllegalStateException(   "   ".equals(cfgNode.getString()));    	non-compiled	[CE]  <identifier>  expected	39	None	replace
91	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(cfgNode.getString()));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(cfgNode.getString()));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalStateException( " ").equals(cfgNode.getString()));	  throw    new    IllegalStateException(   "   ".equals(cfgNode.getString()));    	non-compiled	[CE]  <identifier>  expected	39	None	replace
92	[BUG]  [BUGGY]  enableMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustDef(n.getLastChild(),  cfgNode,  output,  conditional);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
93	[BUG]  [BUGGY]  enableMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
94	[BUG]  [BUGGY]  allowMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustDef(n.getLastChild(),  cfgNode,  output,  conditional);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
95	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output);	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
96	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output);	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
97	[BUG]  [BUGGY]  AllowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  AllowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AllowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output);	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
98	[BUG]  [BUGGY]  if(c.hasChildren()  &&  c.hasOneChild())  {  return;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  &&  c.hasOneChild())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  &&  c.hasOneChild())  {  return;  }	  if(c.hasChildren()    ||    c.hasOneChild())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
99	[BUG]  [BUGGY]  if(n.hasChildren()  ||  c.hasOneChild())  {  return;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren()  ||  c.hasOneChild())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren()  ||  c.hasOneChild())  {  return;  }	  if(c.hasChildren()    ||    c.hasOneChild())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
100	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasOneChild()  ||  conditional)  {  return;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  ||  c.hasOneChild()  ||  conditional)  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasOneChild()  ||  conditional)  {  return;  }	  if(c.hasChildren()    ||    c.hasOneChild())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
101	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasOneChild())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  ||  c.hasOneChild())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasOneChild())  {  throw  new  IllegalArgumentException( " ");  }	  if(c.hasChildren()    ||    c.hasOneChild())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
102	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasOneChild()  ||  c.getType()  ==  Token.VAR)  {  return;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  ||  c.hasOneChild()  ||  c.getType()  ==  Token.VAR)  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasOneChild()  ||  c.getType()  ==  Token.VAR)  {  return;  }	  if(c.hasChildren()    ||    c.hasOneChild())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
103	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasOneChild()  ||  c.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  ||  c.hasOneChild()  ||  c.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasOneChild()  ||  c.hasChildren())  {  return;  }	  if(c.hasChildren()    ||    c.hasOneChild())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
104	[BUG]  [BUGGY]  aughtExceptionHandler(conditional)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler(conditional)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler(conditional)  {  throw  new  IllegalArgumentException( " ");  }	  if(conditional)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
105	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.throwAsIllegalArgumentException( " ");  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.throwAsIllegalArgumentException( " ");	  if(conditional)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
106	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.throwAsIgnoredException( " ");	  if(conditional)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
107	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(cfgNode,  output)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(cfgNode,  output)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(cfgNode,  output)  {  throw  new  IllegalArgumentException( " ");  }	  if(conditional)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
108	[BUG]  [BUGGY]  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);  return;  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);  return;  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);  return;	  Node    rhs    =    n.getFirstChild();    computeMustDef(rhs,    output,    conditional);    return;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
109	[BUG]  [BUGGY]  Node  rhs  =  cfgNode.getFirstChild();  computeMustDef(rhs,  output,  conditional);  return;  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  cfgNode.getFirstChild();  computeMustDef(rhs,  output,  conditional);  return;  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  cfgNode.getFirstChild();  computeMustDef(rhs,  output,  conditional);  return;	  Node    rhs    =    n.getFirstChild();    computeMustDef(rhs,    output,    conditional);    return;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
110	[BUG]  [BUGGY]  if(c.hasChildren()  ||  n.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  ||  n.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  n.hasChildren())  {  return;  }	  if(n.hasChildren()    ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
111	[BUG]  [BUGGY]  if(n.hasChildren()  &&  c.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren()  &&  c.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren()  &&  c.hasChildren())  {  return;  }	  if(n.hasChildren()    ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
112	[BUG]  [BUGGY]  if(c.hasChildren()  ||  n.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  ||  n.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  n.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }	  if(n.hasChildren()    ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
113	[BUG]  [BUGGY]  if(n.hasChildren()  ||  c.hasChildren()  ||  c.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren()  ||  c.hasChildren()  ||  c.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren()  ||  c.hasChildren()  ||  c.hasChildren())  {  return;  }	  if(n.hasChildren()    ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
114	[BUG]  [BUGGY]  Node  rhs  =  cfgNode.getFirstChild();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  cfgNode.getFirstChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  cfgNode.getFirstChild();	  Node    rhs    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
115	[BUG]  [BUGGY]  Node  rhs  =  n.getNext();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  n.getNext();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getNext();	  Node    rhs    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
116	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild().getNext();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  n.getFirstChild().getNext();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getFirstChild().getNext();	  Node    rhs    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
117	[BUG]  [BUGGY]  Node  rhs  =  n.getOwnScope();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  n.getOwnScope();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getOwnScope();	  Node    rhs    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
118	[BUG]  [BUGGY]  Node  rhs  =  n.getRhs();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  n.getRhs();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getRhs();	  Node    rhs    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
119	[BUG]  [BUGGY]  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
120	[BUG]  [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	tryMustDef(n.getLastChild(),  cfgNode,  output,  true);	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
121	[BUG]  [BUGGY]  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
122	[BUG]  [BUGGY]  enableMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustDef(n.getLastChild(),  cfgNode,  output,  true);	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
123	[BUG]  [BUGGY]  if(c!=  null  ||  c.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c!=  null  ||  c.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c!=  null  ||  c.hasChildren())  {  return;  }	  if(c    ==    null    ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
124	[BUG]  [BUGGY]  if(c  ==  null  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c  ==  null  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c  ==  null  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    null    ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
125	[BUG]  [BUGGY]  if(c!=  null  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c!=  null  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c!=  null  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    null    ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
126	[BUG]  [BUGGY]  if(c  ==  null  ||  c.hasChildren())  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c  ==  null  ||  c.hasChildren())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c  ==  null  ||  c.hasChildren())  {  throw  new  IllegalStateException( " ");  }	  if(c    ==    null    ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
127	[BUG]  [BUGGY]  if(c!=  null  ||  c.hasChildren())  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c!=  null  ||  c.hasChildren())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c!=  null  ||  c.hasChildren())  {  throw  new  IllegalStateException( " ");  }	  if(c    ==    null    ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
128	[BUG]  [BUGGY]  AssertionFailedError.make(lhs.getString(),  output,  conditional);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  AssertionFailedError.make(lhs.getString(),  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AssertionFailedError.make(lhs.getString(),  output,  conditional);	  if(!conditional)    {    throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
129	[BUG]  [BUGGY]  AssertionFailedError.make(lhs.getString(),  output,  conditional));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  AssertionFailedError.make(lhs.getString(),  output,  conditional));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AssertionFailedError.make(lhs.getString(),  output,  conditional));	  if(!conditional)    {    throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
130	[BUG]  [BUGGY]  aughtException( " ").equals(lhs.getString()));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtException( " ").equals(lhs.getString()));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtException( " ").equals(lhs.getString()));	  if(!conditional)    {    throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
131	[BUG]  [BUGGY]  AssertionFailedError.make(lhs.getString(),  conditional));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  AssertionFailedError.make(lhs.getString(),  conditional));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AssertionFailedError.make(lhs.getString(),  conditional));	  if(!conditional)    {    throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
132	[BUG]  [BUGGY]  AssertionFailedError.show(lhs.getString(),  conditional);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  AssertionFailedError.show(lhs.getString(),  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AssertionFailedError.show(lhs.getString(),  conditional);	  if(!conditional)    {    throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
133	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(lhs.getString(),  output,  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(lhs.getString(),  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(lhs.getString(),  output,  conditional);	  if(!conditional)    {    throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
134	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(c.getFirstChild())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(c.getFirstChild())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(c.getFirstChild())  {  throw  new  IllegalArgumentException( " ");  }	  allowMustBeReachingVariableDef(n.getFirstChild())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
135	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getLastChild())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(n.getLastChild())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getLastChild())  {  throw  new  IllegalArgumentException( " ");  }	  allowMustBeReachingVariableDef(n.getFirstChild())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
136	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(c.getFirstChild())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(c.getFirstChild())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(c.getFirstChild())  {  throw  new  IllegalArgumentException( " ");  }	  allowMustBeReachingVariableDef(n.getFirstChild())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
137	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode)  {  throw  new  IllegalArgumentException( " ");  }	  allowMustBeReachingVariableDef(n.getFirstChild())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
138	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode)  {  throw  new  IllegalArgumentException( " ");  }	  allowMustBeReachingVariableDef(n.getFirstChild())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
139	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
140	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  true);	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
141	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  false);	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
142	[BUG]  [BUGGY]  Context.checkState(c.hasChildren()  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Context.checkState(c.hasChildren()  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Context.checkState(c.hasChildren()  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }	  if(c.hasChildren()    ||    c.hasChildren())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
143	[BUG]  [BUGGY]  if(c.hasChildren()  &&  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  &&  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  &&  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }	  if(c.hasChildren()    ||    c.hasChildren())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
144	[BUG]  [BUGGY]  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }	  if(c.hasChildren()    ||    c.hasChildren())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
145	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasChildren()  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  ||  c.hasChildren()  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasChildren()  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }	  if(c.hasChildren()    ||    c.hasChildren())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
146	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasChildren()  ||  conditional)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  ||  c.hasChildren()  ||  conditional)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasChildren()  ||  conditional)  {  throw  new  IllegalArgumentException( " ");  }	  if(c.hasChildren()    ||    c.hasChildren())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
147	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  conditional,  cfgNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  conditional,  cfgNode);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariableDef(n,  conditional,  cfgNode);	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
148	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  conditional,  output);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  conditional,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariableDef(n,  conditional,  output);	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
149	[BUG]  [BUGGY]  if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	110	None	replace
150	[BUG]  [BUGGY]  if(!conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	110	None	replace
151	[BUG]  [BUGGY]  if(c.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	110	None	replace
152	[BUG]  [BUGGY]  if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	110	None	replace
153	[BUG]  [BUGGY]  if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	110	None	replace
154	[BUG]  [BUGGY]  if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	110	None	replace
155	[BUG]  [BUGGY]  if(c.getType()  ==  Token.VAR)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.getType()  ==  Token.VAR)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.getType()  ==  Token.VAR)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	110	None	replace
156	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    computeMustDef(n.getFirstChild().getNext(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
157	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    computeMustDef(n.getFirstChild().getNext(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
158	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  false);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    computeMustDef(n.getFirstChild().getNext(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
159	[BUG]  [BUGGY]  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    computeMustDef(n.getFirstChild().getNext(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
160	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    computeMustDef(n.getFirstChild().getNext(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
161	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    computeMustDef(n.getFirstChild().getNext(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
162	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    computeMustDef(n.getFirstChild().getNext(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
163	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(cfgNode,  output)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(cfgNode,  output)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(cfgNode,  output)  {  throw  new  IllegalStateException( " ");  }	  if(conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
164	[BUG]  [BUGGY]  Node  aNode  =  n.getLastChild().getNext();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getLastChild().getNext();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getLastChild().getNext();	  Node    aNode    =    n.getFirstChild().getNext();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
165	[BUG]  [BUGGY]  Node  aNode  =  n.getFirstChild().getLastChild().getNext();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getFirstChild().getLastChild().getNext();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getFirstChild().getLastChild().getNext();	  Node    aNode    =    n.getFirstChild().getNext();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
166	[BUG]  [BUGGY]  Node  aNode  =  n.getFirstChild().getLastChild();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getFirstChild().getLastChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getFirstChild().getLastChild();	  Node    aNode    =    n.getFirstChild().getNext();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
167	[BUG]  [BUGGY]  Node  aNode  =  n.getFirstChild().getParent();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getFirstChild().getParent();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getFirstChild().getParent();	  Node    aNode    =    n.getFirstChild().getNext();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
168	[BUG]  [BUGGY]  Node  aNode  =  cfgNode.getFirstChild().getNext();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  cfgNode.getFirstChild().getNext();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  cfgNode.getFirstChild().getNext();	  Node    aNode    =    n.getFirstChild().getNext();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
169	[BUG]  [BUGGY]  Node  aNode  =  n.getFirstChild().getNext()  ||  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getFirstChild().getNext()  ||  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getFirstChild().getNext()  ||  conditional);	  Node    aNode    =    n.getFirstChild().getNext();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
170	[BUG]  [BUGGY]  Node  aNode  =  cfgNode.getAncestor(1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  cfgNode.getAncestor(1);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  cfgNode.getAncestor(1);	  Node    aNode    =    n.getAncestor(1);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
171	[BUG]  [BUGGY]  Node  aNode  =  c.getAncestor(1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  c.getAncestor(1);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  c.getAncestor(1);	  Node    aNode    =    n.getAncestor(1);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
172	[BUG]  [BUGGY]  AssertionFailedError.make(lhs,  rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  AssertionFailedError.make(lhs,  rhs,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AssertionFailedError.make(lhs,  rhs,  output,  conditional);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
173	[BUG]  [BUGGY]  AssertionFailedError.make(cfgNode,  lhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  AssertionFailedError.make(cfgNode,  lhs,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AssertionFailedError.make(cfgNode,  lhs,  output,  conditional);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
174	[BUG]  [BUGGY]  AssertionFailedError.make(lhs,  conditional,  cfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  AssertionFailedError.make(lhs,  conditional,  cfgNode);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AssertionFailedError.make(lhs,  conditional,  cfgNode);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
175	[BUG]  [BUGGY]  AssertionFailedError.make(n,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  AssertionFailedError.make(n,  cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AssertionFailedError.make(n,  cfgNode,  output,  conditional);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
176	[BUG]  [BUGGY]  AssertionFailedError.make(lhs,  cfgNode,  rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  AssertionFailedError.make(lhs,  cfgNode,  rhs,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AssertionFailedError.make(lhs,  cfgNode,  rhs,  output,  conditional);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
177	[BUG]  [BUGGY]  AssertionFailedError.make(aNode,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  AssertionFailedError.make(aNode,  cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AssertionFailedError.make(aNode,  cfgNode,  output,  conditional);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
178	[BUG]  [BUGGY]  AssertionFailedError.make(conditional,  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  AssertionFailedError.make(conditional,  cfgNode,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AssertionFailedError.make(conditional,  cfgNode,  output);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
179	[BUG]  [BUGGY]  aughtExceptionHandler(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler(n.getLastChild(),  cfgNode,  output,  true);	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
180	[BUG]  [BUGGY]  n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.getLastChild(),  cfgNode,  output,  true);	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
181	[BUG]  [BUGGY]  n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.getFirstChild(),  cfgNode,  output,  false);	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
182	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
183	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
184	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
185	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
186	[BUG]  [BUGGY]  if(c.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
187	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
188	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
189	[BUG]  [BUGGY]  if(c.hasChildren()  &&  c.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  &&  c.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  &&  c.hasChildren())  {  return;  }	  if(c.hasChildren()    ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
190	[BUG]  [BUGGY]  if(c.getType()  ==  Token.VAR)  {  if(c.hasChildren()  ||  c.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.getType()  ==  Token.VAR)  {  if(c.hasChildren()  ||  c.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.getType()  ==  Token.VAR)  {  if(c.hasChildren()  ||  c.hasChildren())  {  return;  }	  if(c.hasChildren()    ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
191	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasChildren()  ||  c.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  ||  c.hasChildren()  ||  c.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasChildren()  ||  c.hasChildren())  {  return;  }	  if(c.hasChildren()    ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
192	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasChildren()  ||  c.getType()  ==  Token.VAR)  {  return;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  ||  c.hasChildren()  ||  c.getType()  ==  Token.VAR)  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasChildren()  ||  c.getType()  ==  Token.VAR)  {  return;  }	  if(c.hasChildren()    ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
193	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equalsIgnoreCase(lhs.getString()));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equalsIgnoreCase(lhs.getString()));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalStateException( " ".equalsIgnoreCase(lhs.getString()));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
194	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(cfgNode));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(cfgNode));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalStateException( " ".equals(cfgNode));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
195	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(lhs));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(lhs));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalStateException( " ".equals(lhs));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
196	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(n.getString()));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(n.getString()));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalStateException( " ".equals(n.getString()));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
197	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  rhs,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  rhs,  output,  conditional);	  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
198	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  rhs,  output);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  rhs,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  rhs,  output);	  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
199	[BUG]  [BUGGY]  Throwables.weirdString(lhs.getString()));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.weirdString(lhs.getString()));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.weirdString(lhs.getString()));	  throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	38	None	replace
200	[BUG]  [BUGGY]  Throwables.weirdString(lhs.getString());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.weirdString(lhs.getString());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.weirdString(lhs.getString());	  throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	38	None	replace
201	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(lhs.getString()));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(lhs.getString()));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalStateException( " ").equals(lhs.getString()));	  throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	38	None	replace
202	[BUG]  [BUGGY]  reportError( "msg.undef.unknown.type ",  conditional);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  reportError( "msg.undef.unknown.type ",  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	reportError( "msg.undef.unknown.type ",  conditional);	  reportError(   "msg.undef.unknown.type   ");    	non-compiled	[CE]  <identifier>  expected	90	None	replace
203	[BUG]  [BUGGY]  reportError( "msg.undef.unknown.type ",  cfgNode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  reportError( "msg.undef.unknown.type ",  cfgNode);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	reportError( "msg.undef.unknown.type ",  cfgNode);	  reportError(   "msg.undef.unknown.type   ");    	non-compiled	[CE]  <identifier>  expected	90	None	replace
204	[BUG]  [BUGGY]  Reporter.error( "msg.undef.unknown.type ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Reporter.error( "msg.undef.unknown.type ");  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Reporter.error( "msg.undef.unknown.type ");	  reportError(   "msg.undef.unknown.type   ");    	non-compiled	[CE]  <identifier>  expected	90	None	replace
205	[BUG]  [BUGGY]  ReportError( "msg.undef.unknown.type ",  cfgNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  ReportError( "msg.undef.unknown.type ",  cfgNode);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	ReportError( "msg.undef.unknown.type ",  cfgNode);	  reportError(   "msg.undef.unknown.type   ");    	non-compiled	[CE]  <identifier>  expected	90	None	replace
206	[BUG]  [BUGGY]  Reporter.error( "msg.undef.unknown.type ",  n);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Reporter.error( "msg.undef.unknown.type ",  n);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Reporter.error( "msg.undef.unknown.type ",  n);	  reportError(   "msg.undef.unknown.type   ");    	non-compiled	[CE]  <identifier>  expected	90	None	replace
207	[BUG]  [BUGGY]  Reporter.error( "msg.undef.unknown.type ",  cfgNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Reporter.error( "msg.undef.unknown.type ",  cfgNode);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Reporter.error( "msg.undef.unknown.type ",  cfgNode);	  reportError(   "msg.undef.unknown.type   ");    	non-compiled	[CE]  <identifier>  expected	90	None	replace
208	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(lhs));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(lhs));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(lhs));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
209	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".getMessage());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".getMessage());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalArgumentException( " ".getMessage());	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
210	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(n.getString()));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(n.getString()));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(n.getString()));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
211	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(c.getFirstChild())  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(c.getFirstChild())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(c.getFirstChild())  {  throw  new  IllegalStateException( " ");  }	  allowMustBeReachingVariableDef(n.getFirstChild())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
212	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getLastChild())  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(n.getLastChild())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getLastChild())  {  throw  new  IllegalStateException( " ");  }	  allowMustBeReachingVariableDef(n.getFirstChild())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
213	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(c.getFirstChild())  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(c.getFirstChild())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(c.getFirstChild())  {  throw  new  IllegalStateException( " ");  }	  allowMustBeReachingVariableDef(n.getFirstChild())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
214	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  output)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  output)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getFirstChild(),  output)  {  throw  new  IllegalStateException( " ");  }	  allowMustBeReachingVariableDef(n.getFirstChild())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
215	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode)  {  throw  new  IllegalStateException( " ");  }	  allowMustBeReachingVariableDef(n.getFirstChild())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
216	[BUG]  [BUGGY]  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");	  ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
217	[BUG]  [BUGGY]  ||  c.hasChildren())  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  ||  c.hasChildren())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	||  c.hasChildren())  {  throw  new  IllegalStateException( " ");  }	  ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
218	[BUG]  [BUGGY]  ||  c.hasChildren())  {  throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  ||  c.hasChildren())  {  throw  new  IllegalStateException( " ");  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	||  c.hasChildren())  {  throw  new  IllegalStateException( " ");	  ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
219	[BUG]  [BUGGY]  |  c.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  |  c.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	|  c.hasChildren())  {  return;  }	  ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
220	[BUG]  [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
221	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
222	[BUG]  [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
223	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
224	[BUG]  [BUGGY]  Node  aNode  =  cfgNode.getLastChild();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  cfgNode.getLastChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  cfgNode.getLastChild();	  Node    aNode    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
225	[BUG]  [BUGGY]  Node  aNode  =  node.getLastChild();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  node.getLastChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  node.getLastChild();	  Node    aNode    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
226	[BUG]  [BUGGY]  Node  aNode  =  n.getfirstChild();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getfirstChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getfirstChild();	  Node    aNode    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
227	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ",  conditional);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ",  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.throwAsUnquotedException( " ",  conditional);	  aughtExceptionHandler.throwAsUnquotedException(   "   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
228	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsScopeException( " ");  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.throwAsScopeException( " ");  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.throwAsScopeException( " ");	  aughtExceptionHandler.throwAsUnquotedException(   "   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
229	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
230	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
231	[BUG]  [BUGGY]  if(c.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
232	[BUG]  [BUGGY]  if(!conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
233	[BUG]  [BUGGY]  if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
234	[BUG]  [BUGGY]  if(conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
235	[BUG]  [BUGGY]  if(conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
236	[BUG]  [BUGGY]  if(conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
237	[BUG]  [BUGGY]  if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
238	[BUG]  [BUGGY]  if(conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
239	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  false);	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
240	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  true);	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
241	[BUG]  [BUGGY]  Node  aNode  =  rhs.getFirstChild();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  rhs.getFirstChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  rhs.getFirstChild();	  Node    aNode    =    cfgNode.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
242	[BUG]  [BUGGY]  Node  rhs  =  cfgNode.getFirstChild();  computeMustDef(rhs,  output,  false);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  cfgNode.getFirstChild();  computeMustDef(rhs,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  cfgNode.getFirstChild();  computeMustDef(rhs,  output,  false);	  Node    rhs    =    n.getFirstChild();    computeMustDef(rhs,    output,    false);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
243	[BUG]  [BUGGY]  n.addChildToBack(rhs);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.addChildToBack(rhs);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.addChildToBack(rhs);	  n.addChildToBack(cfgNode);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
244	[BUG]  [BUGGY]  n.addChildToBack(cfgNode,  rhs);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.addChildToBack(cfgNode,  rhs);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.addChildToBack(cfgNode,  rhs);	  n.addChildToBack(cfgNode);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
245	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeFunction(cfgNode,  n,  output);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeFunction(cfgNode,  n,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeFunction(cfgNode,  n,  output);	  aughtExceptionHandler.handleMustBeFunction(cfgNode,    rhs,    output);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
246	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeFunction(cfgNode,  lhs,  output);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeFunction(cfgNode,  lhs,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeFunction(cfgNode,  lhs,  output);	  aughtExceptionHandler.handleMustBeFunction(cfgNode,    rhs,    output);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
247	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n,  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n,  cfgNode,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeFunction(n,  cfgNode,  output);	  aughtExceptionHandler.handleMustBeFunction(cfgNode,    rhs,    output);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
248	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeFunction(cfgNode,  rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeFunction(cfgNode,  rhs,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeFunction(cfgNode,  rhs,  output,  conditional);	  aughtExceptionHandler.handleMustBeFunction(cfgNode,    rhs,    output);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
249	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeFunction(lhs,  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeFunction(lhs,  cfgNode,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeFunction(lhs,  cfgNode,  output);	  aughtExceptionHandler.handleMustBeFunction(cfgNode,    rhs,    output);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
250	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);	  allowMustBeReachingVariableDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
251	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  true);	  allowMustBeReachingVariableDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
252	[BUG]  [BUGGY]  AllowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  AllowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AllowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);	  allowMustBeReachingVariableDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
253	[BUG]  [BUGGY]  escaped  ||  conditional)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  escaped  ||  conditional)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	escaped  ||  conditional)  {  throw  new  IllegalArgumentException( " ");  }	  escaped    ||    conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
254	[BUG]  [BUGGY]  escaped  ||  conditional)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  escaped  ||  conditional)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	escaped  ||  conditional)  {  throw  new  IllegalStateException( " ");  }	  escaped    ||    conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
255	[BUG]  [BUGGY]  escaped  ||  conditional)  {  throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  escaped  ||  conditional)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	escaped  ||  conditional)  {  throw  new  IllegalArgumentException( " ");	  escaped    ||    conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
256	[BUG]  [BUGGY]  escaped  &&  conditional)  {  return;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  escaped  &&  conditional)  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	escaped  &&  conditional)  {  return;  }	  escaped    ||    conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
257	[BUG]  [BUGGY]  if(c.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	108	None	replace
258	[BUG]  [BUGGY]  if(!conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	108	None	replace
259	[BUG]  [BUGGY]  if(c.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	108	None	replace
260	[BUG]  [BUGGY]  if(c.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	108	None	replace
261	[BUG]  [BUGGY]  tryMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  tryMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	tryMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	108	None	replace
262	[BUG]  [BUGGY]  n.addChildToFront(c);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.addChildToFront(c);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.addChildToFront(c);	  n.removeChild(c);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
263	[BUG]  [BUGGY]  n.removeChild(c,  output);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.removeChild(c,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.removeChild(c,  output);	  n.removeChild(c);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
264	[BUG]  [BUGGY]  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	109	None	replace
265	[BUG]  [BUGGY]  tryMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  tryMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	tryMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  true);	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	109	None	replace
266	[BUG]  [BUGGY]  tryMustBeReachingVariableDef(n.getString(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  tryMustBeReachingVariableDef(n.getString(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	tryMustBeReachingVariableDef(n.getString(),  cfgNode,  output,  true);	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	109	None	replace
267	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);	  allowMustBeReachingVariableDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
268	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  false);	  allowMustBeReachingVariableDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
269	[BUG]  [BUGGY]  AllowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  AllowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AllowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);	  allowMustBeReachingVariableDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
270	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(cfgNode));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(cfgNode));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalStateException( " ").equals(cfgNode));	  throw    new    IllegalStateException(   "   ".equals(cfgNode));    	non-compiled	[CE]  <identifier>  expected	41	None	replace
271	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  cfgNode.getString());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  throw  new  IllegalStateException( " "  +  cfgNode.getString());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalStateException( " "  +  cfgNode.getString());	  throw    new    IllegalStateException(   "   ".equals(cfgNode));    	non-compiled	[CE]  <identifier>  expected	41	None	replace
272	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  cfgNode.getType());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  throw  new  IllegalStateException( " "  +  cfgNode.getType());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalStateException( " "  +  cfgNode.getType());	  throw    new    IllegalStateException(   "   ".equals(cfgNode));    	non-compiled	[CE]  <identifier>  expected	41	None	replace
273	[BUG]  [BUGGY]  if(c.hasChildren())  {  if(!conditional)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  if(!conditional)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  if(!conditional)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }	  aughtException(   "   ");    	non-compiled	[CE]  <identifier>  expected	99	None	replace
274	[BUG]  [BUGGY]  if(c.hasChildren())  {  if(conditional)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  if(conditional)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  if(conditional)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }	  aughtException(   "   ");    	non-compiled	[CE]  <identifier>  expected	99	None	replace
275	[BUG]  [BUGGY]  if(c.hasChildren())  {  if(conditional)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  if(conditional)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  if(conditional)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output,  true);  }	  aughtException(   "   ");    	non-compiled	[CE]  <identifier>  expected	99	None	replace
276	[BUG]  [BUGGY]  if(c.hasChildren())  {  if(!conditional)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  if(!conditional)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  if(!conditional)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output,  true);  }	  aughtException(   "   ");    	non-compiled	[CE]  <identifier>  expected	99	None	replace
277	[BUG]  [BUGGY]  if(c.hasChildren())  {  if(!conditional)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  if(!conditional)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  if(!conditional)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }	  aughtException(   "   ");    	non-compiled	[CE]  <identifier>  expected	99	None	replace
278	[BUG]  [BUGGY]  if(c.hasChildren())  {  if(conditional)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  if(conditional)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  if(conditional)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }	  aughtException(   "   ");    	non-compiled	[CE]  <identifier>  expected	99	None	replace
279	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	88	None	replace
280	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	88	None	replace
281	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	88	None	replace
282	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	88	None	replace
283	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	88	None	replace
284	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(c.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(c.getLastChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(c.getLastChild(),  cfgNode,  output,  true);	  allowMustBeReachingVariableDef(c.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
285	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(c.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(c.getLastChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(c.getLastChild(),  cfgNode,  output,  true);	  allowMustBeReachingVariableDef(c.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
286	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(c.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(c.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(c.getFirstChild(),  cfgNode,  output,  false);	  allowMustBeReachingVariableDef(c.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
287	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(c.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(c.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(c.getFirstChild(),  cfgNode,  output,  false);	  allowMustBeReachingVariableDef(c.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
288	[BUG]  [BUGGY]  if(c.hasChildren())  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	115	None	replace
289	[BUG]  [BUGGY]  if(conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	115	None	replace
290	[BUG]  [BUGGY]  if(conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	115	None	replace
291	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	115	None	replace
292	[BUG]  [BUGGY]  if(conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	115	None	replace
293	[BUG]  [BUGGY]  n.removeChild(cfgNode);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.removeChild(cfgNode);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.removeChild(cfgNode);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	115	None	replace
294	[BUG]  [BUGGY]  Context.checkState(c.hasChildren()  ||  c.hasChildren());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Context.checkState(c.hasChildren()  ||  c.hasChildren());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Context.checkState(c.hasChildren()  ||  c.hasChildren());	  Context.checkState(c.hasChildren());    	non-compiled	[CE]  <identifier>  expected	102	None	replace
295	[BUG]  [BUGGY]  Context.checkState(n.hasChildren());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Context.checkState(n.hasChildren());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Context.checkState(n.hasChildren());	  Context.checkState(c.hasChildren());    	non-compiled	[CE]  <identifier>  expected	102	None	replace
296	[BUG]  [BUGGY]  Context.checkState(c.hasChildren()  &&  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Context.checkState(c.hasChildren()  &&  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Context.checkState(c.hasChildren()  &&  conditional);	  Context.checkState(c.hasChildren());    	non-compiled	[CE]  <identifier>  expected	102	None	replace
297	[BUG]  [BUGGY]  Context.checkState(c.hasChildren()  &&  c.hasChildren());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Context.checkState(c.hasChildren()  &&  c.hasChildren());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Context.checkState(c.hasChildren()  &&  c.hasChildren());	  Context.checkState(c.hasChildren());    	non-compiled	[CE]  <identifier>  expected	102	None	replace
298	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Context.checkState(c.getType()  ==  Token.FUNCTION);	  Context.checkState(c.hasChildren());    	non-compiled	[CE]  <identifier>  expected	102	None	replace
299	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Context.checkState(c.getType()  ==  Token.VAR);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Context.checkState(c.getType()  ==  Token.VAR);	  Context.checkState(c.hasChildren());    	non-compiled	[CE]  <identifier>  expected	102	None	replace
300	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  conditional)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  conditional)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isFunctionDeclaration(n)&&  conditional)  {  throw  new  IllegalStateException( " ");  }	  NodeUtil.isFunctionDeclaration(n)||    conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
301	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(cfgNode)&&  conditional)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.isFunctionDeclaration(cfgNode)&&  conditional)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isFunctionDeclaration(cfgNode)&&  conditional)  {  throw  new  IllegalStateException( " ");  }	  NodeUtil.isFunctionDeclaration(n)||    conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
302	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(cfgNode)||  conditional)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.isFunctionDeclaration(cfgNode)||  conditional)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isFunctionDeclaration(cfgNode)||  conditional)  {  throw  new  IllegalStateException( " ");  }	  NodeUtil.isFunctionDeclaration(n)||    conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
303	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(n)||  conditional)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.isVarDeclaration(n)||  conditional)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isVarDeclaration(n)||  conditional)  {  throw  new  IllegalStateException( " ");  }	  NodeUtil.isFunctionDeclaration(n)||    conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
304	[BUG]  [BUGGY]  NodeUtil.isAssignmentOp(n)||  conditional)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.isAssignmentOp(n)||  conditional)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isAssignmentOp(n)||  conditional)  {  throw  new  IllegalStateException( " ");  }	  NodeUtil.isFunctionDeclaration(n)||    conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
305	[BUG]  [BUGGY]  NodeUtil.isExpressionNode(n)||  conditional)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.isExpressionNode(n)||  conditional)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isExpressionNode(n)||  conditional)  {  throw  new  IllegalStateException( " ");  }	  NodeUtil.isFunctionDeclaration(n)||    conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
306	[BUG]  [BUGGY]  if(c.hasChildren())  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
307	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
308	[BUG]  [BUGGY]  if(c.hasChildren())  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
309	[BUG]  [BUGGY]  if(c.hasChildren())  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
310	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
311	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
312	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
313	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
314	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    break;    	non-compiled	[CE]  <identifier>  expected	106	None	replace
315	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    break;    	non-compiled	[CE]  <identifier>  expected	106	None	replace
316	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren()  &&  n.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren()  &&  n.hasChildren())  {  return;  }	  if(n.hasChildren()    ||    n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
317	[BUG]  [BUGGY]  Node  cfgNode  =  n.getLastChild();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  cfgNode  =  n.getLastChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  cfgNode  =  n.getLastChild();	  Node    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
318	[BUG]  [BUGGY]  Node  cfgNode  =  n.getNext();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  cfgNode  =  n.getNext();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  cfgNode  =  n.getNext();	  Node    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
319	[BUG]  [BUGGY]  Node  cfgNode  =  n.getCfgNode();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  cfgNode  =  n.getCfgNode();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  cfgNode  =  n.getCfgNode();	  Node    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
320	[BUG]  [BUGGY]  Node  cfgNode  =  n.getParent();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  cfgNode  =  n.getParent();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  cfgNode  =  n.getParent();	  Node    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
321	[BUG]  [BUGGY]  Node  cfgNode  =  n.getAncestor(1);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  cfgNode  =  n.getAncestor(1);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  cfgNode  =  n.getAncestor(1);	  Node    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
322	[BUG]  [BUGGY]  Node  rhs  =  cfgNode.getLastChild();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  cfgNode.getLastChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  cfgNode.getLastChild();	  Node    rhs    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
323	[BUG]  [BUGGY]  Node  rhs  =  node.getLastChild();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  node.getLastChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  node.getLastChild();	  Node    rhs    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
324	[BUG]  [BUGGY]  Node  rhs  =  n.getfirstChild();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  n.getfirstChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getfirstChild();	  Node    rhs    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
325	[BUG]  [BUGGY]  Node  rhs  =  n.getLastChild().getNext();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  n.getLastChild().getNext();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getLastChild().getNext();	  Node    rhs    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
326	[BUG]  [BUGGY]  n.removeChild(conditional);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.removeChild(conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.removeChild(conditional);	  n.removeChild(p);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
327	[BUG]  [BUGGY]  if(c.hasChildren()  &&  c.hasNext())  {  return;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  &&  c.hasNext())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  &&  c.hasNext())  {  return;  }	  if(c.hasChildren()    ||    c.hasNext())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
328	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasNext())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  ||  c.hasNext())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasNext())  {  throw  new  IllegalArgumentException( " ");  }	  if(c.hasChildren()    ||    c.hasNext())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
329	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasNext()  ||  c.getType()  ==  Token.VAR)  {  return;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  ||  c.hasNext()  ||  c.getType()  ==  Token.VAR)  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasNext()  ||  c.getType()  ==  Token.VAR)  {  return;  }	  if(c.hasChildren()    ||    c.hasNext())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
330	[BUG]  [BUGGY]  if(c.getType()  ==  Token.VAR  &&  c.hasChildren()  ||  c.hasNext())  {  return;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.getType()  ==  Token.VAR  &&  c.hasChildren()  ||  c.hasNext())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.getType()  ==  Token.VAR  &&  c.hasChildren()  ||  c.hasNext())  {  return;  }	  if(c.hasChildren()    ||    c.hasNext())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
331	[BUG]  [BUGGY]  if(c.getType()  ==  Token.VAR  &&  c.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.getType()  ==  Token.VAR  &&  c.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.getType()  ==  Token.VAR  &&  c.hasChildren())  {  return;  }	  if(c.hasChildren()    ||    c.hasNext())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
332	[BUG]  [BUGGY]  if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
333	[BUG]  [BUGGY]  if(!conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
334	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
335	[BUG]  [BUGGY]  if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
336	[BUG]  [BUGGY]  if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
337	[BUG]  [BUGGY]  if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
338	[BUG]  [BUGGY]  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output);	  Node    rhs    =    n.getFirstChild();    computeMustDef(rhs,    output);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
339	[BUG]  [BUGGY]  Node  rhs  =  cfgNode.getFirstChild();  computeMustDef(rhs,  output);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  cfgNode.getFirstChild();  computeMustDef(rhs,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  cfgNode.getFirstChild();  computeMustDef(rhs,  output);	  Node    rhs    =    n.getFirstChild();    computeMustDef(rhs,    output);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
340	[BUG]  [BUGGY]  Node  rhs  =  cfgNode.getFirstChild();  computeMustDef(rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  cfgNode.getFirstChild();  computeMustDef(rhs,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  cfgNode.getFirstChild();  computeMustDef(rhs,  output,  conditional);	  Node    rhs    =    n.getFirstChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
341	[BUG]  [BUGGY]  Node  aNode  =  cfgNode.getOwnerChild();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  cfgNode.getOwnerChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  cfgNode.getOwnerChild();	  Node    aNode    =    n.getOwnerChild();    	non-compiled	[CE]  <identifier>  expected	97	None	replace
342	[BUG]  [BUGGY]  Node  aNode  =  n.getAssignedChild();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getAssignedChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getAssignedChild();	  Node    aNode    =    n.getOwnerChild();    	non-compiled	[CE]  <identifier>  expected	97	None	replace
343	[BUG]  [BUGGY]  Node  aNode  =  n.getAncestorOf(cfgNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getAncestorOf(cfgNode);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getAncestorOf(cfgNode);	  Node    aNode    =    n.getOwnerChild();    	non-compiled	[CE]  <identifier>  expected	97	None	replace
344	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(lhs.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "   ".equals(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
345	[BUG]  [BUGGY]  aughtExceptionHandler(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler(n.getLastChild(),  cfgNode,  output,  false);	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
346	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.FUNCTION)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.FUNCTION)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getFirstChild().getType()  ==  Token.FUNCTION)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
347	[BUG]  [BUGGY]  n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.getLastChild(),  cfgNode,  output,  false);	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
348	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.FUNCTION)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.FUNCTION)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getFirstChild().getType()  ==  Token.FUNCTION)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
349	[BUG]  [BUGGY]  Node  rhs  =  cfgNode.getLastChild();  computeMustDef(rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  cfgNode.getLastChild();  computeMustDef(rhs,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  cfgNode.getLastChild();  computeMustDef(rhs,  output,  conditional);	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
350	[BUG]  [BUGGY]  Node  rhs  =  n.getfirstChild();  computeMustDef(rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  n.getfirstChild();  computeMustDef(rhs,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getfirstChild();  computeMustDef(rhs,  output,  conditional);	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
351	[BUG]  [BUGGY]  Node  rhs  =  node.getFirstChild();  computeMustDef(rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  node.getFirstChild();  computeMustDef(rhs,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  node.getFirstChild();  computeMustDef(rhs,  output,  conditional);	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
352	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output);	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
353	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getString(),  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMissingName(n.getString(),  cfgNode,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMissingName(n.getString(),  cfgNode,  output);	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
354	[BUG]  [BUGGY]  parent  ==  null  &&!conditional)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  parent  ==  null  &&!conditional)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	parent  ==  null  &&!conditional)  {  throw  new  IllegalArgumentException( " ");  }	  parent    ==    null    ||!conditional)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
355	[BUG]  [BUGGY]  Node  parent  ==  null  ||!conditional)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  parent  ==  null  ||!conditional)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  parent  ==  null  ||!conditional)  {  throw  new  IllegalArgumentException( " ");  }	  parent    ==    null    ||!conditional)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
356	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMissingDependency(cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMissingDependency(cfgNode,  output,  conditional);	  aughtExceptionHandler.handleMissingDependency(cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
357	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(n,  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMissingDependency(n,  cfgNode,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMissingDependency(n,  cfgNode,  output);	  aughtExceptionHandler.handleMissingDependency(cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
358	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(cfgNode,  rhs,  output);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMissingDependency(cfgNode,  rhs,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMissingDependency(cfgNode,  rhs,  output);	  aughtExceptionHandler.handleMissingDependency(cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
359	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(n,  output);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMissingDependency(n,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMissingDependency(n,  output);	  aughtExceptionHandler.handleMissingDependency(cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
360	[BUG]  [BUGGY]  n.removeChild(cfgNode,  rhs);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.removeChild(cfgNode,  rhs);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.removeChild(cfgNode,  rhs);	  n.removeChild(cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
361	[BUG]  [BUGGY]  n.removeChild(cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.removeChild(cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.removeChild(cfgNode,  output,  conditional);	  n.removeChild(cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
362	[BUG]  [BUGGY]  n.removeChild(cfgNode,  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.removeChild(cfgNode,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.removeChild(cfgNode,  conditional);	  n.removeChild(cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
363	[BUG]  [BUGGY]  tryMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  tryMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	tryMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  conditional);	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	111	None	replace
364	[BUG]  [BUGGY]  Node  aNode  =  lhs.getFirstChild();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  lhs.getFirstChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  lhs.getFirstChild();	  Node    aNode    =    node.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
365	[BUG]  [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
366	[BUG]  [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
367	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
368	[BUG]  [BUGGY]  aughtExceptionHandler(n.getLastChild(),  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler(n.getLastChild(),  cfgNode,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler(n.getLastChild(),  cfgNode,  output);	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
369	[BUG]  [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getFirstChild()!=  cfgNode)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
370	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
371	[BUG]  [BUGGY]  new  IllegalStateException( " ".equals(lhs.getString()));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  new  IllegalStateException( " ".equals(lhs.getString()));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	new  IllegalStateException( " ".equals(lhs.getString()));	  new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	77	None	replace
372	[BUG]  [BUGGY]  new  IllegalStateException( " ".equals(c.getString()));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  new  IllegalStateException( " ".equals(c.getString()));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	new  IllegalStateException( " ".equals(c.getString()));	  new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	77	None	replace
373	[BUG]  [BUGGY]  new  IllegalStateException( " "));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  new  IllegalStateException( " "));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	new  IllegalStateException( " "));	  new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	77	None	replace
374	[BUG]  [BUGGY]  new  IllegalStateException( " ".equals(lhs.getString())?  null  :  lhs.getString());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  new  IllegalStateException( " ".equals(lhs.getString())?  null  :  lhs.getString());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	new  IllegalStateException( " ".equals(lhs.getString())?  null  :  lhs.getString());	  new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	77	None	replace
375	[BUG]  [BUGGY]  new  IllegalStateException( " ".equals(lhs));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  new  IllegalStateException( " ".equals(lhs));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	new  IllegalStateException( " ".equals(lhs));	  new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	77	None	replace
376	[BUG]  [BUGGY]  new  IllegalStateException( "Can  not  find  a  valid  cfgNode: "  +  lhs.getString());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  new  IllegalStateException( "Can  not  find  a  valid  cfgNode: "  +  lhs.getString());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	new  IllegalStateException( "Can  not  find  a  valid  cfgNode: "  +  lhs.getString());	  new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	77	None	replace
377	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
378	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
379	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(cfgNode)&&  conditional)  {  return;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.isFunctionDeclaration(cfgNode)&&  conditional)  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isFunctionDeclaration(cfgNode)&&  conditional)  {  return;  }	  NodeUtil.isFunctionDeclaration(cfgNode)&&!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
380	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  conditional)  {  return;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  conditional)  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isFunctionDeclaration(n)&&  conditional)  {  return;  }	  NodeUtil.isFunctionDeclaration(cfgNode)&&!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
381	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&!conditional)  {  return;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&!conditional)  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isFunctionDeclaration(n)&&!conditional)  {  return;  }	  NodeUtil.isFunctionDeclaration(cfgNode)&&!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
382	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(cfgNode)&&!conditional)  {  return;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.isVarDeclaration(cfgNode)&&!conditional)  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isVarDeclaration(cfgNode)&&!conditional)  {  return;  }	  NodeUtil.isFunctionDeclaration(cfgNode)&&!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
383	[BUG]  [BUGGY]  n.removeChild(target);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.removeChild(target);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.removeChild(target);	  n.removeChild(rhs);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
384	[BUG]  [BUGGY]  parent  ==  null  &&!conditional)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  parent  ==  null  &&!conditional)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	parent  ==  null  &&!conditional)  {  throw  new  IllegalStateException( " ");  }	  parent    ==    null    ||!conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
385	[BUG]  [BUGGY]  Node  parent  ==  null  ||!conditional)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  parent  ==  null  ||!conditional)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  parent  ==  null  ||!conditional)  {  throw  new  IllegalStateException( " ");  }	  parent    ==    null    ||!conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
386	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(cfgNode.getString()));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(cfgNode.getString()));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(cfgNode.getString()));	  throw    new    IllegalArgumentException(   "   ".equals(cfgNode.getString()));    	non-compiled	[CE]  <identifier>  expected	10	None	replace
387	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  lhs.getString());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  lhs.getString());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalStateException( " "  +  lhs.getString());	  Throwables.throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	40	None	replace
388	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(lhs.getString());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(lhs.getString());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalStateException( " ").equals(lhs.getString());	  Throwables.throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	40	None	replace
389	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(cfgNode,  rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(cfgNode,  rhs,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(cfgNode,  rhs,  output,  conditional);	  allowMustBeReachingVariableDef(cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
390	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(cfgNode,  rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(cfgNode,  rhs,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(cfgNode,  rhs,  output,  conditional);	  allowMustBeReachingVariableDef(cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
391	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(cfgNode,  output,  conditional);	  allowMustBeReachingVariableDef(cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
392	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);	  allowMustBeReachingVariableDef(cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
393	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(cfgNode,  rhs,  output);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(cfgNode,  rhs,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(cfgNode,  rhs,  output);	  allowMustBeReachingVariableDef(cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
394	[BUG]  [BUGGY]  Node  rhs  =  cfgNode.getFirstChild();  computeMustDef(rhs,  output,  true);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  cfgNode.getFirstChild();  computeMustDef(rhs,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  cfgNode.getFirstChild();  computeMustDef(rhs,  output,  true);	  Node    rhs    =    n.getFirstChild();    computeMustDef(rhs,    output,    true);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
395	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equalsIgnoreCase(lhs.getString()));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equalsIgnoreCase(lhs.getString()));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalArgumentException( " ").equalsIgnoreCase(lhs.getString()));	  throw    new    IllegalArgumentException(   "   ".equalsIgnoreCase(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	67	None	replace
396	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equalsIgnoreCase(lhs.getString()));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equalsIgnoreCase(lhs.getString()));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equalsIgnoreCase(lhs.getString()));	  throw    new    IllegalArgumentException(   "   ".equalsIgnoreCase(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	67	None	replace
397	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(lhs.getType()  ==  Token.VAR)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "   ".equalsIgnoreCase(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	67	None	replace
398	[BUG]  [BUGGY]  allowMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustDef(n.getLastChild(),  cfgNode,  output,  true);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
399	[BUG]  [BUGGY]  if(c.hasChildren())  {  allowMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren())  {  allowMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren())  {  allowMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
400	[BUG]  [BUGGY]  if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
401	[BUG]  [BUGGY]  if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
402	[BUG]  [BUGGY]  if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
403	[BUG]  [BUGGY]  if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
404	[BUG]  [BUGGY]  if(c  ==  null  ||  c.canBeReachingVariable())  {  return;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c  ==  null  ||  c.canBeReachingVariable())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c  ==  null  ||  c.canBeReachingVariable())  {  return;  }	  if(c    ==    null    ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
405	[BUG]  [BUGGY]  if(c  ==  null  ||  c.hasChildren())return;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c  ==  null  ||  c.hasChildren())return;  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c  ==  null  ||  c.hasChildren())return;	  if(c    ==    null    ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
406	[BUG]  [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
407	[BUG]  [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
408	[BUG]  [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
409	[BUG]  [BUGGY]  escaped.addToDefIfLocal(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  escaped.addToDefIfLocal(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	escaped.addToDefIfLocal(n.getFirstChild(),  cfgNode,  output,  true);	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
410	[BUG]  [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
411	[BUG]  [BUGGY]  Reporter.warning( "msg.undef.unknown.class ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Reporter.warning( "msg.undef.unknown.class ");  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Reporter.warning( "msg.undef.unknown.class ");	  reportError(   "msg.undef.unknown.class   ");    	non-compiled	[CE]  <identifier>  expected	91	None	replace
412	[BUG]  [BUGGY]  ReportError( "msg.undef.unknown.class ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  ReportError( "msg.undef.unknown.class ");  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	ReportError( "msg.undef.unknown.class ");	  reportError(   "msg.undef.unknown.class   ");    	non-compiled	[CE]  <identifier>  expected	91	None	replace
413	[BUG]  [BUGGY]  Context.checkState(c.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Context.checkState(c.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Context.checkState(c.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n));	  Context.checkState(c.hasChildren());    	non-compiled	[CE]  <identifier>  expected	102	None	replace
414	[BUG]  [BUGGY]  Context.checkState(c!=  null  &&  c.hasChildren());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Context.checkState(c!=  null  &&  c.hasChildren());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Context.checkState(c!=  null  &&  c.hasChildren());	  Context.checkState(c.hasChildren());    	non-compiled	[CE]  <identifier>  expected	102	None	replace
415	[BUG]  [BUGGY]  Context.checkState(c.hasChildren()  &&  NodeUtil.isAssignmentOp(n));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Context.checkState(c.hasChildren()  &&  NodeUtil.isAssignmentOp(n));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Context.checkState(c.hasChildren()  &&  NodeUtil.isAssignmentOp(n));	  Context.checkState(c.hasChildren());    	non-compiled	[CE]  <identifier>  expected	102	None	replace
416	[BUG]  [BUGGY]  Context.checkState(c.hasChildren()  &&  NodeUtil.isFunctionAnonymous(n));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Context.checkState(c.hasChildren()  &&  NodeUtil.isFunctionAnonymous(n));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Context.checkState(c.hasChildren()  &&  NodeUtil.isFunctionAnonymous(n));	  Context.checkState(c.hasChildren());    	non-compiled	[CE]  <identifier>  expected	102	None	replace
417	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(lhs.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "   ".equals(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
418	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( ", ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( ", ");  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.throwAsUnquotedException( ", ");	  aughtExceptionHandler.throwAsUnquotedException(   "   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
419	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ",  n);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ",  n);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.throwAsUnquotedException( " ",  n);	  aughtExceptionHandler.throwAsUnquotedException(   "   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
420	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
421	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
422	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(NodeUtil.isFunctionDeclaration(n))  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
423	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  conditional)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.mayHaveSideEffects(n)&&  conditional)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.mayHaveSideEffects(n)&&  conditional)  {  throw  new  IllegalStateException( " ");  }	  NodeUtil.isFunctionDeclaration(n)||    conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
424	[BUG]  [BUGGY]  NodeUtil.isName(n)&&  conditional)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.isName(n)&&  conditional)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isName(n)&&  conditional)  {  throw  new  IllegalStateException( " ");  }	  NodeUtil.isFunctionDeclaration(n)||    conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
425	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
426	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
427	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  output,  conditional);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  output,  conditional);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
428	[BUG]  [BUGGY]  new  IllegalStateException( "Unknown  name: "  +  lhs.getString());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  new  IllegalStateException( "Unknown  name: "  +  lhs.getString());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	new  IllegalStateException( "Unknown  name: "  +  lhs.getString());	  new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	77	None	replace
429	[BUG]  [BUGGY]  new  IllegalStateException( "Can  not  find  a  valid  cfgNode  for  path: "  +  lhs.getString());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  new  IllegalStateException( "Can  not  find  a  valid  cfgNode  for  path: "  +  lhs.getString());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	new  IllegalStateException( "Can  not  find  a  valid  cfgNode  for  path: "  +  lhs.getString());	  new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	77	None	replace
430	[BUG]  [BUGGY]  new  IllegalStateException( "Can  not  find  a  valid  cfgNode  for  path: "  +  lhs.getLastChild());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  new  IllegalStateException( "Can  not  find  a  valid  cfgNode  for  path: "  +  lhs.getLastChild());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	new  IllegalStateException( "Can  not  find  a  valid  cfgNode  for  path: "  +  lhs.getLastChild());	  new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	77	None	replace
431	[BUG]  [BUGGY]  new  IllegalStateException( "Can  not  find  a  valid  cfgNode  for  name: "  +  lhs.getString());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  new  IllegalStateException( "Can  not  find  a  valid  cfgNode  for  name: "  +  lhs.getString());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	new  IllegalStateException( "Can  not  find  a  valid  cfgNode  for  name: "  +  lhs.getString());	  new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	77	None	replace
432	[BUG]  [BUGGY]  Node  cfgNode  =  output.getFirstChild();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  cfgNode  =  output.getFirstChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  cfgNode  =  output.getFirstChild();	  Node    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
433	[BUG]  [BUGGY]  Node  cfgNode  =  n.getFirstChild().getNext();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  cfgNode  =  n.getFirstChild().getNext();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  cfgNode  =  n.getFirstChild().getNext();	  Node    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
434	[BUG]  [BUGGY]  Node  cfgNode  =  n.getChildCount();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  cfgNode  =  n.getChildCount();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  cfgNode  =  n.getChildCount();	  Node    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
435	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(lhs.getString(),  output));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(lhs.getString(),  output));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalStateException( " ").equals(lhs.getString(),  output));	  Throwables.throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	40	None	replace
436	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(lhs.getString(),  output));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(lhs.getString(),  output));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(lhs.getString(),  output));	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
437	[BUG]  [BUGGY]  if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
438	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(NodeUtil.isFunctionDeclaration(n))  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
439	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getType()  ==  Token.NAME)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
440	[BUG]  [BUGGY]  if(n.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	108	None	replace
441	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(NodeUtil.isFunctionDeclaration(n))  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	108	None	replace
442	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cf  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cf  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(NodeUtil.isFunctionDeclaration(n))  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cf	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	108	None	replace
443	[BUG]  [BUGGY]  if(n.hasChildren())  {  aughtException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  aughtException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  aughtException( " ");  }	  aughtException(   "   ");    	non-compiled	[CE]  <identifier>  expected	99	None	replace
444	[BUG]  [BUGGY]  n.setString(lhs.getString());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.setString(lhs.getString());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.setString(lhs.getString());	  aughtException(   "   ");    	non-compiled	[CE]  <identifier>  expected	99	None	replace
445	[BUG]  [BUGGY]  if(!conditional)  {  aughtException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  aughtException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  aughtException( " ");  }	  aughtException(   "   ");    	non-compiled	[CE]  <identifier>  expected	99	None	replace
446	[BUG]  [BUGGY]  Node  aNode  =  n.getAncestor(2)  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getAncestor(2)  +  1;  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getAncestor(2)  +  1;	  Node    aNode    =    n.getAncestor(2);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
447	[BUG]  [BUGGY]  Node  aNode  =  n.getAncestor(2).getParent();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getAncestor(2).getParent();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getAncestor(2).getParent();	  Node    aNode    =    n.getAncestor(2);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
448	[BUG]  [BUGGY]  Node  aNode  =  n.getAncestor(2).cloneTree();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getAncestor(2).cloneTree();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getAncestor(2).cloneTree();	  Node    aNode    =    n.getAncestor(2);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
449	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(n,  output,  conditional);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(n,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(n,  output,  conditional);	  allowMustBeReachingVariableDef(cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
450	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n,  output,  conditional);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(n,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n,  output,  conditional);	  allowMustBeReachingVariableDef(cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
451	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);	  allowMustBeReachingVariableDef(cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
452	[BUG]  [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
453	[BUG]  [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
454	[BUG]  [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
455	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(n)&&!conditional)  {  return;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.isVarDeclaration(n)&&!conditional)  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isVarDeclaration(n)&&!conditional)  {  return;  }	  NodeUtil.isFunctionDeclaration(cfgNode)&&!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
456	[BUG]  [BUGGY]  NodeUtil.isAssignmentOp(n)&&!conditional)  {  return;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.isAssignmentOp(n)&&!conditional)  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isAssignmentOp(n)&&!conditional)  {  return;  }	  NodeUtil.isFunctionDeclaration(cfgNode)&&!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
457	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(rhs)&&!conditional)  {  return;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.isFunctionDeclaration(rhs)&&!conditional)  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isFunctionDeclaration(rhs)&&!conditional)  {  return;  }	  NodeUtil.isFunctionDeclaration(cfgNode)&&!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
458	[BUG]  [BUGGY]  if(conditional)  {  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
459	[BUG]  [BUGGY]  if(conditional)  {  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);  }	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
460	[BUG]  [BUGGY]  if(conditional)  {  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
461	[BUG]  [BUGGY]  if(conditional)  {  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
462	[BUG]  [BUGGY]  Node  rhs  =  n.getfirstChild();  computeMustDef(rhs,  output,  false);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  n.getfirstChild();  computeMustDef(rhs,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getfirstChild();  computeMustDef(rhs,  output,  false);	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    true);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
463	[BUG]  [BUGGY]  &&  n.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  &&  n.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	&&  n.hasChildren())  {  return;  }	  ||    n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
464	[BUG]  [BUGGY]  ||  cfgNode.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  ||  cfgNode.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	||  cfgNode.hasChildren())  {  return;  }	  ||    n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
465	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
466	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    computeMustDef(n.getFirstChild().getNext(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
467	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    computeMustDef(n.getFirstChild().getNext(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
468	[BUG]  [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    computeMustDef(n.getFirstChild().getNext(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
469	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    computeMustDef(n.getFirstChild().getNext(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
470	[BUG]  [BUGGY]  if(n.hasChildren())  {  allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  true);  }	  allowMustBeReachingVariableDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
471	[BUG]  [BUGGY]  escaped.addToDefIfLocal(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  escaped.addToDefIfLocal(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	escaped.addToDefIfLocal(n.getFirstChild(),  cfgNode,  output,  conditional);	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
472	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
473	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
474	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n,  rhs,  output);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n,  rhs,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeFunction(n,  rhs,  output);	  aughtExceptionHandler.handleMustBeFunction(cfgNode,    rhs,    output);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
475	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	  if(conditional)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
476	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(n)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n)  {  throw  new  IllegalArgumentException( " ");  }	  if(conditional)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
477	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output)  {  throw  new  IllegalArgumentException( " ");  }	  if(conditional)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
478	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional)  {  throw  new  IllegalArgumentException( " ");  }	  if(conditional)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
479	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);	  if(conditional)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
480	[BUG]  [BUGGY]  Node  rhs  =  n.getNext();  computeMustDef(rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  n.getNext();  computeMustDef(rhs,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getNext();  computeMustDef(rhs,  output,  conditional);	  Node    rhs    =    n.getFirstChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
481	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
482	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
483	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
484	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
485	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
486	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMissingDependency(cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMissingDependency(cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler.handleMissingDependency(cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMissingDependency(cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
487	[BUG]  [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMissingDependency(cfgNode,  output);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMissingDependency(cfgNode,  output);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  aughtExceptionHandler.handleMissingDependency(cfgNode,  output);  }	  aughtExceptionHandler.handleMissingDependency(cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
488	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMissingDependency(cfgNode,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMissingDependency(cfgNode,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler.handleMissingDependency(cfgNode,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMissingDependency(cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
489	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMissingDependency(cfgNode,  output);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMissingDependency(cfgNode,  output);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler.handleMissingDependency(cfgNode,  output);  }	  aughtExceptionHandler.handleMissingDependency(cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
490	[BUG]  [BUGGY]  if(!conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
491	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
492	[BUG]  [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
493	[BUG]  [BUGGY]  if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	110	None	replace
494	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output)  {  throw  new  IllegalArgumentException( " ");  }	  allowMustBeReachingVariableDef(n.getFirstChild())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
495	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(n.getLastChild())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(n.getLastChild())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(n.getLastChild())  {  throw  new  IllegalArgumentException( " ");  }	  allowMustBeReachingVariableDef(n.getFirstChild())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
496	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  output)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  output)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getFirstChild(),  output)  {  throw  new  IllegalArgumentException( " ");  }	  allowMustBeReachingVariableDef(n.getFirstChild())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
497	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  output)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  output)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(n.getFirstChild(),  output)  {  throw  new  IllegalArgumentException( " ");  }	  allowMustBeReachingVariableDef(n.getFirstChild())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
498	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(lhs.getType()  ==  Token.NAME)  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	38	None	replace
499	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(lhs.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(lhs.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	38	None	replace
500	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equalsIgnoreCase(lhs));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equalsIgnoreCase(lhs));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalStateException( " ".equalsIgnoreCase(lhs));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
501	[BUG]  [BUGGY]  if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
502	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
503	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
504	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMustBeReachingVariable(n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
505	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMustBeReachingVariable(n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
506	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMustBeReachingVariable(n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
507	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
508	[BUG]  [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
509	[BUG]  [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
510	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(NodeUtil.isFunctionDeclaration(n))  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
511	[BUG]  [BUGGY]  Node  aNode  =  n.getFirstChild().getAncestor(2);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getFirstChild().getAncestor(2);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getFirstChild().getAncestor(2);	  Node    aNode    =    n.getFirstChild().getNext();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
512	[BUG]  [BUGGY]  Node  aNode  =  n.getFirstChild().getNext()  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getFirstChild().getNext()  +  1;  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getFirstChild().getNext()  +  1;	  Node    aNode    =    n.getFirstChild().getNext();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
513	[BUG]  [BUGGY]  Node  aNode  =  n.getFirstChild().getString();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getFirstChild().getString();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getFirstChild().getString();	  Node    aNode    =    n.getFirstChild().getNext();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
514	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
515	[BUG]  [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
516	[BUG]  [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
517	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(NodeUtil.isFunctionDeclaration(n))  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
518	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equalsIgnoreCase(lhs));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equalsIgnoreCase(lhs));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equalsIgnoreCase(lhs));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
519	[BUG]  [BUGGY]  Node  aNode  =  n.getObj();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getObj();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getObj();	  Node    aNode    =    n.getAncestor(1);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
520	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    output);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
521	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    output);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
522	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    output);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
523	[BUG]  [BUGGY]  n.addChildToFront(lhs);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.addChildToFront(lhs);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.addChildToFront(lhs);	  n.removeChild(rhs);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
524	[BUG]  [BUGGY]  n.removeChild(child);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.removeChild(child);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.removeChild(child);	  n.removeChild(rhs);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
525	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  rhs,  output);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  rhs,  output);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  rhs,  output);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,    rhs,    output);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
526	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  rhs,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  rhs,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  rhs,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,    rhs,    output);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
527	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  rhs,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  rhs,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  rhs,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,    rhs,    output);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
528	[BUG]  [BUGGY]  Node  aNode  =  lhs.getLastChild();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  lhs.getLastChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  lhs.getLastChild();	  Node    aNode    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
529	[BUG]  [BUGGY]  Node  rhs  =  output.getFirstChild();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  output.getFirstChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  output.getFirstChild();	  Node    rhs    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
530	[BUG]  [BUGGY]  Node  rhs  =  node.getFirstChild();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  node.getFirstChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  node.getFirstChild();	  Node    rhs    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
531	[BUG]  [BUGGY]  Node  rhs  =  n.getObj();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  n.getObj();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getObj();	  Node    rhs    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
532	[BUG]  [BUGGY]  n.addChildToFront(output);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.addChildToFront(output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.addChildToFront(output);	  n.addChildToFront(cfgNode);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
533	[BUG]  [BUGGY]  n.addChildToFront(false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.addChildToFront(false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.addChildToFront(false);	  n.addChildToFront(cfgNode);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
534	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(n.getLastChild())  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(n.getLastChild())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(n.getLastChild())  {  throw  new  IllegalStateException( " ");  }	  allowMustBeReachingVariableDef(n.getFirstChild())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
535	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output)  {  throw  new  IllegalStateException( " ");  }	  allowMustBeReachingVariableDef(n.getFirstChild())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
536	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  output)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild(),  output)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(n.getFirstChild(),  output)  {  throw  new  IllegalStateException( " ");  }	  allowMustBeReachingVariableDef(n.getFirstChild())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
537	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild())  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(n.getFirstChild())  {  throw  new  IllegalStateException( " ");  }	  allowMustBeReachingVariableDef(n.getFirstChild())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
538	[BUG]  [BUGGY]  n.replaceChild(n,  output);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.replaceChild(n,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.replaceChild(n,  output);	  n.removeChild(fnNode);    	non-compiled	[CE]  <identifier>  expected	89	None	replace
539	[BUG]  [BUGGY]  n.removeChild(type);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.removeChild(type);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.removeChild(type);	  n.removeChild(fnNode);    	non-compiled	[CE]  <identifier>  expected	89	None	replace
540	[BUG]  [BUGGY]  AssertionFailedError.make(msgNode,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  AssertionFailedError.make(msgNode,  cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AssertionFailedError.make(msgNode,  cfgNode,  output,  conditional);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
541	[BUG]  [BUGGY]  AssertionFailedError.make(conditional,  cfgNode,  output,  lhs);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  AssertionFailedError.make(conditional,  cfgNode,  output,  lhs);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AssertionFailedError.make(conditional,  cfgNode,  output,  lhs);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
542	[BUG]  [BUGGY]  AssertionFailedError.make(n,  lhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  AssertionFailedError.make(n,  lhs,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AssertionFailedError.make(n,  lhs,  output,  conditional);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
543	[BUG]  [BUGGY]  n.addChildToBack(output);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.addChildToBack(output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.addChildToBack(output);	  n.addChildToBack(cfgNode);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
544	[BUG]  [BUGGY]  n.addChildToBack(lhs);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.addChildToBack(lhs);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.addChildToBack(lhs);	  n.addChildToBack(cfgNode);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
545	[BUG]  [BUGGY]  n.addChildToBack(false);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.addChildToBack(false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.addChildToBack(false);	  n.addChildToBack(cfgNode);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
546	[BUG]  [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
547	[BUG]  [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
548	[BUG]  [BUGGY]  escaped.addToDefIfLocal(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  escaped.addToDefIfLocal(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	escaped.addToDefIfLocal(n.getFirstChild(),  cfgNode,  output,  false);	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
549	[BUG]  [BUGGY]  n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.getFirstChild(),  cfgNode,  output,  true);	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
550	[BUG]  [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
551	[BUG]  [BUGGY]  c.hasChildren()  ||  c.hasOneChild())  {  return;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  c.hasChildren()  ||  c.hasOneChild())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	c.hasChildren()  ||  c.hasOneChild())  {  return;  }	  if(c.hasChildren()    ||    c.hasOneChild())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
552	[BUG]  [BUGGY]  c.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  c.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	c.hasChildren())  {  return;  }	  if(c.hasChildren()    ||    c.hasOneChild())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
553	[BUG]  [BUGGY]  c  =  n.getFirstChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  c  =  n.getFirstChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	c  =  n.getFirstChild();	  if(c.hasChildren()    ||    c.hasOneChild())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
554	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasAnyChild())  {  return;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  ||  c.hasAnyChild())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasAnyChild())  {  return;  }	  if(c.hasChildren()    ||    c.hasOneChild())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
555	[BUG]  [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output);  }	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
556	[BUG]  [BUGGY]  if(n.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    false);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
557	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cf  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cf  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(NodeUtil.isFunctionDeclaration(n))  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cf	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    false);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
558	[BUG]  [BUGGY]  if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    false);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
559	[BUG]  [BUGGY]  if(n.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    false);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
560	[BUG]  [BUGGY]  if(conditional)tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	111	None	replace
561	[BUG]  [BUGGY]  if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	111	None	replace
562	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ").equals(cfgNode));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  throw  new  IllegalArgumentException( " ").equals(cfgNode));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalArgumentException( " ").equals(cfgNode));	  throw    new    IllegalArgumentException(   "   ".equals(cfgNode));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
563	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
564	[BUG]  [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
565	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	88	None	replace
566	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	88	None	replace
567	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
568	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
569	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
570	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
571	[BUG]  [BUGGY]  enableMustBeReaching(conditional)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReaching(conditional)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReaching(conditional)  {  throw  new  IllegalStateException( " ");  }	  allowMustBeReaching(conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
572	[BUG]  [BUGGY]  allowMustBeReaching(conditional,  cfgNode)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReaching(conditional,  cfgNode)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReaching(conditional,  cfgNode)  {  throw  new  IllegalStateException( " ");  }	  allowMustBeReaching(conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
573	[BUG]  [BUGGY]  enableMustBeReaching(conditional,  cfgNode)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReaching(conditional,  cfgNode)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReaching(conditional,  cfgNode)  {  throw  new  IllegalStateException( " ");  }	  allowMustBeReaching(conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
574	[BUG]  [BUGGY]  allowMustBeReaching(conditional,  output)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReaching(conditional,  output)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReaching(conditional,  output)  {  throw  new  IllegalStateException( " ");  }	  allowMustBeReaching(conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
575	[BUG]  [BUGGY]  enableMustBeReaching(conditional,  output)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReaching(conditional,  output)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReaching(conditional,  output)  {  throw  new  IllegalStateException( " ");  }	  allowMustBeReaching(conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
576	[BUG]  [BUGGY]  reportError( "msg.undef.unknown.type ",  n);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  reportError( "msg.undef.unknown.type ",  n);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	reportError( "msg.undef.unknown.type ",  n);	  reportError(   "msg.undef.unknown.type   ");    	non-compiled	[CE]  <identifier>  expected	90	None	replace
577	[BUG]  [BUGGY]  reportError( "msg.undef.unknown.type ",  lhs);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  reportError( "msg.undef.unknown.type ",  lhs);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	reportError( "msg.undef.unknown.type ",  lhs);	  reportError(   "msg.undef.unknown.type   ");    	non-compiled	[CE]  <identifier>  expected	90	None	replace
578	[BUG]  [BUGGY]  escaped  ||  output)  {  return;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  escaped  ||  output)  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	escaped  ||  output)  {  return;  }	  escaped    ||    conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
579	[BUG]  [BUGGY]  escaped  ||  conditional)  {  throw  new  JsScopeException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  escaped  ||  conditional)  {  throw  new  JsScopeException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	escaped  ||  conditional)  {  throw  new  JsScopeException( " ");  }	  escaped    ||    conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
580	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(n)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n)  {  throw  new  IllegalStateException( " ");  }	  if(conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
581	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output)  {  throw  new  IllegalStateException( " ");  }	  if(conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
582	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional)  {  throw  new  IllegalStateException( " ");  }	  if(conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
583	[BUG]  [BUGGY]  n.removeChild(cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.removeChild(cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.removeChild(cfgNode,  output,  true);	  n.removeChild(cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
584	[BUG]  [BUGGY]  &&  c.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  &&  c.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	&&  c.hasChildren())  {  return;  }	  ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
585	[BUG]  [BUGGY]  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }	  if(c.hasChildren()    ||    c.hasChildren())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
586	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ".equals(n.getString()));  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ".equals(n.getString()));  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ".equals(n.getString()));  }	  if(c.hasChildren()    ||    c.hasChildren())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
587	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ".);  }	  if(c.hasChildren()    ||    c.hasChildren())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
588	[BUG]  [BUGGY]  if(conditional)  {  allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  allowMustBeReachingVariableDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
589	[BUG]  [BUGGY]  if(conditional)  {  allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  allowMustBeReachingVariableDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
590	[BUG]  [BUGGY]  if(conditional)  {  allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  allowMustBeReachingVariableDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
591	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  NodeUtil.isExpressionNode(n));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  NodeUtil.isExpressionNode(n));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Preconditions.checkState(n.hasChildren()  &&  NodeUtil.isExpressionNode(n));	  Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
592	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  NodeUtil.isFunctionAnonymous(n));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  NodeUtil.isFunctionAnonymous(n));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Preconditions.checkState(n.hasChildren()  &&  NodeUtil.isFunctionAnonymous(n));	  Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
593	[BUG]  [BUGGY]  n.hasChildren()  ||  n.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.hasChildren()  ||  n.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.hasChildren()  ||  n.hasChildren())  {  return;  }	  if(n.hasChildren()    ||    n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
594	[BUG]  [BUGGY]  n.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.hasChildren())  {  return;  }	  if(n.hasChildren()    ||    n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
595	[BUG]  [BUGGY]  n.removeChild(n.getFirstChild());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.removeChild(n.getFirstChild());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.removeChild(n.getFirstChild());	  if(n.hasChildren()    ||    n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
596	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equalsIgnoreCase(lhs.getString(),  conditional));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  throw  new  IllegalArgumentException( " ".equalsIgnoreCase(lhs.getString(),  conditional));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalArgumentException( " ".equalsIgnoreCase(lhs.getString(),  conditional));	  throw    new    IllegalArgumentException(   "   ".equalsIgnoreCase(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	67	None	replace
597	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equalsIgnoreCase(lhs.getString()  + ") ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  throw  new  IllegalArgumentException( " ".equalsIgnoreCase(lhs.getString()  + ") ");  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalArgumentException( " ".equalsIgnoreCase(lhs.getString()  + ") ");	  throw    new    IllegalArgumentException(   "   ".equalsIgnoreCase(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	67	None	replace
598	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
599	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
600	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  output,  conditional);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  output,  conditional);  }	  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
601	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
602	[BUG]  [BUGGY]  if(!conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	115	None	replace
603	[BUG]  [BUGGY]  if(conditional)  {  enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  enableMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	115	None	replace
604	[BUG]  [BUGGY]  if(conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	115	None	replace
605	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasNext())return;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  ||  c.hasNext())return;  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasNext())return;	  if(c.hasChildren()    ||    c.hasNext())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
606	[BUG]  [BUGGY]  if(c.hasChildren()  ||  n.hasNext())  {  return;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  ||  n.hasNext())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  n.hasNext())  {  return;  }	  if(c.hasChildren()    ||    c.hasNext())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
607	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariableDef(n);	  if(conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
608	[BUG]  [BUGGY]  n.addChildToFront(rhs);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.addChildToFront(rhs);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.addChildToFront(rhs);	  n.removeChild(lhs);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
609	[BUG]  [BUGGY]  n.replaceChild(lhs,  output);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.replaceChild(lhs,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.replaceChild(lhs,  output);	  n.removeChild(lhs);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
610	[BUG]  [BUGGY]  if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    false);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
611	[BUG]  [BUGGY]  if(conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    false);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
612	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(NodeUtil.isFunctionDeclaration(n))  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    false);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
613	[BUG]  [BUGGY]  if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    false);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
614	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    false);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
615	[BUG]  [BUGGY]  Node  rhs  =  lhs.getFirstChild();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  lhs.getFirstChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  lhs.getFirstChild();	  if(!conditional)    {    throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
616	[BUG]  [BUGGY]  Node  rhs  =  lhs.getLastChild();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  lhs.getLastChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  lhs.getLastChild();	  if(!conditional)    {    throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
617	[BUG]  [BUGGY]  AssertionFailedError.make(lhs.getString(),  output,  conditional)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  AssertionFailedError.make(lhs.getString(),  output,  conditional)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AssertionFailedError.make(lhs.getString(),  output,  conditional)  {  throw  new  IllegalStateException( " ");  }	  if(!conditional)    {    throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
618	[BUG]  [BUGGY]  AssertionFailedError.error( "Can  not  find  a  valid  cfgNode: "  +  lhs.getString());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  AssertionFailedError.error( "Can  not  find  a  valid  cfgNode: "  +  lhs.getString());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AssertionFailedError.error( "Can  not  find  a  valid  cfgNode: "  +  lhs.getString());	  if(!conditional)    {    throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
619	[BUG]  [BUGGY]  AssertionFailedError.error( "Can  not  find  a  valid  cfgNode  for  path: "  +  lhs.getString());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  AssertionFailedError.error( "Can  not  find  a  valid  cfgNode  for  path: "  +  lhs.getString());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AssertionFailedError.error( "Can  not  find  a  valid  cfgNode  for  path: "  +  lhs.getString());	  if(!conditional)    {    throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
620	[BUG]  [BUGGY]  if(!conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
621	[BUG]  [BUGGY]  if(n.hasChildren())  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
622	[BUG]  [BUGGY]  if(n.hasChildren())  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
623	[BUG]  [BUGGY]  if(n.hasChildren())  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
624	[BUG]  [BUGGY]  parents  ==  null  ||!conditional)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  parents  ==  null  ||!conditional)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	parents  ==  null  ||!conditional)  {  throw  new  IllegalStateException( " ");  }	  parent    ==    null    ||!conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
625	[BUG]  [BUGGY]  if(!conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	109	None	replace
626	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    break;    	non-compiled	[CE]  <identifier>  expected	106	None	replace
627	[BUG]  [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    break;    	non-compiled	[CE]  <identifier>  expected	106	None	replace
628	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(NodeUtil.isFunctionDeclaration(n))  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    break;    	non-compiled	[CE]  <identifier>  expected	106	None	replace
629	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    break;    	non-compiled	[CE]  <identifier>  expected	106	None	replace
630	[BUG]  [BUGGY]  Node  aNode  =  n.getAlternateChild();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getAlternateChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getAlternateChild();	  Node    aNode    =    n.getOwnerChild();    	non-compiled	[CE]  <identifier>  expected	97	None	replace
631	[BUG]  [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
632	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(NodeUtil.isFunctionDeclaration(n))  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
633	[BUG]  [BUGGY]  parent!=  null  &&!conditional)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  parent!=  null  &&!conditional)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	parent!=  null  &&!conditional)  {  throw  new  IllegalArgumentException( " ");  }	  parent    ==    null    ||!conditional)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
634	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.isFunctionDeclaration(n))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isFunctionDeclaration(n))  {  throw  new  IllegalArgumentException( " ");  }	  parent    ==    null    ||!conditional)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
635	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ").equals(lhs.getString()));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  throw  new  IllegalStateException( " ").equals(lhs.getString()));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalStateException( " ").equals(lhs.getString()));	  throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	38	None	replace
636	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ").equals(lhs.getString());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  throw  new  IllegalStateException( " ").equals(lhs.getString());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalStateException( " ").equals(lhs.getString());	  throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	38	None	replace
637	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    break;    	non-compiled	[CE]  <identifier>  expected	106	None	replace
638	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    break;    	non-compiled	[CE]  <identifier>  expected	106	None	replace
639	[BUG]  [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    break;    	non-compiled	[CE]  <identifier>  expected	106	None	replace
640	[BUG]  [BUGGY]  if(conditional)  {  allowMustBeReachingVariableDef(cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  allowMustBeReachingVariableDef(cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  allowMustBeReachingVariableDef(cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	115	None	replace
641	[BUG]  [BUGGY]  if(cfgNode!=  null)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(cfgNode!=  null)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(cfgNode!=  null)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
642	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
643	[BUG]  [BUGGY]  computeMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  computeMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	computeMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	109	None	replace
644	[BUG]  [BUGGY]  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  null);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  null);	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	109	None	replace
645	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(n.getString()));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  throw  new  IllegalStateException( " ".equals(n.getString()));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalStateException( " ".equals(n.getString()));	  throw    new    IllegalStateException(   "   ".equals(cfgNode.getString()));    	non-compiled	[CE]  <identifier>  expected	39	None	replace
646	[BUG]  [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  output,  conditional);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  output,  conditional);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
647	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
648	[BUG]  [BUGGY]  Node  aNode  =  n.getFirstChild().cloneTree();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getFirstChild().cloneTree();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getFirstChild().cloneTree();	  Node    aNode    =    n.getFirstChild().getNext();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
649	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  Token.name(lhs.getString()));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  Token.name(lhs.getString()));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalStateException( " "  +  Token.name(lhs.getString()));	  Throwables.throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	40	None	replace
650	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  getMessage());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  getMessage());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalStateException( " "  +  getMessage());	  Throwables.throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	40	None	replace
651	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
652	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
653	[BUG]  [BUGGY]  n.removeChild(rhs,  output);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.removeChild(rhs,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.removeChild(rhs,  output);	  n.removeChild(cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
654	[BUG]  [BUGGY]  Reporter.error( "msg.undef.unknown.class ",  n,  conditional);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Reporter.error( "msg.undef.unknown.class ",  n,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Reporter.error( "msg.undef.unknown.class ",  n,  conditional);	  reportError(   "msg.undef.unknown.class   ");    	non-compiled	[CE]  <identifier>  expected	91	None	replace
655	[BUG]  [BUGGY]  Reporter.error( "msg.undef.unknown.class ",  n);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Reporter.error( "msg.undef.unknown.class ",  n);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Reporter.error( "msg.undef.unknown.class ",  n);	  reportError(   "msg.undef.unknown.class   ");    	non-compiled	[CE]  <identifier>  expected	91	None	replace
656	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
657	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
658	[BUG]  [BUGGY]  if(!conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
659	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getType()  ==  Token.NAME)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    false);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
660	[BUG]  [BUGGY]  if(conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    false);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
661	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  Token.name(lhs.getString()));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  Token.name(lhs.getString()));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  Token.name(lhs.getString()));	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
662	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  getMessage());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  getMessage());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  getMessage());	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
663	[BUG]  [BUGGY]  Node  aNode  =  n.getImmediateParentNode();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getImmediateParentNode();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getImmediateParentNode();	  Node    aNode    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
664	[BUG]  [BUGGY]  Node  aNode  =  n.removeFirstChild();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.removeFirstChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.removeFirstChild();	  Node    aNode    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
665	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
666	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
667	[BUG]  [BUGGY]  Node  rhs  =  n.removeFirstChild();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  n.removeFirstChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.removeFirstChild();	  Node    rhs    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
668	[BUG]  [BUGGY]  Node  rhs  =  output.getLastChild();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  output.getLastChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  output.getLastChild();	  Node    rhs    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
669	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
670	[BUG]  [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
671	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasChildren()  ||  c.hasNext())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  ||  c.hasChildren()  ||  c.hasNext())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasChildren()  ||  c.hasNext())  {  throw  new  IllegalArgumentException( " ");  }	  if(c.hasChildren()    ||    c.hasChildren())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
672	[BUG]  [BUGGY]  if(n.hasChildren()  ||  c.hasChildren()  ||  cfgNode.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren()  ||  c.hasChildren()  ||  cfgNode.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren()  ||  c.hasChildren()  ||  cfgNode.hasChildren())  {  return;  }	  if(n.hasChildren()    ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
673	[BUG]  [BUGGY]  if(n.hasChildren()  ||  c.hasChildren()  ||  cfgNode.getFirstChild().getNext()!=  null)  {  return;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren()  ||  c.hasChildren()  ||  cfgNode.getFirstChild().getNext()!=  null)  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren()  ||  c.hasChildren()  ||  cfgNode.getFirstChild().getNext()!=  null)  {  return;  }	  if(n.hasChildren()    ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
674	[BUG]  [BUGGY]  if(n.hasChildren()  ||  c.hasChildren()  ||  cfgNode.getFirstChild().getNext()  ==  null)  {  return;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren()  ||  c.hasChildren()  ||  cfgNode.getFirstChild().getNext()  ==  null)  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren()  ||  c.hasChildren()  ||  cfgNode.getFirstChild().getNext()  ==  null)  {  return;  }	  if(n.hasChildren()    ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
675	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasNext()  ||  c.hasNext())  {  return;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  ||  c.hasNext()  ||  c.hasNext())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasNext()  ||  c.hasNext())  {  return;  }	  if(c.hasChildren()    ||    c.hasNext())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
676	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasNext())return;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  ||  c.hasNext())return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasNext())return;  }	  if(c.hasChildren()    ||    c.hasNext())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
677	[BUG]  [BUGGY]  if(conditional)  {  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  Node    rhs    =    n.getFirstChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
678	[BUG]  [BUGGY]  if(conditional)  {  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  conditional);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  conditional);  }	  Node    rhs    =    n.getFirstChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
679	[BUG]  [BUGGY]  if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	110	None	replace
680	[BUG]  [BUGGY]  Node  aNode  =  n.getAncestor(2)  ||  cfgNode!=  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getAncestor(2)  ||  cfgNode!=  null;  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getAncestor(2)  ||  cfgNode!=  null;	  Node    aNode    =    n.getAncestor(2);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
681	[BUG]  [BUGGY]  Node  aNode  =  n.getAncestor(2)  ||  cfgNode  ==  null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getAncestor(2)  ||  cfgNode  ==  null;  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getAncestor(2)  ||  cfgNode  ==  null;	  Node    aNode    =    n.getAncestor(2);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
682	[BUG]  [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
683	[BUG]  [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
684	[BUG]  [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output);  }	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
685	[BUG]  [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	88	None	replace
686	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }	  aughtException(   "   ");    	non-compiled	[CE]  <identifier>  expected	99	None	replace
687	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.EXPR_RESULT)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.EXPR_RESULT)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  if(n.getType()  ==  Token.EXPR_RESULT)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }	  aughtException(   "   ");    	non-compiled	[CE]  <identifier>  expected	99	None	replace
688	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  addToDefIfLocal(n.getString(),  cfgNode,  rhs,  output);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  addToDefIfLocal(n.getString(),  cfgNode,  rhs,  output);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  addToDefIfLocal(n.getString(),  cfgNode,  rhs,  output);  }	  aughtException(   "   ");    	non-compiled	[CE]  <identifier>  expected	99	None	replace
689	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }	  aughtException(   "   ");    	non-compiled	[CE]  <identifier>  expected	99	None	replace
690	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output,  true);  }	  aughtException(   "   ");    	non-compiled	[CE]  <identifier>  expected	99	None	replace
691	[BUG]  [BUGGY]  Node  aNode  =  node.getAncestor(2);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  node.getAncestor(2);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  node.getAncestor(2);	  Node    aNode    =    n.getAncestor(1);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
692	[BUG]  [BUGGY]  AssertionFailedError.make(false,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  AssertionFailedError.make(false,  cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AssertionFailedError.make(false,  cfgNode,  output,  conditional);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
693	[BUG]  [BUGGY]  AssertionFailedError.make(lhs,  conditional,  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  AssertionFailedError.make(lhs,  conditional,  cfgNode,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AssertionFailedError.make(lhs,  conditional,  cfgNode,  output);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
694	[BUG]  [BUGGY]  new  IllegalStateException( "Unknown  type: "  +  lhs.getString());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  new  IllegalStateException( "Unknown  type: "  +  lhs.getString());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	new  IllegalStateException( "Unknown  type: "  +  lhs.getString());	  new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	77	None	replace
695	[BUG]  [BUGGY]  new  IllegalStateException( "Can  not  find  a  valid  cfgNode. ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  new  IllegalStateException( "Can  not  find  a  valid  cfgNode. ");  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	new  IllegalStateException( "Can  not  find  a  valid  cfgNode. ");	  new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	77	None	replace
696	[BUG]  [BUGGY]  new  IllegalStateException( "Can  not  find  a  valid  cfgNode: ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  new  IllegalStateException( "Can  not  find  a  valid  cfgNode: ");  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	new  IllegalStateException( "Can  not  find  a  valid  cfgNode: ");	  new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	77	None	replace
697	[BUG]  [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  false);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    computeMustDef(n.getFirstChild().getNext(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
698	[BUG]  [BUGGY]  if(cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    computeMustDef(n.getFirstChild().getNext(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
699	[BUG]  [BUGGY]  computeMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  computeMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	computeMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);	  allowMustBeReachingVariableDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
700	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getType()  ==  Token.VAR)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	108	None	replace
701	[BUG]  [BUGGY]  if(!conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	108	None	replace
702	[BUG]  [BUGGY]  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional,  rhs);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional,  rhs);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional,  rhs);	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	111	None	replace
703	[BUG]  [BUGGY]  if(conditional)  {  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  conditional);  return;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  conditional);  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  conditional);  return;  }	  Node    rhs    =    n.getFirstChild();    computeMustDef(rhs,    output,    conditional);    return;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
704	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeString(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeString(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeString(n.getFirstChild(),  cfgNode,  output,  conditional);	  if(conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
705	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeString(n.getFirstChild(),  cfgNode,  output);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeString(n.getFirstChild(),  cfgNode,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeString(n.getFirstChild(),  cfgNode,  output);	  if(conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
706	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeString(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeString(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeString(n.getFirstChild(),  cfgNode,  output,  false);	  if(conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
707	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeString(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtExceptionHandler.handleMustBeString(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeString(n.getFirstChild(),  cfgNode,  output,  true);	  if(conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
708	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  conditional);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  conditional);  }	  aughtExceptionHandler.handleMustBeReachingVariable(n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
709	[BUG]  [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  conditional);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  conditional);  }	  aughtExceptionHandler.handleMustBeReachingVariable(n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
710	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  conditional)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  conditional)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isFunctionDeclaration(n)||  conditional)  {  throw  new  IllegalArgumentException( " ");  }	  parent    ==    null    ||!conditional)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
711	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(n)||  conditional)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.isVarDeclaration(n)||  conditional)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isVarDeclaration(n)||  conditional)  {  throw  new  IllegalArgumentException( " ");  }	  parent    ==    null    ||!conditional)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
712	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)||!conditional)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.isFunctionDeclaration(n)||!conditional)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isFunctionDeclaration(n)||!conditional)  {  throw  new  IllegalArgumentException( " ");  }	  parent    ==    null    ||!conditional)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
713	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
714	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
715	[BUG]  [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
716	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasChildren()  ||  c.hasNext())  {  return;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  ||  c.hasChildren()  ||  c.hasNext())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasChildren()  ||  c.hasNext())  {  return;  }	  if(c.hasChildren()    ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
717	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasChildren()  ||  c.next())  {  return;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  ||  c.hasChildren()  ||  c.next())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasChildren()  ||  c.next())  {  return;  }	  if(c.hasChildren()    ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
718	[BUG]  [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
719	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalStateException( " ")	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
720	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  conditional);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalStateException( " ",  conditional);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
721	[BUG]  [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  output,  conditional);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  output,  conditional);  }	  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
722	[BUG]  [BUGGY]  if(c  ==  null  ||  c.hasChildren()  ||  c.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c  ==  null  ||  c.hasChildren()  ||  c.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c  ==  null  ||  c.hasChildren()  ||  c.hasChildren())  {  return;  }	  if(c    ==    null    ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
723	[BUG]  [BUGGY]  if(c  ==  null  ||  c.hasChildren()  ||  cfgNode.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c  ==  null  ||  c.hasChildren()  ||  cfgNode.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c  ==  null  ||  c.hasChildren()  ||  cfgNode.hasChildren())  {  return;  }	  if(c    ==    null    ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
724	[BUG]  [BUGGY]  if(c  ==  null  ||  c.hasChildren())return;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c  ==  null  ||  c.hasChildren())return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c  ==  null  ||  c.hasChildren())return;  }	  if(c    ==    null    ||    c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
725	[BUG]  [BUGGY]  allowMustBeReaching(conditional);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReaching(conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReaching(conditional);	  allowMustBeReaching(conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
726	[BUG]  [BUGGY]  allowMustBeReaching(conditional),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReaching(conditional),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReaching(conditional),  cfgNode,  output,  true);	  allowMustBeReaching(conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
727	[BUG]  [BUGGY]  reportError( "msg.undef.unknown. ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  reportError( "msg.undef.unknown. ");  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	reportError( "msg.undef.unknown. ");	  reportError(   "msg.undef.unknown.type   ");    	non-compiled	[CE]  <identifier>  expected	90	None	replace
728	[BUG]  [BUGGY]  reportError( "msg.undef.unknown.type "  +  Token.name);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  reportError( "msg.undef.unknown.type "  +  Token.name);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	reportError( "msg.undef.unknown.type "  +  Token.name);	  reportError(   "msg.undef.unknown.type   ");    	non-compiled	[CE]  <identifier>  expected	90	None	replace
729	[BUG]  [BUGGY]  reportError( "msg.unknown.type ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  reportError( "msg.unknown.type ");  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	reportError( "msg.unknown.type ");	  reportError(   "msg.undef.unknown.type   ");    	non-compiled	[CE]  <identifier>  expected	90	None	replace
730	[BUG]  [BUGGY]  ||  node.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  ||  node.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	||  node.hasChildren())  {  return;  }	  ||    n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
731	[BUG]  [BUGGY]  ||  n.hasChildren())  {  throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  ||  n.hasChildren())  {  throw  new  IllegalStateException( " ");  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	||  n.hasChildren())  {  throw  new  IllegalStateException( " ");	  ||    n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
732	[BUG]  [BUGGY]  Node  aNode  =  n.getOwner();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  aNode  =  n.getOwner();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getOwner();	  Node    aNode    =    n.getOwnerChild();    	non-compiled	[CE]  <identifier>  expected	97	None	replace
733	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getType()  ==  Token.VAR)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    false);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
734	[BUG]  [BUGGY]  if(!conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    false);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
735	[BUG]  [BUGGY]  if(!conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
736	[BUG]  [BUGGY]  computeMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  computeMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	computeMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);	  allowMustBeReachingVariableDef(c.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
737	[BUG]  [BUGGY]  acceptMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  acceptMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	acceptMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);	  allowMustBeReachingVariableDef(c.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
738	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasChildren())  {  return;  }	  if(n.hasChildren()    ||    n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
739	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasNext())  {  return;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasNext())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren()  ||  n.hasChildren()  ||  n.hasNext())  {  return;  }	  if(n.hasChildren()    ||    n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
740	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasNext())  {  return;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren()  ||  n.hasNext())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren()  ||  n.hasNext())  {  return;  }	  if(n.hasChildren()    ||    n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
741	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.name(cfgNode));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.name(cfgNode));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalArgumentException( " "  +  Token.name(cfgNode));	  throw    new    IllegalArgumentException(   "   ".equals(cfgNode));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
742	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ").equals(cfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  throw  new  IllegalArgumentException( " ").equals(cfgNode);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalArgumentException( " ").equals(cfgNode);	  throw    new    IllegalArgumentException(   "   ".equals(cfgNode));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
743	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)||!conditional)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.isFunctionDeclaration(n)||!conditional)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isFunctionDeclaration(n)||!conditional)  {  throw  new  IllegalStateException( " ");  }	  parent    ==    null    ||!conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
744	[BUG]  [BUGGY]  if(conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild())  {  throw  new  IllegalArgumentException( " ");  }	  allowMustBeReachingVariableDef(n.getFirstChild())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
745	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(n.getFirstChild())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(n.getFirstChild())  {  throw  new  IllegalArgumentException( " ");  }	  allowMustBeReachingVariableDef(n.getFirstChild())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
746	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  conditional)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  conditional)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getFirstChild(),  conditional)  {  throw  new  IllegalArgumentException( " ");  }	  allowMustBeReachingVariableDef(n.getFirstChild())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
747	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ").equals(lhs.getString());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  throw  new  IllegalArgumentException( " ").equals(lhs.getString());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalArgumentException( " ").equals(lhs.getString());	  throw    new    IllegalArgumentException(   "   ".equals(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
748	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ").equals(lhs.getString()));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  throw  new  IllegalArgumentException( " ").equals(lhs.getString()));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalArgumentException( " ").equals(lhs.getString()));	  throw    new    IllegalArgumentException(   "   ".equals(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
749	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.hasChildren());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.hasChildren());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Preconditions.checkState(n.hasChildren()  &&  n.hasChildren());	  Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
750	[BUG]  [BUGGY]  Preconditions.checkArgument(n.hasChildren());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Preconditions.checkArgument(n.hasChildren());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Preconditions.checkArgument(n.hasChildren());	  Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
751	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeFunction(cfgNode,  rhs,  output);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeFunction(cfgNode,  rhs,  output);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeFunction(cfgNode,  rhs,  output);  }	  aughtExceptionHandler.handleMustBeFunction(cfgNode,    rhs,    output);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
752	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeFunction(cfgNode,  rhs,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeFunction(cfgNode,  rhs,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeFunction(cfgNode,  rhs,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMustBeFunction(cfgNode,    rhs,    output);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
753	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeFunction(cfgNode,  rhs,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeFunction(cfgNode,  rhs,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMustBeFunction(cfgNode,  rhs,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMustBeFunction(cfgNode,    rhs,    output);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
754	[BUG]  [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    output);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
755	[BUG]  [BUGGY]  n.removeChild(lhs.cloneTree());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.removeChild(lhs.cloneTree());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.removeChild(lhs.cloneTree());	  n.removeChild(lhs);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
756	[BUG]  [BUGGY]  n.removeChild(lhs,  output);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.removeChild(lhs,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.removeChild(lhs,  output);	  n.removeChild(lhs);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
757	[BUG]  [BUGGY]  n.detachChildren();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.detachChildren();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.detachChildren();	  n.removeChild(rhs);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
758	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equalsIgnoreCase(lhs.getString()),  conditional);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  throw  new  IllegalArgumentException( " ".equalsIgnoreCase(lhs.getString()),  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalArgumentException( " ".equalsIgnoreCase(lhs.getString()),  conditional);	  throw    new    IllegalArgumentException(   "   ".equalsIgnoreCase(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	67	None	replace
759	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ").equalsIgnoreCase(lhs.getString(),  conditional);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  throw  new  IllegalArgumentException( " ").equalsIgnoreCase(lhs.getString(),  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalArgumentException( " ").equalsIgnoreCase(lhs.getString(),  conditional);	  throw    new    IllegalArgumentException(   "   ".equalsIgnoreCase(lhs.getString()));    	non-compiled	[CE]  <identifier>  expected	67	None	replace
760	[BUG]  [BUGGY]  n.removeChildAfter(cfgNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.removeChildAfter(cfgNode);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.removeChildAfter(cfgNode);	  n.addChildToFront(cfgNode);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
761	[BUG]  [BUGGY]  n.addChildAfter(cfgNode,  output);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  n.addChildAfter(cfgNode,  output);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.addChildAfter(cfgNode,  output);	  n.addChildToFront(cfgNode);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
762	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingDependency(cfgNode,  output);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingDependency(cfgNode,  output);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingDependency(cfgNode,  output);  }	  aughtExceptionHandler.handleMissingDependency(cfgNode,    output);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
763	[BUG]  [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
764	[BUG]  [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
765	[BUG]  [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.hasChildren())  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren())  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
766	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsUnquotedException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsUnquotedException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsUnquotedException( " ");  }	  aughtExceptionHandler.throwAsUnquotedException(   "   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
767	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.throwAsUnquotedException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.throwAsUnquotedException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  aughtExceptionHandler.throwAsUnquotedException( " ");  }	  aughtExceptionHandler.throwAsUnquotedException(   "   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
768	[BUG]  [BUGGY]  if(!conditional)  {  aughtExceptionHandler.throwAsUnquotedException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  aughtExceptionHandler.throwAsUnquotedException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  aughtExceptionHandler.throwAsUnquotedException( " ");  }	  aughtExceptionHandler.throwAsUnquotedException(   "   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
769	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsUnquotedException( " ");  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsUnquotedException( " ");  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsUnquotedException( " ");  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild	  aughtExceptionHandler.throwAsUnquotedException(   "   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
770	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsUnquotedException( " ");  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsUnquotedException( " ");  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild()  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsUnquotedException( " ");  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild()	  aughtExceptionHandler.throwAsUnquotedException(   "   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
771	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
772	[BUG]  [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getFirstChild()!=  cfgNode)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
773	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
774	[BUG]  [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.getFirstChild()!=  cfgNode)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
775	[BUG]  [BUGGY]  enableMustBeReachingVariableDef(cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  enableMustBeReachingVariableDef(cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	enableMustBeReachingVariableDef(cfgNode,  output,  true);	  allowMustBeReachingVariableDef(cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
776	[BUG]  [BUGGY]  if(aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  n,  output))  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  rhs,  output);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  n,  output))  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  rhs,  output);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  n,  output))  {  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  rhs,  output);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,    rhs,    output);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
777	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  null);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  null);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  null);	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    true);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
778	[BUG]  [BUGGY]  allowMustBeReaching(conditional)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReaching(conditional)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReaching(conditional)  {  throw  new  IllegalArgumentException( " ");  }	  if(conditional)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
779	[BUG]  [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);  }	  aughtExceptionHandler.handleMustBeReachingVariableDef(n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
780	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ")  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ")  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalArgumentException( " ")	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
781	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ",  conditional);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ",  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalArgumentException( " ",  conditional);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
782	[BUG]  [BUGGY]  if(!conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
783	[BUG]  [BUGGY]  if(!conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  aughtExceptionHandler(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
784	[BUG]  [BUGGY]  if(!conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(!conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	  allowMustBeReachingVariableDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
785	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  Token.name(cfgNode));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  throw  new  IllegalStateException( " "  +  Token.name(cfgNode));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalStateException( " "  +  Token.name(cfgNode));	  throw    new    IllegalStateException(   "   ".equals(cfgNode));    	non-compiled	[CE]  <identifier>  expected	41	None	replace
786	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  Token.name(cfgNode),  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  throw  new  IllegalStateException( " "  +  Token.name(cfgNode),  conditional);  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalStateException( " "  +  Token.name(cfgNode),  conditional);	  throw    new    IllegalStateException(   "   ".equals(cfgNode));    	non-compiled	[CE]  <identifier>  expected	41	None	replace
787	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(cfgNode)&&!conditional)  {  return;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.mayHaveSideEffects(cfgNode)&&!conditional)  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.mayHaveSideEffects(cfgNode)&&!conditional)  {  return;  }	  NodeUtil.isFunctionDeclaration(cfgNode)&&!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
788	[BUG]  [BUGGY]  NodeUtil.isImmutableValueDeclaration(n)&&!conditional)  {  return;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.isImmutableValueDeclaration(n)&&!conditional)  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isImmutableValueDeclaration(n)&&!conditional)  {  return;  }	  NodeUtil.isFunctionDeclaration(cfgNode)&&!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
789	[BUG]  [BUGGY]  NodeUtil.isExpressionNode(n)&&!conditional)  {  return;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.isExpressionNode(n)&&!conditional)  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isExpressionNode(n)&&!conditional)  {  return;  }	  NodeUtil.isFunctionDeclaration(cfgNode)&&!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
790	[BUG]  [BUGGY]  aughtException( " ").equals(lhs.getString());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtException( " ").equals(lhs.getString());  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtException( " ").equals(lhs.getString());	  if(!conditional)    {    throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
791	[BUG]  [BUGGY]  aughtException( " ".equals(lhs.getString()));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  aughtException( " ".equals(lhs.getString()));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtException( " ".equals(lhs.getString()));	  if(!conditional)    {    throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
792	[BUG]  [BUGGY]  allowMustBeReaching(conditional)  {  throw  new  IllegalStateException( " ").equals(lhs.getString());  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  allowMustBeReaching(conditional)  {  throw  new  IllegalStateException( " ").equals(lhs.getString());  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReaching(conditional)  {  throw  new  IllegalStateException( " ").equals(lhs.getString());  }	  if(!conditional)    {    throw    new    IllegalStateException(   "   ".equals(lhs.getString()));    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
793	[BUG]  [BUGGY]  if(c.hasOneChild()  ||  c.hasOneChild())  {  return;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasOneChild()  ||  c.hasOneChild())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasOneChild()  ||  c.hasOneChild())  {  return;  }	  if(c.hasChildren()    ||    c.hasOneChild())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
794	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasOneChild()  ||  c.hasNext())  {  return;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasChildren()  ||  c.hasOneChild()  ||  c.hasNext())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasOneChild()  ||  c.hasNext())  {  return;  }	  if(c.hasChildren()    ||    c.hasOneChild())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
795	[BUG]  [BUGGY]  if(c.hasOneChild())  {  return;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(c.hasOneChild())  {  return;  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasOneChild())  {  return;  }	  if(c.hasChildren()    ||    c.hasOneChild())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
796	[BUG]  [BUGGY]  if(cfgNode!=  null)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(cfgNode!=  null)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(cfgNode!=  null)  {  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
797	[BUG]  [BUGGY]  NodeUtil.isImmutableValueDeclaration(n)||  conditional)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.isImmutableValueDeclaration(n)||  conditional)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isImmutableValueDeclaration(n)||  conditional)  {  throw  new  IllegalStateException( " ");  }	  NodeUtil.isFunctionDeclaration(n)||    conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
798	[BUG]  [BUGGY]  NodeUtil.isExprAssign(n)||  conditional)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  NodeUtil.isExprAssign(n)||  conditional)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isExprAssign(n)||  conditional)  {  throw  new  IllegalStateException( " ");  }	  NodeUtil.isFunctionDeclaration(n)||    conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
799	[BUG]  [BUGGY]  if(conditional)  {  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);  }  else  {  computeMustDef(rhs,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  if(conditional)  {  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);  }  else  {  computeMustDef(rhs,  output,  true);  }  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);  }  else  {  computeMustDef(rhs,  output,  true);  }	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
800	[BUG]  [BUGGY]  Node  rhs  =  n.getOwnerChild();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  Node  rhs  =  n.getOwnerChild();  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getOwnerChild();	  Node    rhs    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
801	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(n.getString()));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(n.getString()));  [BUGGY]        case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalArgumentException( " ".equals(n.getString()));	  throw    new    IllegalArgumentException(   "   ".equals(cfgNode.getString()));    	non-compiled	[CE]  <identifier>  expected	10	None	replace
