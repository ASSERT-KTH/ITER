bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);	  if(!conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
2	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);	  if(!conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
3	[BUG]  [BUGGY]  AssertionFailedError.make(lhs,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  AssertionFailedError.make(lhs,  cfgNode,  output,  conditional);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	AssertionFailedError.make(lhs,  cfgNode,  output,  conditional);	  if(!conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
4	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);	  if(!conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
5	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  false);	  if(!conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
6	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  true);	  if(!conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
7	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  allowMustBeReachingVariableDef(cfgNode,  output,  conditional);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(cfgNode,  output,  conditional);	  if(!conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
8	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
9	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(lhs.getString()));  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(lhs.getString()));  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalArgumentException( " ".equals(lhs.getString()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
10	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(cfgNode.getString()));  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(cfgNode.getString()));  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalArgumentException( " ".equals(cfgNode.getString()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
11	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(lhs.getString()));  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(lhs.getString()));  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(lhs.getString()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
12	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Node  rhs  =  n.getFirstChild();  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getFirstChild();	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
13	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(cfgNode));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(cfgNode));  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalArgumentException( " ".equals(cfgNode));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
14	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ");  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.throwAsUnquotedException( " ");	  if(!conditional)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
15	[BUG]  [BUGGY]  allowMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  allowMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustDef(n.getFirstChild(),  cfgNode,  output,  true);	  if(n.hasChildren())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
16	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(c.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  allowMustBeReachingVariableDef(c.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(c.getFirstChild(),  cfgNode,  output,  true);	  if(n.hasChildren())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
17	[BUG]  [BUGGY]  allowMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  allowMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustDef(n.getFirstChild(),  cfgNode,  output,  false);	  if(n.hasChildren())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
18	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  conditional);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  conditional);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
19	[BUG]  [BUGGY]  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
20	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
21	[BUG]  [BUGGY]  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  true);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  true);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  true);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
22	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  true);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  true);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  true);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
23	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  conditional);  return;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  conditional);  return;  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  conditional);  return;	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
24	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  false);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  false);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  false);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
25	[BUG]  [BUGGY]  allowMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  allowMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);	  if(c.hasChildren())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
26	[BUG]  [BUGGY]  n.addChildToFront(cfgNode);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  n.addChildToFront(cfgNode);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.addChildToFront(cfgNode);	  n.removeChild(cfgNode);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
27	[BUG]  [BUGGY]  n.removeChild(rhs);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  n.removeChild(rhs);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.removeChild(rhs);	  n.removeChild(cfgNode);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
28	[BUG]  [BUGGY]  n.removeChild(cfgNode,  output);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  n.removeChild(cfgNode,  output);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.removeChild(cfgNode,  output);	  n.removeChild(cfgNode);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
29	[BUG]  [BUGGY]  n.addChildToBack(cfgNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  n.addChildToBack(cfgNode);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.addChildToBack(cfgNode);	  n.removeChild(cfgNode);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
30	[BUG]  [BUGGY]  n.removeChild(lhs);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  n.removeChild(lhs);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.removeChild(lhs);	  n.removeChild(cfgNode);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
31	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  if(c.hasChildren()  ||  c.hasChildren())  {  return;  }  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasChildren())  {  return;  }	  if(c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
32	[BUG]  [BUGGY]  ||  c.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  ||  c.hasChildren())  {  return;  }  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	||  c.hasChildren())  {  return;  }	  if(c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
33	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  if(c.hasChildren()  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasChildren())  {  throw  new  IllegalArgumentException( " ");  }	  if(c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
34	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasNext())  {  return;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  if(c.hasChildren()  ||  c.hasNext())  {  return;  }  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasNext())  {  return;  }	  if(c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
35	[BUG]  [BUGGY]  Node  cfgNode  =  n.getFirstChild();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Node  cfgNode  =  n.getFirstChild();  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  cfgNode  =  n.getFirstChild();	  if(c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
36	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);	  if(c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
37	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
38	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(lhs.getString()));  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  throw  new  IllegalStateException( " ".equals(lhs.getString()));  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalStateException( " ".equals(lhs.getString()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
39	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(cfgNode.getString()));  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  throw  new  IllegalStateException( " ".equals(cfgNode.getString()));  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalStateException( " ".equals(cfgNode.getString()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
40	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(lhs.getString()));  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(lhs.getString()));  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Throwables.throw  new  IllegalStateException( " ".equals(lhs.getString()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
41	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(cfgNode));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  throw  new  IllegalStateException( " ".equals(cfgNode));  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalStateException( " ".equals(cfgNode));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
42	[BUG]  [BUGGY]  Node  aNode  =  n.getLastChild();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Node  aNode  =  n.getLastChild();  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getLastChild();	  Node    aNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
43	[BUG]  [BUGGY]  Node  aNode  =  cfgNode.getFirstChild();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Node  aNode  =  cfgNode.getFirstChild();  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  cfgNode.getFirstChild();	  Node    aNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
44	[BUG]  [BUGGY]  Node  aNode  =  c.getFirstChild();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Node  aNode  =  c.getFirstChild();  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  c.getFirstChild();	  Node    aNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
45	[BUG]  [BUGGY]  Node  aNode  =  n.getAncestor(1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Node  aNode  =  n.getAncestor(1);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getAncestor(1);	  Node    aNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
46	[BUG]  [BUGGY]  Node  aNode  =  node.getFirstChild();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Node  aNode  =  node.getFirstChild();  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  node.getFirstChild();	  Node    aNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
47	[BUG]  [BUGGY]  ||  n.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  ||  n.hasChildren())  {  return;  }  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	||  n.hasChildren())  {  return;  }	  if(n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
48	[BUG]  [BUGGY]  Node  rhs  =  n.getLastChild();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Node  rhs  =  n.getLastChild();  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  rhs  =  n.getLastChild();	  if(n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
49	[BUG]  [BUGGY]  n.removeChild(c);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  n.removeChild(c);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.removeChild(c);	  if(n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
50	[BUG]  [BUGGY]  escaped  ||  conditional)  {  return;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  escaped  ||  conditional)  {  return;  }  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	escaped  ||  conditional)  {  return;  }	  if(!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
51	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  output,  conditional);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  output,  conditional);	  if(!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
52	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(cfgNode)&&!conditional)  {  return;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  NodeUtil.isFunctionDeclaration(cfgNode)&&!conditional)  {  return;  }  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isFunctionDeclaration(cfgNode)&&!conditional)  {  return;  }	  if(!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
53	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  output,  conditional);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariable(cfgNode,  output,  conditional);	  if(!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
54	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  rhs,  output);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  rhs,  output);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariableDef(cfgNode,  rhs,  output);	  if(!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
55	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeFunction(cfgNode,  rhs,  output);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  aughtExceptionHandler.handleMustBeFunction(cfgNode,  rhs,  output);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeFunction(cfgNode,  rhs,  output);	  if(!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
56	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(cfgNode,  output);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  aughtExceptionHandler.handleMissingDependency(cfgNode,  output);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMissingDependency(cfgNode,  output);	  if(!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
57	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild())  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getFirstChild())  {  throw  new  IllegalStateException( " ");  }	  if(n.hasChildren())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
58	[BUG]  [BUGGY]  Node  aNode  =  n.getFirstChild().getNext();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Node  aNode  =  n.getFirstChild().getNext();  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getFirstChild().getNext();	  Node    aNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
59	[BUG]  [BUGGY]  Node  aNode  =  n.getAncestor(2);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Node  aNode  =  n.getAncestor(2);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getAncestor(2);	  Node    aNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
60	[BUG]  [BUGGY]  Node  aNode  =  output.getFirstChild();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Node  aNode  =  output.getFirstChild();  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  output.getFirstChild();	  Node    aNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
61	[BUG]  [BUGGY]  if(n.hasChildren()  ||  c.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  if(n.hasChildren()  ||  c.hasChildren())  {  return;  }  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren()  ||  c.hasChildren())  {  return;  }	  if(n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
62	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  return;  }  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(n.hasChildren()  ||  n.hasChildren())  {  return;  }	  if(n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Preconditions.checkState(n.hasChildren());  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Preconditions.checkState(n.hasChildren());	  if(n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
64	[BUG]  [BUGGY]  if(conditional)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  if(conditional)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  throw  new  IllegalStateException( " ");  }	  if(!conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
65	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output);	  if(!conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
66	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  conditional)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  conditional)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	NodeUtil.isFunctionDeclaration(n)||  conditional)  {  throw  new  IllegalStateException( " ");  }	  if(!conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
67	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equalsIgnoreCase(lhs.getString()));  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  throw  new  IllegalArgumentException( " ".equalsIgnoreCase(lhs.getString()));  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	throw  new  IllegalArgumentException( " ".equalsIgnoreCase(lhs.getString()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
68	[BUG]  [BUGGY]  if(c  ==  null  ||  c.hasChildren())  {  return;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  if(c  ==  null  ||  c.hasChildren())  {  return;  }  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c  ==  null  ||  c.hasChildren())  {  return;  }	  if(c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
69	[BUG]  [BUGGY]  if(c.hasChildren()  ||  c.hasOneChild())  {  return;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  if(c.hasChildren()  ||  c.hasOneChild())  {  return;  }  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(c.hasChildren()  ||  c.hasOneChild())  {  return;  }	  if(c.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
70	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  conditional);	  if(c.hasChildren())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
71	[BUG]  [BUGGY]  if(conditional)  {  return;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  if(conditional)  {  return;  }  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  return;  }	  if(!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
72	[BUG]  [BUGGY]  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);	  if(!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
73	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output);	  if(!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
74	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariableDef(n,  output,  conditional);	  if(!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
75	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  conditional);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  conditional);	  if(!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
76	[BUG]  [BUGGY]  if(!conditional)  {  throw  new  IllegalStateException( " ".equals(lhs.getString()));  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  if(!conditional)  {  throw  new  IllegalStateException( " ".equals(lhs.getString()));  }  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(!conditional)  {  throw  new  IllegalStateException( " ".equals(lhs.getString()));  }	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
77	[BUG]  [BUGGY]  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  new  IllegalStateException( " ");  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
78	[BUG]  [BUGGY]  n.removeChild(aNode);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  n.removeChild(aNode);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.removeChild(aNode);	  n.removeChild(cfgNode);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
79	[BUG]  [BUGGY]  n.removeChild(p);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  n.removeChild(p);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.removeChild(p);	  n.removeChild(cfgNode);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
80	[BUG]  [BUGGY]  if(conditional)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  if(conditional)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	if(conditional)  {  throw  new  IllegalArgumentException( " ");  }	  if(!conditional)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
81	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getFirstChild())  {  throw  new  IllegalArgumentException( " ");  }	  if(!conditional)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
82	[BUG]  [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
83	[BUG]  [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
84	[BUG]  [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
85	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
86	[BUG]  [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
87	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
88	[BUG]  [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
89	[BUG]  [BUGGY]  n.removeChild(fnNode);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  n.removeChild(fnNode);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	n.removeChild(fnNode);	  n.removeChild(cfgNode);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
90	[BUG]  [BUGGY]  reportError( "msg.undef.unknown.type ");  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  reportError( "msg.undef.unknown.type ");  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	reportError( "msg.undef.unknown.type ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
91	[BUG]  [BUGGY]  reportError( "msg.undef.unknown.class ");  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  reportError( "msg.undef.unknown.class ");  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	reportError( "msg.undef.unknown.class ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
92	[BUG]  [BUGGY]  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	  if(n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
93	[BUG]  [BUGGY]  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);	  if(n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
94	[BUG]  [BUGGY]  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	  if(n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
95	[BUG]  [BUGGY]  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	  if(n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
96	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);	  if(n.hasChildren())    {    return;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
97	[BUG]  [BUGGY]  Node  aNode  =  n.getOwnerChild();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Node  aNode  =  n.getOwnerChild();  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Node  aNode  =  n.getOwnerChild();	  Node    aNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
98	[BUG]  [BUGGY]  parent  ==  null  ||!conditional)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  parent  ==  null  ||!conditional)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	parent  ==  null  ||!conditional)  {  throw  new  IllegalStateException( " ");  }	  if(!conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
99	[BUG]  [BUGGY]  aughtException( " ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  aughtException( " ");  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtException( " ");	  if(!conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
100	[BUG]  [BUGGY]  allowMustBeReaching(conditional)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  allowMustBeReaching(conditional)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReaching(conditional)  {  throw  new  IllegalStateException( " ");  }	  if(!conditional)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
101	[BUG]  [BUGGY]  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);	  if(c.hasChildren())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
102	[BUG]  [BUGGY]  Context.checkState(c.hasChildren());  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  Context.checkState(c.hasChildren());  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	Context.checkState(c.hasChildren());	  if(c.hasChildren())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
103	[BUG]  [BUGGY]  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);	  if(!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
104	[BUG]  [BUGGY]  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);	  if(!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
105	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output);	  if(!conditional)    {    return;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
106	[BUG]  [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  break;	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
107	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
108	[BUG]  [BUGGY]  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	  if(n.hasChildren())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
109	[BUG]  [BUGGY]  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);	  if(n.hasChildren())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
110	[BUG]  [BUGGY]  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	  if(n.hasChildren())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
111	[BUG]  [BUGGY]  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);	  if(n.hasChildren())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
112	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	  if(n.hasChildren())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
113	[BUG]  [BUGGY]  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	tryMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  false);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	  if(n.hasChildren())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
114	[BUG]  [BUGGY]  parent  ==  null  ||!conditional)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  parent  ==  null  ||!conditional)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	parent  ==  null  ||!conditional)  {  throw  new  IllegalArgumentException( " ");  }	  if(!conditional)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
115	[BUG]  [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);    [BUGGY]  allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	260	260	3	replace	allowMustBeReachingVariableDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	  if(c.hasChildren())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
