bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
2	[BUG]  [BUGGY]  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
3	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
4	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
5	[BUG]  [BUGGY]  cfgNode.setString(conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  cfgNode.setString(conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode.setString(conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
6	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
7	[BUG]  [BUGGY]  Node  cfgNode  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  Node  cfgNode  =  c.getFirstChild();  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  cfgNode  =  c.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
8	[BUG]  [BUGGY]  Node  c  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  Node  c  =  c.getFirstChild();  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  c  =  c.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
9	[BUG]  [BUGGY]  Node  cfgNode  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  Node  cfgNode  =  c.getLastChild();  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  cfgNode  =  c.getLastChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
10	[BUG]  [BUGGY]  Node  cfgNode  =  c.getNext();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  Node  cfgNode  =  c.getNext();  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  cfgNode  =  c.getNext();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
11	[BUG]  [BUGGY]  Node  c  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  Node  c  =  c.getLastChild();  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  c  =  c.getLastChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
12	[BUG]  [BUGGY]  cfgNode  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  cfgNode  =  c.getFirstChild();  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode  =  c.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
13	[BUG]  [BUGGY]  Node  cfgNode  =  c.next();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  Node  cfgNode  =  c.next();  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  cfgNode  =  c.next();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
14	[BUG]  [BUGGY]  Compiler  compiler  =  c.getCompiler();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  Compiler  compiler  =  c.getCompiler();  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Compiler  compiler  =  c.getCompiler();	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
15	[BUG]  [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
16	[BUG]  [BUGGY]  c  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  c  =  c.getLastChild();  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	c  =  c.getLastChild();	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
17	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  false);	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
18	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
19	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name);	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
20	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
21	[BUG]  [BUGGY]  allowMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  allowMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	allowMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
22	[BUG]  [BUGGY]  tryMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  tryMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
23	[BUG]  [BUGGY]  allowMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  allowMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	allowMustDef(n.getLastChild(),  cfgNode,  output,  conditional);	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
24	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
25	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
26	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext());  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext());	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
27	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  false);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getLastChild(),  cfgNode,  output,  false);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
28	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  true);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getLastChild(),  cfgNode,  output,  true);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
29	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  name);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  name);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  name);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
30	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  n,  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  computeMustDef(c.getLastChild(),  n,  cfgNode,  output,  conditional);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getLastChild(),  n,  cfgNode,  output,  conditional);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
31	[BUG]  [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);	  computeMustDef(c.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
32	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);	  computeMustDef(c.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
33	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);	  computeMustDef(c.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
34	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  false);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  false);	  computeMustDef(c.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
35	[BUG]  [BUGGY]  allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
36	[BUG]  [BUGGY]  allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
37	[BUG]  [BUGGY]  allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
38	[BUG]  [BUGGY]  allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild());  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild());	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  Preconditions.checkState(c.hasChildren());  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Preconditions.checkState(c.hasChildren());	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
40	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
41	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
42	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  true);  }	  computeMustDef(c.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
43	[BUG]  [BUGGY]  Node  c  =  c.getNext();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  Node  c  =  c.getNext();  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  c  =  c.getNext();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
44	[BUG]  [BUGGY]  Node  aNode  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  Node  aNode  =  c.getFirstChild();  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  aNode  =  c.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
45	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
46	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
47	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(c.getString(),  conditional?  null  :  c  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(c.getString(),  conditional?  null  :  c  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(c.getString(),  conditional?  null  :  c	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
48	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(c.getString(),  conditional?  null  :  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(c.getString(),  conditional?  null  :  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(c.getString(),  conditional?  null  :	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
49	[BUG]  [BUGGY]  computeMustDef(c.getNext(),  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  computeMustDef(c.getNext(),  cfgNode,  output,  false);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getNext(),  cfgNode,  output,  false);	  computeMustDef(c.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
50	[BUG]  [BUGGY]  cast(c.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  cast(c.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cast(c.getFirstChild(),  cfgNode,  output,  conditional);	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
51	[BUG]  [BUGGY]  cast(c.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  cast(c.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cast(c.getLastChild(),  cfgNode,  output,  conditional);	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
52	[BUG]  [BUGGY]  castDef(c.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  castDef(c.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	castDef(c.getFirstChild(),  cfgNode,  output,  conditional);	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
53	[BUG]  [BUGGY]  allowMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  allowMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	allowMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
54	[BUG]  [BUGGY]  Context.checkState(c.hasChildren());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  Context.checkState(c.hasChildren());  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Context.checkState(c.hasChildren());	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
55	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild()  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild()  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild()	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
56	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild()  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild()	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
57	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
58	[BUG]  [BUGGY]  c  =  c.getNext();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  c  =  c.getNext();  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	c  =  c.getNext();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
59	[BUG]  [BUGGY]  declareMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  declareMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	declareMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
60	[BUG]  [BUGGY]  computeMustDef(c.getFirstChild(),  cfgNode,  output,  null);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  computeMustDef(c.getFirstChild(),  cfgNode,  output,  null);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getFirstChild(),  cfgNode,  output,  null);	  computeMustDef(c.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
61	[BUG]  [BUGGY]  computeMustDef(c,  n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  computeMustDef(c,  n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c,  n.getLastChild(),  cfgNode,  output,  conditional);	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
62	[BUG]  [BUGGY]  declareMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  declareMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	declareMustDef(c.getLastChild(),  cfgNode,  output,  conditional);	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
63	[BUG]  [BUGGY]  computeMustDef(c.getfirstChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {    [BUGGY]  computeMustDef(c.getfirstChild(),  cfgNode,  output,  conditional);  [BUGGY]    addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getfirstChild(),  cfgNode,  output,  conditional);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
