bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  c  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  c  =  c.getFirstChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	c  =  c.getFirstChild();	  c    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
2	[BUG]  [BUGGY]  c  =  c.getNext()  ||  c.hasChildren();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  c  =  c.getNext()  ||  c.hasChildren();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	c  =  c.getNext()  ||  c.hasChildren();	  c    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
3	[BUG]  [BUGGY]  c  =  c.getParent();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  c  =  c.getParent();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	c  =  c.getParent();	  c    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
4	[BUG]  [BUGGY]  c  =  c.getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  c  =  c.getCurrentNode();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	c  =  c.getCurrentNode();	  c    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
5	[BUG]  [BUGGY]  tryMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryMustDef(c.getLastChild(),  cfgNode,  output,  conditional);	  tryMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
6	[BUG]  [BUGGY]  tryMustDef(c.getFirstChild(),  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryMustDef(c.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryMustDef(c.getFirstChild(),  cfgNode,  output,  false);	  tryMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
7	[BUG]  [BUGGY]  tryMustDef(c.getFirstChild(),  cfgNode,  output,  conditional,  name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryMustDef(c.getFirstChild(),  cfgNode,  output,  conditional,  name);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryMustDef(c.getFirstChild(),  cfgNode,  output,  conditional,  name);	  tryMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
8	[BUG]  [BUGGY]  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);	  tryMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
9	[BUG]  [BUGGY]  tryMustDef(c.getFirstChild(),  cfgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryMustDef(c.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryMustDef(c.getFirstChild(),  cfgNode,  output,  true);	  tryMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
10	[BUG]  [BUGGY]  tryMustDef(c.getFirstChild(),  n,  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryMustDef(c.getFirstChild(),  n,  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryMustDef(c.getFirstChild(),  n,  cfgNode,  output,  conditional);	  tryMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
11	[BUG]  [BUGGY]  Node  cfgNode  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  cfgNode  =  n.getLastChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  cfgNode  =  n.getLastChild();	  Node    cfgNode    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
12	[BUG]  [BUGGY]  Node  cfgNode  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  cfgNode  =  n.getFirstChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  cfgNode  =  n.getFirstChild();	  Node    cfgNode    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
13	[BUG]  [BUGGY]  Node  cfgNode  =  c.getfirstChild();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  cfgNode  =  c.getfirstChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  cfgNode  =  c.getfirstChild();	  Node    cfgNode    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
14	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
15	[BUG]  [BUGGY]  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
16	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getParent(),  output);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getParent(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getParent(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
17	[BUG]  [BUGGY]  Node  aNode  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  aNode  =  c.getLastChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  aNode  =  c.getLastChild();	  Node    aNode    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
18	[BUG]  [BUGGY]  Node  aNode  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  aNode  =  n.getFirstChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  aNode  =  n.getFirstChild();	  Node    aNode    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
19	[BUG]  [BUGGY]  Node  aNode  =  c.getNext();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  aNode  =  c.getNext();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  aNode  =  c.getNext();	  Node    aNode    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
20	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  null);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  null);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getLastChild(),  cfgNode,  output,  null);	  computeMustDef(c.getFirstChild(),    cfgNode,    output,    null);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
21	[BUG]  [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);	  computeMustDef(c.getFirstChild(),    cfgNode,    output,    null);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
22	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  null);	  computeMustDef(c.getFirstChild(),    cfgNode,    output,    null);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
23	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output,  true);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output,  true);	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
24	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild());  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild());	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
25	[BUG]  [BUGGY]  Node  cfgNode  =  c.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  cfgNode  =  c.removeFirstChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  cfgNode  =  c.removeFirstChild();	  Node    cfgNode    =    c.next();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
26	[BUG]  [BUGGY]  Node  cfgNode  =  c.nextToken();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  cfgNode  =  c.nextToken();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  cfgNode  =  c.nextToken();	  Node    cfgNode    =    c.next();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
27	[BUG]  [BUGGY]  Node  cfgNode  =  c.nextChild();  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  cfgNode  =  c.nextChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  cfgNode  =  c.nextChild();	  Node    cfgNode    =    c.next();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
28	[BUG]  [BUGGY]  allowMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  allowMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	allowMustDef(c.getLastChild(),  cfgNode,  output,  conditional);	  allowMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
29	[BUG]  [BUGGY]  enableMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  enableMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	enableMustDef(c.getLastChild(),  cfgNode,  output,  conditional);	  allowMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
30	[BUG]  [BUGGY]  AllowMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  AllowMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	AllowMustDef(c.getLastChild(),  cfgNode,  output,  conditional);	  allowMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
31	[BUG]  [BUGGY]  enableMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  enableMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	enableMustDef(n.getLastChild(),  cfgNode,  output,  conditional);	  allowMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
32	[BUG]  [BUGGY]  Constructor  <  Node>  cfgNode  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Constructor  <  Node>  cfgNode  =  n.getFirstChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Constructor  <  Node>  cfgNode  =  n.getFirstChild();	  if(c.hasChildren())    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(c.getString(),    conditional?    null    :    c    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
33	[BUG]  [BUGGY]  Constructor  <  Node>  c  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Constructor  <  Node>  c  =  n.getFirstChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Constructor  <  Node>  c  =  n.getFirstChild();	  if(c.hasChildren())    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(c.getString(),    conditional?    null    :    c    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
34	[BUG]  [BUGGY]  Constructor  <  Node>  cfgNode  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Constructor  <  Node>  cfgNode  =  n.getLastChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Constructor  <  Node>  cfgNode  =  n.getLastChild();	  if(c.hasChildren())    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(c.getString(),    conditional?    null    :    c    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
35	[BUG]  [BUGGY]  Conditional  c  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Conditional  c  =  n.getFirstChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Conditional  c  =  n.getFirstChild();	  if(c.hasChildren())    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(c.getString(),    conditional?    null    :    c    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
36	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getLastChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getLastChild(),  output);	  tryToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
37	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  tryToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
38	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output));  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output));	  tryToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
39	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild());  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild());	  tryToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
40	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getParent());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getParent());  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getParent());	  tryToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
41	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);	  tryToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
42	[BUG]  [BUGGY]  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
43	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
44	[BUG]  [BUGGY]  cfgNode.setString(conditional?  null  :  cfgNode,  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cfgNode.setString(conditional?  null  :  cfgNode,  c.getFirstChild());  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode.setString(conditional?  null  :  cfgNode,  c.getFirstChild());	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
45	[BUG]  [BUGGY]  Node  cfgNode  =  c.getParent();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  cfgNode  =  c.getParent();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  cfgNode  =  c.getParent();	  Node    cfgNode    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
46	[BUG]  [BUGGY]  Node  cfgNode  =  c.getFunction();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  cfgNode  =  c.getFunction();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  cfgNode  =  c.getFunction();	  Node    cfgNode    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
47	[BUG]  [BUGGY]  Node  cfgNode  =  c.getString();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  cfgNode  =  c.getString();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  cfgNode  =  c.getString();	  Node    cfgNode    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
48	[BUG]  [BUGGY]  Node  cfgNode  =  c.getChildCount();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  cfgNode  =  c.getChildCount();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  cfgNode  =  c.getChildCount();	  Node    cfgNode    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
49	[BUG]  [BUGGY]  computeMustDef(c.getNext(),  cfgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getNext(),  cfgNode,  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getNext(),  cfgNode,  output,  true);	  computeMustDef(c.getNext(),    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
50	[BUG]  [BUGGY]  computeMustDef(c.getParent(),  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getParent(),  cfgNode,  output,  false);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getParent(),  cfgNode,  output,  false);	  computeMustDef(c.getNext(),    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
51	[BUG]  [BUGGY]  computeMustDef(c.getPrevious(),  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getPrevious(),  cfgNode,  output,  false);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getPrevious(),  cfgNode,  output,  false);	  computeMustDef(c.getNext(),    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
52	[BUG]  [BUGGY]  computeMustDef(n.getNext(),  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(n.getNext(),  cfgNode,  output,  false);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(n.getNext(),  cfgNode,  output,  false);	  computeMustDef(c.getNext(),    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
53	[BUG]  [BUGGY]  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional,  name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional,  name);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional,  name);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    conditional,    name);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
54	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  name,  name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  name,  name);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  name,  name);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    conditional,    name);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
55	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  name,  n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  name,  n);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  name,  n);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    conditional,    name);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
56	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  name,  target);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  name,  target);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  name,  target);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    conditional,    name);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
57	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  name,  parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  name,  parent);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  name,  parent);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    conditional,    name);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
58	[BUG]  [BUGGY]  Context.checkState(c.hasChildren()  ||  c.hasChildren());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Context.checkState(c.hasChildren()  ||  c.hasChildren());  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Context.checkState(c.hasChildren()  ||  c.hasChildren());	  Context.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
59	[BUG]  [BUGGY]  Context.checkState(c.hasChildren()  &&  c.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Context.checkState(c.hasChildren()  &&  c.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Context.checkState(c.hasChildren()  &&  c.getFirstChild().getType()  ==  Token.FUNCTION);	  Context.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
60	[BUG]  [BUGGY]  Context.checkState(c.hasChildren()  &&  c.hasChildren());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Context.checkState(c.hasChildren()  &&  c.hasChildren());  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Context.checkState(c.hasChildren()  &&  c.hasChildren());	  Context.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
61	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.hasChildren());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.hasChildren());  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.hasChildren());	  Context.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
62	[BUG]  [BUGGY]  Context.checkState(c.hasChildren()  &&  c.getFirstChild().getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Context.checkState(c.hasChildren()  &&  c.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Context.checkState(c.hasChildren()  &&  c.getFirstChild().getType()  ==  Token.VAR);	  Context.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
63	[BUG]  [BUGGY]  Context.checkState(c.hasChildren()  &&  c.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Context.checkState(c.hasChildren()  &&  c.getType()  ==  Token.FUNCTION);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Context.checkState(c.hasChildren()  &&  c.getType()  ==  Token.FUNCTION);	  Context.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
64	[BUG]  [BUGGY]  Compiler  compiler  =  c.getCompiler(n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Compiler  compiler  =  c.getCompiler(n);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Compiler  compiler  =  c.getCompiler(n);	  Compiler    compiler    =    c.getCompiler();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
65	[BUG]  [BUGGY]  Compiler  compiler  =  c.getCompilerInstance();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Compiler  compiler  =  c.getCompilerInstance();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Compiler  compiler  =  c.getCompilerInstance();	  Compiler    compiler    =    c.getCompiler();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
66	[BUG]  [BUGGY]  Compiler  compiler  =  c.getCompilerConfig();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Compiler  compiler  =  c.getCompilerConfig();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Compiler  compiler  =  c.getCompilerConfig();	  Compiler    compiler    =    c.getCompiler();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
67	[BUG]  [BUGGY]  Compiler  compiler  =  c.getCompilerInput();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Compiler  compiler  =  c.getCompilerInput();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Compiler  compiler  =  c.getCompilerInput();	  Compiler    compiler    =    c.getCompiler();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
68	[BUG]  [BUGGY]  Compiler  compiler  =  c.getCompiler(conditional);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Compiler  compiler  =  c.getCompiler(conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Compiler  compiler  =  c.getCompiler(conditional);	  Compiler    compiler    =    c.getCompiler();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
69	[BUG]  [BUGGY]  Compiler  compiler  =  c.getCompilerForNode(n);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Compiler  compiler  =  c.getCompilerForNode(n);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Compiler  compiler  =  c.getCompilerForNode(n);	  Compiler    compiler    =    c.getCompiler();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
70	[BUG]  [BUGGY]  enableMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  enableMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	enableMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);	  allowMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
71	[BUG]  [BUGGY]  allowMustDef(c.getFirstChild(),  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  allowMustDef(c.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	allowMustDef(c.getFirstChild(),  cfgNode,  output,  false);	  allowMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
72	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  true);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
73	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  false);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  false);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  false);  }	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
74	[BUG]  [BUGGY]  c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  true);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
75	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cFgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cFgNode,  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cFgNode,  output,  true);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
76	[BUG]  [BUGGY]  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  false);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  false);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
77	[BUG]  [BUGGY]  Constructor  <  Node>  c  =  c.getConstructor();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Constructor  <  Node>  c  =  c.getConstructor();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Constructor  <  Node>  c  =  c.getConstructor();	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
78	[BUG]  [BUGGY]  Node  escaped  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  escaped  =  c.getFirstChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  escaped  =  c.getFirstChild();	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
79	[BUG]  [BUGGY]  cfgNode  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cfgNode  =  c.getLastChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode  =  c.getLastChild();	  cfgNode    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
80	[BUG]  [BUGGY]  cfgNode  =  c.getNext();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cfgNode  =  c.getNext();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode  =  c.getNext();	  cfgNode    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
81	[BUG]  [BUGGY]  cfgNode  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cfgNode  =  n.getFirstChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode  =  n.getFirstChild();	  cfgNode    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
82	[BUG]  [BUGGY]  enableMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  enableMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	enableMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  allowMustDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
83	[BUG]  [BUGGY]  enableMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  enableMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	enableMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  allowMustDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
84	[BUG]  [BUGGY]  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  cfgNode.addChildToFront(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
85	[BUG]  [BUGGY]  if(c.hasChildren())  {  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  cfgNode.addChildToFront(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
86	[BUG]  [BUGGY]  if(c.hasChildren())  {  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }	  cfgNode.addChildToFront(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
87	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  false,  conditional);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  false,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getLastChild(),  cfgNode,  output,  false,  conditional);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
88	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
89	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
90	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastCh  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastCh  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastCh	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
91	[BUG]  [BUGGY]  Node  c  =  c.getParent();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  c  =  c.getParent();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  c  =  c.getParent();	  Node    c    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
92	[BUG]  [BUGGY]  Node  c  =  c.getNext()  ||  c.hasChildren();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  c  =  c.getNext()  ||  c.hasChildren();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  c  =  c.getNext()  ||  c.hasChildren();	  Node    c    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
93	[BUG]  [BUGGY]  Node  c  =  c.getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  c  =  c.getCurrentNode();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  c  =  c.getCurrentNode();	  Node    c    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
94	[BUG]  [BUGGY]  Node  c  =  c.next();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  c  =  c.next();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  c  =  c.next();	  Node    c    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
95	[BUG]  [BUGGY]  castToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  castToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	castToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  cast(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
96	[BUG]  [BUGGY]  cast(c.getFirstChild(),  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cast(c.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cast(c.getFirstChild(),  cfgNode,  output,  false);	  cast(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
97	[BUG]  [BUGGY]  cast(c.getFirstChild(),  cfgNode,  output,  conditional,  name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cast(c.getFirstChild(),  cfgNode,  output,  conditional,  name);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cast(c.getFirstChild(),  cfgNode,  output,  conditional,  name);	  cast(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
98	[BUG]  [BUGGY]  declareMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  declareMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	declareMustDef(n.getLastChild(),  cfgNode,  output,  conditional);	  declareMustDef(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
99	[BUG]  [BUGGY]  declareMustDef(c.getLastChild(),  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  declareMustDef(c.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	declareMustDef(c.getLastChild(),  cfgNode,  output,  false);	  declareMustDef(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
100	[BUG]  [BUGGY]  declareMustDef(c.getLastChild(),  cfgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  declareMustDef(c.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	declareMustDef(c.getLastChild(),  cfgNode,  output,  true);	  declareMustDef(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
101	[BUG]  [BUGGY]  declareMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  name);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  declareMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  name);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	declareMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  name);	  declareMustDef(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
102	[BUG]  [BUGGY]  declareMustDef(c.getLastChild(),  n,  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  declareMustDef(c.getLastChild(),  n,  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	declareMustDef(c.getLastChild(),  n,  cfgNode,  output,  conditional);	  declareMustDef(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
103	[BUG]  [BUGGY]  c  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  c  =  n.getLastChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	c  =  n.getLastChild();	  c    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
104	[BUG]  [BUGGY]  c  =  c.getLastChild()  +  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  c  =  c.getLastChild()  +  1;  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	c  =  c.getLastChild()  +  1;	  c    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
105	[BUG]  [BUGGY]  Node  cfgNode  =  c.getPreviousChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  cfgNode  =  c.getPreviousChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  cfgNode  =  c.getPreviousChild();	  Node    cfgNode    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren()  ||  c.hasChildren());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Preconditions.checkState(c.hasChildren()  ||  c.hasChildren());  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Preconditions.checkState(c.hasChildren()  ||  c.hasChildren());	  Preconditions.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  c.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  c.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Preconditions.checkState(c.hasChildren()  &&  c.getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  c.getFirstChild().getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  c.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Preconditions.checkState(c.hasChildren()  &&  c.getFirstChild().getType()  ==  Token.VAR);	  Preconditions.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  c.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  c.getType()  ==  Token.FUNCTION);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Preconditions.checkState(c.hasChildren()  &&  c.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.hasChildren());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.hasChildren());  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.hasChildren());	  Preconditions.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  c.hasChildren());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  c.hasChildren());  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Preconditions.checkState(c.hasChildren()  &&  c.hasChildren());	  Preconditions.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
112	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
113	[BUG]  [BUGGY]  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
114	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output,  true);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output,  true);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
115	[BUG]  [BUGGY]  cfgNode.setString(conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cfgNode.setString(conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode.setString(conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
116	[BUG]  [BUGGY]  Constructor  <  Node>  cfgNode  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Constructor  <  Node>  cfgNode  =  c.getFirstChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Constructor  <  Node>  cfgNode  =  c.getFirstChild();	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
117	[BUG]  [BUGGY]  Constructor  <  Node>  cfgNode  =  c.getConstructor();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Constructor  <  Node>  cfgNode  =  c.getConstructor();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Constructor  <  Node>  cfgNode  =  c.getConstructor();	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
118	[BUG]  [BUGGY]  castDef(c.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  castDef(c.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	castDef(c.getLastChild(),  cfgNode,  output,  conditional);	  castDef(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
119	[BUG]  [BUGGY]  castDef(c.getFirstChild(),  cfgNode,  output,  conditional,  name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  castDef(c.getFirstChild(),  cfgNode,  output,  conditional,  name);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	castDef(c.getFirstChild(),  cfgNode,  output,  conditional,  name);	  castDef(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
120	[BUG]  [BUGGY]  castDef(c.getFirstChild(),  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  castDef(c.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	castDef(c.getFirstChild(),  cfgNode,  output,  false);	  castDef(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
121	[BUG]  [BUGGY]  setDef(c.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  setDef(c.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	setDef(c.getFirstChild(),  cfgNode,  output,  conditional);	  castDef(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
122	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
123	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
124	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
125	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getFirstChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getFirstChild(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
126	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getType(),  output);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getType(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getType(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
127	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  name,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  name,  c.getFirstChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  name,  c.getFirstChild(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
128	[BUG]  [BUGGY]  enableMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  enableMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	enableMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());	  allowMustDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
129	[BUG]  [BUGGY]  enableMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  enableMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild());  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	enableMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild());	  allowMustDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
130	[BUG]  [BUGGY]  tryMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
131	[BUG]  [BUGGY]  tryMustDef(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryMustDef(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryMustDef(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
132	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
133	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
134	[BUG]  [BUGGY]  cfgNode.setString(conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cfgNode.setString(conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode.setString(conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
135	[BUG]  [BUGGY]  declareMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  declareMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	declareMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);	  declareMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
136	[BUG]  [BUGGY]  declareMustDef(c.getFirstChild(),  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  declareMustDef(c.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	declareMustDef(c.getFirstChild(),  cfgNode,  output,  false);	  declareMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
137	[BUG]  [BUGGY]  declareMustDef(c.getFirstChild(),  cfgNode,  output,  conditional,  name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  declareMustDef(c.getFirstChild(),  cfgNode,  output,  conditional,  name);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	declareMustDef(c.getFirstChild(),  cfgNode,  output,  conditional,  name);	  declareMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
138	[BUG]  [BUGGY]  declareMustDef(c.getFirstChild(),  cfgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  declareMustDef(c.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	declareMustDef(c.getFirstChild(),  cfgNode,  output,  true);	  declareMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
139	[BUG]  [BUGGY]  declareMustDef(c.getFirstChild(),  n,  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  declareMustDef(c.getFirstChild(),  n,  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	declareMustDef(c.getFirstChild(),  n,  cfgNode,  output,  conditional);	  declareMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
140	[BUG]  [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional,  name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional,  name);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional,  name);	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional,    name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
141	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name,  c);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name,  c);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name,  c);	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional,    name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
142	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name,  name);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name,  name);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name,  name);	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional,    name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
143	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name,  target);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name,  target);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name,  target);	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional,    name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
144	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output,  false);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output,  false);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output,  false);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
145	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
146	[BUG]  [BUGGY]  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
147	[BUG]  [BUGGY]  cfgNode.setString(conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cfgNode.setString(conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode.setString(conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
148	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  output?  null  :  cfgNode,  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryToDefIfLocal(c.getString(),  output?  null  :  cfgNode,  c.getFirstChild());  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  output?  null  :  cfgNode,  c.getFirstChild());	  tryToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
149	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount());  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount());	  tryToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
150	[BUG]  [BUGGY]  cfgNode.setString(c?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cfgNode.setString(c?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode.setString(c?  null  :  cfgNode,  c.getFirstChild(),  output);	  cfgNode.setString(conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
151	[BUG]  [BUGGY]  cfgNode.setString(c?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cfgNode.setString(c?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode.setString(c?  null  :  cfgNode,  c.getLastChild(),  output);	  cfgNode.setString(conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
152	[BUG]  [BUGGY]  cfgNode.setString(c,  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cfgNode.setString(c,  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode.setString(c,  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  cfgNode.setString(conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
153	[BUG]  [BUGGY]  cfgNode.setString(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cfgNode.setString(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode.setString(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  cfgNode.setString(conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
154	[BUG]  [BUGGY]  cfgNode.setString(n?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cfgNode.setString(n?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode.setString(n?  null  :  cfgNode,  c.getFirstChild(),  output);	  cfgNode.setString(conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
155	[BUG]  [BUGGY]  AllowMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  AllowMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	AllowMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
156	[BUG]  [BUGGY]  computeMustDef(c,  n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c,  n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c,  n.getFirstChild(),  cfgNode,  output,  conditional);	  computeMustDef(c,    n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
157	[BUG]  [BUGGY]  computeMustDef(c,  n.getLastChild(),  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c,  n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c,  n.getLastChild(),  cfgNode,  output,  false);	  computeMustDef(c,    n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
158	[BUG]  [BUGGY]  computeMustDef(c,  n.getLastChild(),  cfgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c,  n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c,  n.getLastChild(),  cfgNode,  output,  true);	  computeMustDef(c,    n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
159	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);	  tryToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
160	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getType(),  output);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getType(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getType(),  output);	  tryToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
161	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getFirstChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getFirstChild(),  output);	  tryToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
162	[BUG]  [BUGGY]  computeMustDef(c.getFirstChild(),  n,  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getFirstChild(),  n,  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getFirstChild(),  n,  cfgNode,  output,  conditional);	  computeMustDef(c.getLastChild(),    n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
163	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  n,  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getLastChild(),  n,  cfgNode,  output,  false);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getLastChild(),  n,  cfgNode,  output,  false);	  computeMustDef(c.getLastChild(),    n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
164	[BUG]  [BUGGY]  Node  c  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  c  =  n.getLastChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  c  =  n.getLastChild();	  Node    c    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
165	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  c  =  n.getFirstChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  c  =  n.getFirstChild();	  Node    c    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
166	[BUG]  [BUGGY]  Node  c  =  c.getfirstChild();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  c  =  c.getfirstChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  c  =  c.getfirstChild();	  Node    c    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
167	[BUG]  [BUGGY]  Node  c  =  cfgNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  c  =  cfgNode.getFirstChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  c  =  cfgNode.getFirstChild();	  Node    c    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
168	[BUG]  [BUGGY]  Node  c  =  c.getPreviousChild();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  c  =  c.getPreviousChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  c  =  c.getPreviousChild();	  Node    c    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
169	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(c.getString()  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(c.getString()  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(c.getString()	  if(c.hasChildren())    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(c.getString(),    conditional?    null    :    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
170	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c	  if(c.hasChildren())    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(c.getString(),    conditional?    null    :    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
171	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cf  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cf  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cf	  if(c.hasChildren())    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(c.getString(),    conditional?    null    :    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
172	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
173	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output,  true);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output,  true);	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
174	[BUG]  [BUGGY]  forceMustDef(c.getFirstChild(),  cfgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  forceMustDef(c.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	forceMustDef(c.getFirstChild(),  cfgNode,  output,  true);	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
175	[BUG]  [BUGGY]  allowMustDef(c.getFirstChild(),  cfgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  allowMustDef(c.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	allowMustDef(c.getFirstChild(),  cfgNode,  output,  true);	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
176	[BUG]  [BUGGY]  cast(c.getLastChild(),  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cast(c.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cast(c.getLastChild(),  cfgNode,  output,  false);	  cast(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
177	[BUG]  [BUGGY]  cast(c.getLastChild(),  cfgNode,  output,  conditional,  name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cast(c.getLastChild(),  cfgNode,  output,  conditional,  name);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cast(c.getLastChild(),  cfgNode,  output,  conditional,  name);	  cast(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
178	[BUG]  [BUGGY]  cast(c.getLastChild(),  cfgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cast(c.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cast(c.getLastChild(),  cfgNode,  output,  true);	  cast(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkState(conditional.hasChildren());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Preconditions.checkState(conditional.hasChildren());  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Preconditions.checkState(conditional.hasChildren());	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
180	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n,  cfgNode,  output);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n,  cfgNode,  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	aughtExceptionHandler.handleMustBeFunction(n,  cfgNode,  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
181	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);  }	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
182	[BUG]  [BUGGY]  allowMustDefIfLocal(c.getString(),  output?  null  :  cfgNode,  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  allowMustDefIfLocal(c.getString(),  output?  null  :  cfgNode,  c.getFirstChild());  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	allowMustDefIfLocal(c.getString(),  output?  null  :  cfgNode,  c.getFirstChild());	  allowMustDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
183	[BUG]  [BUGGY]  cfgNode.setString(base?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cfgNode.setString(base?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode.setString(base?  null  :  cfgNode,  c.getFirstChild(),  output);	  cfgNode.setString(conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
184	[BUG]  [BUGGY]  cfgNode.setString(conditional?  null  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cfgNode.setString(conditional?  null  :  cfgNode,  c.getNext(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode.setString(conditional?  null  :  cfgNode,  c.getNext(),  output);	  cfgNode.setString(conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
185	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  false);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  false);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  false);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    conditional,    name);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
186	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  true);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  true);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    conditional,    name);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
187	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  aNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  aNode);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  aNode);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    conditional,    name);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
188	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  escaped);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  escaped);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  escaped);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    conditional,    name);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
189	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  if(c.hasChildren())    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(c.getString(),    conditional?    null    :    c    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
190	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(c.hasChildren())    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(c.getString(),    conditional?    null    :    c    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
191	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(c))  {  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(NodeUtil.isAssignmentOp(c))  {  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(NodeUtil.isAssignmentOp(c))  {  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  if(c.hasChildren())    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(c.getString(),    conditional?    null    :    c    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
192	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(c.hasChildren())    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(c.getString(),    conditional?    null    :    c    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
193	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  if(c.hasChildren())    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(c.getString(),    conditional?    null    :    c    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
194	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(NodeUtil.isAssignmentOp(n))  {  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  if(c.hasChildren())    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(c.getString(),    conditional?    null    :    c    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
195	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(NodeUtil.isAssignmentOp(n))  {  if(hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  if(c.hasChildren())    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(c.getString(),    conditional?    null    :    c    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
196	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
197	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
198	[BUG]  [BUGGY]  cfgNode  =  c.getParent();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cfgNode  =  c.getParent();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode  =  c.getParent();	  cfgNode    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
199	[BUG]  [BUGGY]  tryMustDef(c.getNext(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryMustDef(c.getNext(),  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryMustDef(c.getNext(),  cfgNode,  output,  conditional);	  tryMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
200	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);  }	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
201	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional,    name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
202	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name);  }  else  {  addToDefIfLocal(c.getString(),  conditional?  null  :  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name);  }  else  {  addToDefIfLocal(c.getString(),  conditional?  null  :  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name);  }  else  {  addToDefIfLocal(c.getString(),  conditional?  null  :	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional,    name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
203	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name);  }  else  {  compiler.reportCodeChange();  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional,    name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
204	[BUG]  [BUGGY]  allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);	  allowMustDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
205	[BUG]  [BUGGY]  AllowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  AllowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	AllowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  allowMustDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
206	[BUG]  [BUGGY]  Node  c  =  c.getChildren();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  c  =  c.getChildren();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  c  =  c.getChildren();	  Node    c    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
207	[BUG]  [BUGGY]  Node  c  =  c.getChildCount();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  c  =  c.getChildCount();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  c  =  c.getChildCount();	  Node    c    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
208	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  n,  cfgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getLastChild(),  n,  cfgNode,  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getLastChild(),  n,  cfgNode,  output,  true);	  computeMustDef(c.getLastChild(),    n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
209	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());  }	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
210	[BUG]  [BUGGY]  declareMustDef(c.getfirstChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  declareMustDef(c.getfirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	declareMustDef(c.getfirstChild(),  cfgNode,  output,  conditional);	  declareMustDef(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
211	[BUG]  [BUGGY]  if(conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
212	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
213	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  output!=  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  output!=  null);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Preconditions.checkState(c.hasChildren()  &&  output!=  null);	  Preconditions.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
214	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Preconditions.checkState(c.getType()  ==  Token.VAR);	  Preconditions.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren(),  conditional);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Preconditions.checkState(c.hasChildren(),  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Preconditions.checkState(c.hasChildren(),  conditional);	  Preconditions.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
216	[BUG]  [BUGGY]  c  =  c.getNext()  ||  conditional?  null  :  cfgNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  c  =  c.getNext()  ||  conditional?  null  :  cfgNode.getFirstChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	c  =  c.getNext()  ||  conditional?  null  :  cfgNode.getFirstChild();	  c    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
217	[BUG]  [BUGGY]  c  =  c.getNext()  ||  conditional?  null  :  cfgNode.getLastChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  c  =  c.getNext()  ||  conditional?  null  :  cfgNode.getLastChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	c  =  c.getNext()  ||  conditional?  null  :  cfgNode.getLastChild();	  c    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
218	[BUG]  [BUGGY]  computeMustDef(c,  c.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c,  c.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c,  c.getLastChild(),  cfgNode,  output,  conditional);	  computeMustDef(c,    n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
219	[BUG]  [BUGGY]  Compiler  compiler  =  output.getCompiler();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Compiler  compiler  =  output.getCompiler();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Compiler  compiler  =  output.getCompiler();	  Compiler    compiler    =    c.getCompiler();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
220	[BUG]  [BUGGY]  Compiler  compiler  =  c.getProp(Node.SOURCENAME_PROP);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Compiler  compiler  =  c.getProp(Node.SOURCENAME_PROP);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Compiler  compiler  =  c.getProp(Node.SOURCENAME_PROP);	  Compiler    compiler    =    c.getCompiler();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
221	[BUG]  [BUGGY]  Compiler  compiler  =  c.getInitializingCompiler();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Compiler  compiler  =  c.getInitializingCompiler();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Compiler  compiler  =  c.getInitializingCompiler();	  Compiler    compiler    =    c.getCompiler();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
222	[BUG]  [BUGGY]  Compiler  compiler  =  c.getCompiler(compiler);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Compiler  compiler  =  c.getCompiler(compiler);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Compiler  compiler  =  c.getCompiler(compiler);	  Compiler    compiler    =    c.getCompiler();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
223	[BUG]  [BUGGY]  Compiler  compiler  =  c.getJsScope();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Compiler  compiler  =  c.getJsScope();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Compiler  compiler  =  c.getJsScope();	  Compiler    compiler    =    c.getCompiler();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
224	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Context.checkState(c.getType()  ==  Token.FUNCTION);	  Context.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
225	[BUG]  [BUGGY]  Context.checkState(c.hasChildren()  &&  NodeUtil.isAssignmentOp(c));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Context.checkState(c.hasChildren()  &&  NodeUtil.isAssignmentOp(c));  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Context.checkState(c.hasChildren()  &&  NodeUtil.isAssignmentOp(c));	  Context.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
226	[BUG]  [BUGGY]  Context.checkState(c.hasChildren()  &&  NodeUtil.isAssignmentOp(n));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Context.checkState(c.hasChildren()  &&  NodeUtil.isAssignmentOp(n));  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Context.checkState(c.hasChildren()  &&  NodeUtil.isAssignmentOp(n));	  Context.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
227	[BUG]  [BUGGY]  Context.checkState(c.hasChildren()  &&  output!=  null);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Context.checkState(c.hasChildren()  &&  output!=  null);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Context.checkState(c.hasChildren()  &&  output!=  null);	  Context.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
228	[BUG]  [BUGGY]  Context.checkState(c.hasChildren()  &&  output.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Context.checkState(c.hasChildren()  &&  output.getType()  ==  Token.FUNCTION);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Context.checkState(c.hasChildren()  &&  output.getType()  ==  Token.FUNCTION);	  Context.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
229	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	escaped.addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
230	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getLastChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getLastChild(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
231	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getFirstChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getFirstChild(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
232	[BUG]  [BUGGY]  computeMustDef(c.getfirstChild(),  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getfirstChild(),  cfgNode,  output,  false);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getfirstChild(),  cfgNode,  output,  false);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
233	[BUG]  [BUGGY]  Node  c  =  cfgNode.getLastChild();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  c  =  cfgNode.getLastChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  c  =  cfgNode.getLastChild();	  Node    c    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
234	[BUG]  [BUGGY]  computeMustDef(c.getFirstChild(),  cfgNode,  output,  null,  conditional);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getFirstChild(),  cfgNode,  output,  null,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getFirstChild(),  cfgNode,  output,  null,  conditional);	  computeMustDef(c.getFirstChild(),    cfgNode,    output,    null);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
235	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
236	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cf  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cf  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cf	  computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
237	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(c.getString(),  conditional?  null  :  c  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(c.getString(),  conditional?  null  :  c  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(c.getString(),  conditional?  null  :  c	  computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
238	[BUG]  [BUGGY]  forceMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  forceMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	forceMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
239	[BUG]  [BUGGY]  forceMustDef(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  forceMustDef(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	forceMustDef(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
240	[BUG]  [BUGGY]  forceMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  forceMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	forceMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
241	[BUG]  [BUGGY]  forceMustDef(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  forceMustDef(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	forceMustDef(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
242	[BUG]  [BUGGY]  computeMustDef(c.getfirstChild(),  cfgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getfirstChild(),  cfgNode,  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getfirstChild(),  cfgNode,  output,  true);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
243	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange();  }	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
244	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
245	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getFirstChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getFirstChild(),  output);	  tryToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
246	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getfirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getfirstChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getfirstChild(),  output);	  tryToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
247	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getLastChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getLastChild(),  output);	  tryToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
248	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  false);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  false);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  false);  }  else  {  compiler.reportCodeChange();  }	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
249	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  false);  }  else  {  computeMustDef(c.getLastChild()  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  false);  }  else  {  computeMustDef(c.getLastChild()  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  false);  }  else  {  computeMustDef(c.getLastChild()	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
250	[BUG]  [BUGGY]  Node  cfgNode  =  c.getChildren();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  cfgNode  =  c.getChildren();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  cfgNode  =  c.getChildren();	  Node    cfgNode    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
251	[BUG]  [BUGGY]  Node  cfgNode  =  c.getFunctionDeclaration();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  cfgNode  =  c.getFunctionDeclaration();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  cfgNode  =  c.getFunctionDeclaration();	  Node    cfgNode    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
252	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(c.getString()  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(c.getString()  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(c.getString()	  if(c.hasChildren())    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(c.getString(),    conditional?    null    :    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
253	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
254	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  true);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  true);  }	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
255	[BUG]  [BUGGY]  allowMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  allowMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	allowMustDef(n.getLastChild(),  cfgNode,  output,  true);	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
256	[BUG]  [BUGGY]  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getLocalName(),  output);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getLocalName(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getLocalName(),  output);	  cfgNode.addChildToFront(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
257	[BUG]  [BUGGY]  allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  conditional);	  allowMustDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
258	[BUG]  [BUGGY]  permitMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  permitMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	permitMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
259	[BUG]  [BUGGY]  authorizeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  authorizeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	authorizeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
260	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.VAR);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Context.checkState(c.getType()  ==  Token.VAR);	  Context.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
261	[BUG]  [BUGGY]  cast(c.getFirstChild(),  cfgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cast(c.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cast(c.getFirstChild(),  cfgNode,  output,  true);	  cast(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
262	[BUG]  [BUGGY]  castToDef(c.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  castToDef(c.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	castToDef(c.getFirstChild(),  cfgNode,  output,  conditional);	  cast(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
263	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
264	[BUG]  [BUGGY]  if(c.getType()  ==  Token.VAR)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.getType()  ==  Token.VAR)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.getType()  ==  Token.VAR)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
265	[BUG]  [BUGGY]  c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
266	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  true,  conditional);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  true,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getLastChild(),  cfgNode,  output,  true,  conditional);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
267	[BUG]  [BUGGY]  Node  c  =  c.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  c  =  c.removeFirstChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  c  =  c.removeFirstChild();	  Node    c    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
268	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  false);  }  else  {  computeMustDef(c.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  false);  }  else  {  computeMustDef(c.getFirstChild()  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  false);  }  else  {  computeMustDef(c.getFirstChild()	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
269	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  false);  }  else  {  computeMustDef(c.getLastChild  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  false);  }  else  {  computeMustDef(c.getLastChild  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode,  output,  false);  }  else  {  computeMustDef(c.getLastChild	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
270	[BUG]  [BUGGY]  c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
271	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }  else  {  computeMustDef(c.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }  else  {  computeMustDef(c.getFirstChild()  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }  else  {  computeMustDef(c.getFirstChild()	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
272	[BUG]  [BUGGY]  Node  aNode  =  cfgNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  aNode  =  cfgNode.getFirstChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  aNode  =  cfgNode.getFirstChild();	  Node    aNode    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
273	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  output,  conditional);	  castDef(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
274	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
275	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
276	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
277	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
278	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild()  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild()	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
279	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
280	[BUG]  [BUGGY]  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  n.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  n.getFirstChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  n.getFirstChild(),  output);	  cfgNode.addChildToFront(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
281	[BUG]  [BUGGY]  if(c.hasChildren())  {  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild()  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  cfgNode.addChildToFront(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild()	  cfgNode.addChildToFront(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
282	[BUG]  [BUGGY]  Node  cfgNode  =  c.getAncestor(2);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  cfgNode  =  c.getAncestor(2);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  cfgNode  =  c.getAncestor(2);	  Node    cfgNode    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
283	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  cfgNode);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  cfgNode);	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional,    name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
284	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name,  cfgNode);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  name,  cfgNode);	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional,    name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
285	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  aNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  aNode);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  aNode);	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional,    name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
286	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  false);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  false);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional,  false);	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional,    name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
287	[BUG]  [BUGGY]  cast(c.getLastChild(),  cfgNode,  output,  conditional?  Boolean.TRUE  :  Boolean.FALSE);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  cast(c.getLastChild(),  cfgNode,  output,  conditional?  Boolean.TRUE  :  Boolean.FALSE);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	cast(c.getLastChild(),  cfgNode,  output,  conditional?  Boolean.TRUE  :  Boolean.FALSE);	  cast(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
288	[BUG]  [BUGGY]  castToDef(c.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  castToDef(c.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	castToDef(c.getLastChild(),  cfgNode,  output,  conditional);	  cast(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
289	[BUG]  [BUGGY]  allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  output,  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  output,  c.getFirstChild());  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  output,  c.getFirstChild());	  allowMustDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
290	[BUG]  [BUGGY]  allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount());  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount());	  allowMustDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
291	[BUG]  [BUGGY]  computeMustDef(c.getNext(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getNext(),  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getNext(),  cfgNode,  output,  conditional);	  computeMustDef(c.getNext(),    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
292	[BUG]  [BUGGY]  Node  cfgNode  =  c.getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  cfgNode  =  c.getFirstChild().getNext();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  cfgNode  =  c.getFirstChild().getNext();	  Node    cfgNode    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
293	[BUG]  [BUGGY]  Node  c  =  cfgNode.getNext();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  c  =  cfgNode.getNext();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  c  =  cfgNode.getNext();	  Node    c    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
294	[BUG]  [BUGGY]  declareMustDef(c.getFirstChild(),  cfgNode,  output,  conditional?  Boolean.TRUE  :  Boolean.FALSE);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  declareMustDef(c.getFirstChild(),  cfgNode,  output,  conditional?  Boolean.TRUE  :  Boolean.FALSE);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	declareMustDef(c.getFirstChild(),  cfgNode,  output,  conditional?  Boolean.TRUE  :  Boolean.FALSE);	  declareMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
295	[BUG]  [BUGGY]  declareMustDef(c.getFirstChild(),  cfgNode,  output,  conditional  ||  c.hasChildren());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  declareMustDef(c.getFirstChild(),  cfgNode,  output,  conditional  ||  c.hasChildren());  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	declareMustDef(c.getFirstChild(),  cfgNode,  output,  conditional  ||  c.hasChildren());	  declareMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
296	[BUG]  [BUGGY]  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
297	[BUG]  [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryMustDef(n.getLastChild(),  cfgNode,  output,  true);	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
298	[BUG]  [BUGGY]  tryMustDef(c.getFirstChild(),  cfgNode,  output,  conditional,  compiler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryMustDef(c.getFirstChild(),  cfgNode,  output,  conditional,  compiler);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryMustDef(c.getFirstChild(),  cfgNode,  output,  conditional,  compiler);	  tryMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
299	[BUG]  [BUGGY]  tryMustDef(c.getFirstChild(),  cfgNode,  output,  conditional,  true);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryMustDef(c.getFirstChild(),  cfgNode,  output,  conditional,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryMustDef(c.getFirstChild(),  cfgNode,  output,  conditional,  true);	  tryMustDef(c.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
300	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
301	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
302	[BUG]  [BUGGY]  Node  cfgNode  =  c.next().getNext();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  cfgNode  =  c.next().getNext();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  cfgNode  =  c.next().getNext();	  Node    cfgNode    =    c.next();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
303	[BUG]  [BUGGY]  Node  cfgNode  =  c.next().getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Node  cfgNode  =  c.next().getFirstChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Node  cfgNode  =  c.next().getFirstChild();	  Node    cfgNode    =    c.next();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
304	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output,  conditional);	  tryToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
305	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  tryToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
306	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getLastChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getLastChild(),  output);	  tryToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
307	[BUG]  [BUGGY]  declareMustDef(c.getLastChild(),  cfgNode,  output,  conditional  ||  c.hasChildren());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  declareMustDef(c.getLastChild(),  cfgNode,  output,  conditional  ||  c.hasChildren());  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	declareMustDef(c.getLastChild(),  cfgNode,  output,  conditional  ||  c.hasChildren());	  declareMustDef(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
308	[BUG]  [BUGGY]  declareMustDef(c.getLastChild(),  cfgNode,  output,  conditional)&&!conditional;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  declareMustDef(c.getLastChild(),  cfgNode,  output,  conditional)&&!conditional;  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	declareMustDef(c.getLastChild(),  cfgNode,  output,  conditional)&&!conditional;	  declareMustDef(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
309	[BUG]  [BUGGY]  permitMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  permitMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	permitMustDef(c.getLastChild(),  cfgNode,  output,  conditional);	  allowMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
310	[BUG]  [BUGGY]  c  =  cfgNode.getLastChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  c  =  cfgNode.getLastChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	c  =  cfgNode.getLastChild();	  c    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
311	[BUG]  [BUGGY]  c  =  c.getfirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  c  =  c.getfirstChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	c  =  c.getfirstChild();	  c    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
312	[BUG]  [BUGGY]  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional)&&!conditional;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional)&&!conditional;  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional)&&!conditional;	  computeMustDef(c.getfirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
313	[BUG]  [BUGGY]  Compiler  compiler  =  cfgNode.getCompiler();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Compiler  compiler  =  cfgNode.getCompiler();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Compiler  compiler  =  cfgNode.getCompiler();	  Compiler    compiler    =    c.getCompiler();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
314	[BUG]  [BUGGY]  allowMustDef(cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  allowMustDef(cfgNode,  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	allowMustDef(cfgNode,  output,  conditional);	  if(c.hasChildren())    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
315	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeString(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  aughtExceptionHandler.handleMustBeString(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	aughtExceptionHandler.handleMustBeString(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
316	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeString(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  aughtExceptionHandler.handleMustBeString(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	aughtExceptionHandler.handleMustBeString(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
317	[BUG]  [BUGGY]  tryMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
318	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());  }  else  {  computeMustDef(c.getLastChild()  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());  }  else  {  computeMustDef(c.getLastChild()  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild());  }  else  {  computeMustDef(c.getLastChild()	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
319	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);  }  else  {  computeMustDef(n.getLastChild  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);  }  else  {  computeMustDef(n.getLastChild	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
320	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);  }  else  {  computeMustDef(n.getLastChild()	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
321	[BUG]  [BUGGY]  c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
322	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);  }  else  {  computeMustDef(n.getLastChild  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);  }  else  {  computeMustDef(n.getLastChild	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
323	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  false);  }  else  {  computeMustDef(n.getLastChild()	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
324	[BUG]  [BUGGY]  c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  true);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
325	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
326	[BUG]  [BUGGY]  c  =  c.getNext()  ||  conditional?  cfgNode.getType()  ==  Token.FUNCTION  :  cfgNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  c  =  c.getNext()  ||  conditional?  cfgNode.getType()  ==  Token.FUNCTION  :  cfgNode.getFirstChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	c  =  c.getNext()  ||  conditional?  cfgNode.getType()  ==  Token.FUNCTION  :  cfgNode.getFirstChild();	  c    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
327	[BUG]  [BUGGY]  c  =  c.getNext()  ||  conditional?  cfgNode.getType()  ==  Token.VAR  :  cfgNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  c  =  c.getNext()  ||  conditional?  cfgNode.getType()  ==  Token.VAR  :  cfgNode.getFirstChild();  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	c  =  c.getNext()  ||  conditional?  cfgNode.getType()  ==  Token.VAR  :  cfgNode.getFirstChild();	  c    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
328	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  n);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  n);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    conditional,    name);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
329	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  name,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  name,  cfgNode);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  name,  cfgNode);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    conditional,    name);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
330	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  if(c.hasChildren())    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(c.getString(),    conditional?    null    :    c    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
331	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	if(NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(	  if(c.hasChildren())    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(c.getString(),    conditional?    null    :    c    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
332	[BUG]  [BUGGY]  allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	allowMustDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output,  conditional);	  allowMustDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
333	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  conditional);	  tryToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
334	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getQualifiedName(),  output);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getQualifiedName(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getQualifiedName(),  output);	  tryToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
335	[BUG]  [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLeftChild(),  output);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLeftChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	tryToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLeftChild(),  output);	  tryToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
336	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  conditional);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  conditional);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
337	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getQualifiedName(),  output);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getQualifiedName(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getQualifiedName(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
338	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  c.getFirstChild().getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  c.getFirstChild().getType()  ==  Token.CALL);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Preconditions.checkState(c.hasChildren()  &&  c.getFirstChild().getType()  ==  Token.CALL);	  Preconditions.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
339	[BUG]  [BUGGY]  Opcodes.IASTORE_DEFINE_WARNING,  cfgNode.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Opcodes.IASTORE_DEFINE_WARNING,  cfgNode.getFirstChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Opcodes.IASTORE_DEFINE_WARNING,  cfgNode.getFirstChild(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
340	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(n,  cfgNode,  output);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  aughtExceptionHandler.handleMissingDependency(n,  cfgNode,  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	aughtExceptionHandler.handleMissingDependency(n,  cfgNode,  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
341	[BUG]  [BUGGY]  Opcodes.IASTORE_DEFINE_WARNING,  cfgNode.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Opcodes.IASTORE_DEFINE_WARNING,  cfgNode.getLastChild(),  output);  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Opcodes.IASTORE_DEFINE_WARNING,  cfgNode.getLastChild(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
342	[BUG]  [BUGGY]  Opcodes.IASTORE_DEFINE_WARNING,  cfgNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {      [BUGGY]  Opcodes.IASTORE_DEFINE_WARNING,  cfgNode.getLastChild());  [BUGGY]      addToDefIfLocal(c.getString(),  conditional  ?  null  :  cfgNode,  c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	271	271	3	replace	Opcodes.IASTORE_DEFINE_WARNING,  cfgNode.getLastChild());	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
