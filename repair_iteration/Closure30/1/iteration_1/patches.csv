bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
2	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
3	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
4	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
5	[BUG]  [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
6	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	1	None	replace
7	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
8	[BUG]  [BUGGY]  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
9	[BUG]  [BUGGY]  ||  s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  ||  s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
10	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Node  rValue  =  jsScope.getVar(name);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getVar(name);	  if(s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
11	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
12	[BUG]  [BUGGY]  Scope  jsScope  =  jsScope.getScope();  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Scope  jsScope  =  jsScope.getScope();  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  jsScope  =  jsScope.getScope();	  if(s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
13	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  new  MustDef());  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  new  MustDef());	  NodeTraversal.traverse(compiler,    s,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  MustDef());  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  new  MustDef());	  NodeTraversal.traverse(compiler,    s,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  MustDef());  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  jsScope,  new  MustDef());	  NodeTraversal.traverse(compiler,    s,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  MustDef());  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  n,  new  MustDef());	  NodeTraversal.traverse(compiler,    s,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
18	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  useNode,  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  useNode,  new  MustDef());  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  useNode,  new  MustDef());	  NodeTraversal.traverse(compiler,    s,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
19	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  definition,  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  s,  definition,  new  MustDef());  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  definition,  new  MustDef());	  NodeTraversal.traverse(compiler,    s,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
20	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  MustDef(),  def);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  MustDef(),  def);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  MustDef(),  def);	  NodeTraversal.traverse(compiler,    s,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends.contains(def));  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(s.depends.contains(def));  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends.contains(def));	  Preconditions.checkArgument(def.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends.contains(def.depends));  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(s.depends.contains(def.depends));  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends.contains(def.depends));	  Preconditions.checkArgument(def.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s));  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s));  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(!def.depends.contains(s));	  Preconditions.checkArgument(def.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkArgument(resultMap.contains(s));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(resultMap.contains(s));  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(resultMap.contains(s));	  Preconditions.checkArgument(def.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkArgument(des.depends.contains(s));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(des.depends.contains(s));  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(des.depends.contains(s));	  Preconditions.checkArgument(def.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
26	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
27	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	7	None	replace
28	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
29	[BUG]  [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
30	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
31	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
32	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
33	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
34	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
35	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
36	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
37	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
38	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
39	[BUG]  [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.scope));  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(resultMap.contains(s.scope));	  Preconditions.checkArgument(def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope));  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(!def.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkArgument(jsScope.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(jsScope.depends.contains(s.scope));  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(jsScope.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  def.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  def.depends.contains(s.scope));  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.scope)||  def.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkArgument(des.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(des.depends.contains(s.scope));  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(des.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  s.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  s.depends.contains(s.scope));  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.scope)||  s.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
46	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
47	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
48	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
49	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
50	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
51	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	5	None	replace
52	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
53	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
54	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
55	[BUG]  [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  new  FlowState  <  MustDef>());  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  new  FlowState  <  MustDef>());  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
57	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  FlowState  <  MustDef>());  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  FlowState  <  MustDef>());  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FlowState  <  MustDef>());  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FlowState  <  MustDef>());  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  n,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  FlowState  <  MustDef>());  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  FlowState  <  MustDef>());  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  jsScope,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
60	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  def);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  def);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  def);	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
61	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  state);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  state);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  state);	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
62	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  state,  new  FlowState  <  MustDef>());  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  s,  state,  new  FlowState  <  MustDef>());  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  state,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
63	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
64	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
65	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
66	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
67	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
68	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	4	None	replace
69	[BUG]  [BUGGY]  Node  rValue  =  s.getRValue();  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Node  rValue  =  s.getRValue();  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getRValue();	      	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
70	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getRValue();  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Node  rValue  =  jsScope.getRValue();  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getRValue();	      	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
71	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getRValue(name);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Node  rValue  =  jsScope.getRValue(name);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getRValue(name);	      	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
72	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Node  rValue  =  s.getVar(name);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);	      	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
73	[BUG]  [BUGGY]  escaped.add(s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  escaped.add(s.scope);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.scope);	      	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
74	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
75	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
76	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
77	[BUG]  [BUGGY]  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
78	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
79	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Node  rValue  =  jsScope.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
80	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
81	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	6	None	replace
82	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
83	[BUG]  [BUGGY]  escaped.add(s);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  escaped.add(s);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s);	  escaped.add(def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
84	[BUG]  [BUGGY]  escaped.add(s.jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  escaped.add(s.jsScope);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.jsScope);	  escaped.add(def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
85	[BUG]  [BUGGY]  escaped.add(s,  def);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  escaped.add(s,  def);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s,  def);	  escaped.add(def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
86	[BUG]  [BUGGY]  escaped.add(s.definition);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  escaped.add(s.definition);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.definition);	  escaped.add(def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
87	[BUG]  [BUGGY]  escaped.add(s.name);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  escaped.add(s.name);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.name);	  escaped.add(def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
88	[BUG]  [BUGGY]  escaped.add(s.getValue());  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  escaped.add(s.getValue());  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.getValue());	  escaped.add(def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkArgument(jsScope!=  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(jsScope!=  s.scope);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(jsScope!=  s.scope);	  Preconditions.checkArgument(s.scope!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkArgument(s.scope!=  jsScope,  def);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(s.scope!=  jsScope,  def);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.scope!=  jsScope,  def);	  Preconditions.checkArgument(s.scope!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkArgument(s.scope  ==  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(s.scope  ==  jsScope);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.scope  ==  jsScope);	  Preconditions.checkArgument(s.scope!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkArgument(s.scope  ==  jsScope,  def);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(s.scope  ==  jsScope,  def);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.scope  ==  jsScope,  def);	  Preconditions.checkArgument(s.scope!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkArgument(jsScope  ==  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(jsScope  ==  s.scope);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(jsScope  ==  s.scope);	  Preconditions.checkArgument(s.scope!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkArgument(s.scope!=  def);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(s.scope!=  def);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.scope!=  def);	  Preconditions.checkArgument(s.scope!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
95	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
96	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	2	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  s,  def);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
98	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  def);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  def);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  this,  def);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
99	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  useNode);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  useNode);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  this,  useNode);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
100	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  this);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  jsScope,  this);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
101	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  n,  this);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
102	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  def,  this);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  this);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
103	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  this);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  this);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
104	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
105	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
106	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(jsScope))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(jsScope))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(jsScope))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
107	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
108	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
109	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
110	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
111	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
112	[BUG]  [BUGGY]  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
113	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
114	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
115	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
116	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
117	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	18	None	replace
118	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
119	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
120	[BUG]  [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
121	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
122	[BUG]  [BUGGY]  for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
123	[BUG]  [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
124	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	5	None	replace
125	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
126	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
127	[BUG]  [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
128	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
129	[BUG]  [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValu  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValu  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValu	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	16	None	replace
130	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
131	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
132	[BUG]  [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
133	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
134	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
135	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
136	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
137	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	2	None	replace
138	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
139	[BUG]  [BUGGY]  FlowState  <  Var>  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  FlowState  <  Var>  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
140	[BUG]  [BUGGY]  if(s.scope!=  target)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(s.scope!=  target)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  target)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
141	[BUG]  [BUGGY]  escaped.put(name,  def);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  escaped.put(name,  def);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.put(name,  def);	  escaped.add(def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
142	[BUG]  [BUGGY]  escaped.add(s.scope,  def);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  escaped.add(s.scope,  def);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.scope,  def);	  escaped.add(def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
143	[BUG]  [BUGGY]  escaped.add(jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  escaped.add(jsScope);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(jsScope);	  escaped.add(def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  def.depends.contains(s));  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  def.depends.contains(s));  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends!=  null  &&  def.depends.contains(s));	  Preconditions.checkArgument(def.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s)||  s.scope!=  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(def.depends.contains(s)||  s.scope!=  jsScope);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s)||  s.scope!=  jsScope);	  Preconditions.checkArgument(def.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  def.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  def.depends.contains(s.scope));  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends!=  null  &&  def.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  s.depends.contains(s.depends));  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  s.depends.contains(s.depends));  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.scope)||  s.depends.contains(s.depends));	  Preconditions.checkArgument(def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  def.depends.contains(s.rValue));  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  def.depends.contains(s.rValue));  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.scope)||  def.depends.contains(s.rValue));	  Preconditions.checkArgument(def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkArgument(reachingDef.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(reachingDef.contains(s.scope));  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(reachingDef.contains(s.scope));	  Preconditions.checkArgument(def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
150	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
151	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
152	[BUG]  [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
153	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Node  rValue  =  jsScope.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getVar(name);  if(rValue  ==  null)  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
154	[BUG]  [BUGGY]  Scope  s  =  jsScope.getScope();  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Scope  s  =  jsScope.getScope();  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  s  =  jsScope.getScope();	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(def.depends!=  s.scope);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends!=  s.scope);	  Preconditions.checkArgument(s.scope!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkArgument(s.scope!=  useNode);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(s.scope!=  useNode);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.scope!=  useNode);	  Preconditions.checkArgument(s.scope!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
157	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
158	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
159	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
160	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	4	None	replace
161	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
162	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
163	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
164	[BUG]  [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValu  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValu  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValu	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	18	None	replace
165	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
166	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
167	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
168	[BUG]  [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
169	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
170	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
171	[BUG]  [BUGGY]  for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
172	[BUG]  [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
173	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
174	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	7	None	replace
175	[BUG]  [BUGGY]  if(s.scope!=  target)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(s.scope!=  target)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  target)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
176	[BUG]  [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
177	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
178	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(reachingDef,  escaped));  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(reachingDef,  escaped));  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(reachingDef,  escaped));	      	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
179	[BUG]  [BUGGY]  Node  rValue  =  s.getParent();  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Node  rValue  =  s.getParent();  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getParent();	      	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
180	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  useNode,  this);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  useNode,  this);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  useNode,  this);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
181	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
182	[BUG]  [BUGGY]  for(Var  s  :  s.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  s.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  s.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
183	[BUG]  [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
184	[BUG]  [BUGGY]  escaped.add(s.getName());  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  escaped.add(s.getName());  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.getName());	  escaped.add(def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
185	[BUG]  [BUGGY]  escaped.add(s.getString());  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  escaped.add(s.getString());  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.getString());	  escaped.add(def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
186	[BUG]  [BUGGY]  escaped.add(s.toString());  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  escaped.add(s.toString());  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.toString());	  escaped.add(def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
187	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(resultMap));  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(resultMap));  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(resultMap));	      	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
188	[BUG]  [BUGGY]  Node  rValue  =  s.getLastChild();  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Node  rValue  =  s.getLastChild();  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getLastChild();	      	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
189	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
190	[BUG]  [BUGGY]  Node  rhs  =  jsScope.getVar(name);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Node  rhs  =  jsScope.getVar(name);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rhs  =  jsScope.getVar(name);	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
191	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
192	[BUG]  [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
193	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
194	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
195	[BUG]  [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
196	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
197	[BUG]  [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
198	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	2	None	replace
199	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
200	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name,  rValue);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name,  rValue);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name,  rValue);  if(rValue  ==  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
201	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
202	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
203	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
204	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
205	[BUG]  [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
206	[BUG]  [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
207	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(1));  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(1));  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(1));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
208	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
209	[BUG]  [BUGGY]  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
210	[BUG]  [BUGGY]  Scope  jsScope  =  jsScope.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Scope  jsScope  =  jsScope.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  jsScope  =  jsScope.getVar(name);  if(rhs!=  null)  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
211	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
212	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  state);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  state);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  this,  state);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
213	[BUG]  [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
214	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	3	None	replace
215	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
216	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
217	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(def.depends!=  jsScope);  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends!=  jsScope);	  Preconditions.checkArgument(s.scope!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
218	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
219	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
220	[BUG]  [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
221	[BUG]  [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
222	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	4	None	replace
223	[BUG]  [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
224	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  def.depends.contains(s.name));  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  def.depends.contains(s.name));  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.scope)||  def.depends.contains(s.name));	  Preconditions.checkArgument(def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
225	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.name));  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.name));  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.name));	  Preconditions.checkArgument(def.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
226	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s,  s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }    [BUGGY]  Preconditions.checkArgument(def.depends.contains(s,  s.scope));  [BUGGY]    return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s,  s.scope));	  Preconditions.checkArgument(def.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
