bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
2	[BUG]  [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
3	[BUG]  [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
4	[BUG]  [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
5	[BUG]  [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
6	[BUG]  [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
7	[BUG]  [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
8	[BUG]  [BUGGY]    [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  [BUGGY]    [BUGGY]  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	  	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
9	[BUG]  [BUGGY]  escaped.add(def);  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  [BUGGY]  escaped.add(def);  [BUGGY]  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(def);	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  this);  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  [BUGGY]  NodeTraversal.traverse(compiler,  s,  this);  [BUGGY]  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  this);	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
11	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>());  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>());  [BUGGY]  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>());	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  MustDef());  [BUGGY]  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  MustDef());	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope));  [BUGGY]  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.scope));	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkArgument(s.scope!=  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  [BUGGY]  Preconditions.checkArgument(s.scope!=  jsScope);  [BUGGY]  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.scope!=  jsScope);	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s));  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s));  [BUGGY]  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s));	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
16	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
17	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
18	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
19	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
20	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
21	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
22	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
